// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2019.1.1 (win64) Build 2580384 Sat Jun 29 08:12:21 MDT 2019
// Date        : Tue Jul 30 15:55:15 2019
// Host        : dt-205 running 64-bit major release  (build 9200)
// Command     : write_verilog -force -mode funcsim
//               F:/Projekty/HIPERO/dev/fpga/ip_projects/semicap/semicap.srcs/sources_1/bd/semicap/semicap_sim_netlist.v
// Design      : semicap
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xcku040-ffva1156-2-e
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* hw_handoff = "semicap.hwdef" *) 
(* NotValidForBitStream *)
module semicap
   (AXI_ENG_araddr,
    AXI_ENG_arprot,
    AXI_ENG_arready,
    AXI_ENG_arvalid,
    AXI_ENG_awaddr,
    AXI_ENG_awprot,
    AXI_ENG_awready,
    AXI_ENG_awvalid,
    AXI_ENG_bready,
    AXI_ENG_bresp,
    AXI_ENG_bvalid,
    AXI_ENG_rdata,
    AXI_ENG_rready,
    AXI_ENG_rresp,
    AXI_ENG_rvalid,
    AXI_ENG_wdata,
    AXI_ENG_wready,
    AXI_ENG_wstrb,
    AXI_ENG_wvalid,
    AXI_HW_araddr,
    AXI_HW_arready,
    AXI_HW_arvalid,
    AXI_HW_awaddr,
    AXI_HW_awready,
    AXI_HW_awvalid,
    AXI_HW_bready,
    AXI_HW_bresp,
    AXI_HW_bvalid,
    AXI_HW_rdata,
    AXI_HW_rready,
    AXI_HW_rresp,
    AXI_HW_rvalid,
    AXI_HW_wdata,
    AXI_HW_wready,
    AXI_HW_wstrb,
    AXI_HW_wvalid,
    IRq,
    areset_n,
    clk_axi,
    iRpMinVoter_0,
    oRpReset_n_0,
    spi_c_0,
    spi_d_0,
    spi_q_0,
    spi_s_n_0);
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG ARADDR" *) (* x_interface_parameter = "XIL_INTERFACENAME AXI_ENG, ADDR_WIDTH 12, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN semicap_clk_axi, DATA_WIDTH 32, FREQ_HZ 100000000, HAS_BRESP 1, HAS_BURST 0, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 1, HAS_QOS 0, HAS_REGION 0, HAS_RRESP 1, HAS_WSTRB 1, ID_WIDTH 0, INSERT_VIP 0, MAX_BURST_LENGTH 1, NUM_READ_OUTSTANDING 1, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 1, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI4LITE, READ_WRITE_MODE READ_WRITE, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 0, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) input [4:0]AXI_ENG_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG ARPROT" *) input [2:0]AXI_ENG_arprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG ARREADY" *) output AXI_ENG_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG ARVALID" *) input AXI_ENG_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG AWADDR" *) input [4:0]AXI_ENG_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG AWPROT" *) input [2:0]AXI_ENG_awprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG AWREADY" *) output AXI_ENG_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG AWVALID" *) input AXI_ENG_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG BREADY" *) input AXI_ENG_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG BRESP" *) output [1:0]AXI_ENG_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG BVALID" *) output AXI_ENG_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG RDATA" *) output [31:0]AXI_ENG_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG RREADY" *) input AXI_ENG_rready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG RRESP" *) output [1:0]AXI_ENG_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG RVALID" *) output AXI_ENG_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG WDATA" *) input [31:0]AXI_ENG_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG WREADY" *) output AXI_ENG_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG WSTRB" *) input [3:0]AXI_ENG_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_ENG WVALID" *) input AXI_ENG_wvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW ARADDR" *) (* x_interface_parameter = "XIL_INTERFACENAME AXI_HW, ADDR_WIDTH 12, ARUSER_WIDTH 0, AWUSER_WIDTH 0, BUSER_WIDTH 0, CLK_DOMAIN semicap_clk_axi, DATA_WIDTH 32, FREQ_HZ 100000000, HAS_BRESP 1, HAS_BURST 0, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_RRESP 1, HAS_WSTRB 1, ID_WIDTH 0, INSERT_VIP 0, MAX_BURST_LENGTH 1, NUM_READ_OUTSTANDING 1, NUM_READ_THREADS 1, NUM_WRITE_OUTSTANDING 1, NUM_WRITE_THREADS 1, PHASE 0.000, PROTOCOL AXI4LITE, READ_WRITE_MODE READ_WRITE, RUSER_BITS_PER_BYTE 0, RUSER_WIDTH 0, SUPPORTS_NARROW_BURST 0, WUSER_BITS_PER_BYTE 0, WUSER_WIDTH 0" *) input [8:0]AXI_HW_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW ARREADY" *) output AXI_HW_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW ARVALID" *) input AXI_HW_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW AWADDR" *) input [8:0]AXI_HW_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW AWREADY" *) output AXI_HW_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW AWVALID" *) input AXI_HW_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW BREADY" *) input AXI_HW_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW BRESP" *) output [1:0]AXI_HW_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW BVALID" *) output AXI_HW_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW RDATA" *) output [31:0]AXI_HW_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW RREADY" *) input AXI_HW_rready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW RRESP" *) output [1:0]AXI_HW_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW RVALID" *) output AXI_HW_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW WDATA" *) input [31:0]AXI_HW_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW WREADY" *) output AXI_HW_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW WSTRB" *) input [3:0]AXI_HW_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 AXI_HW WVALID" *) input AXI_HW_wvalid;
  output IRq;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 RST.ARESET_N RST" *) (* x_interface_parameter = "XIL_INTERFACENAME RST.ARESET_N, INSERT_VIP 0, POLARITY ACTIVE_LOW" *) input areset_n;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.CLK_AXI CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME CLK.CLK_AXI, ASSOCIATED_BUSIF AXI_ENG:AXI_HW, ASSOCIATED_RESET areset_n, CLK_DOMAIN semicap_clk_axi, FREQ_HZ 100000000, INSERT_VIP 0, PHASE 0.000" *) input clk_axi;
  input [3:0]iRpMinVoter_0;
  output [2:0]oRpReset_n_0;
  output spi_c_0;
  output spi_d_0;
  input spi_q_0;
  output spi_s_n_0;

  wire [4:0]AXI_ENG_araddr;
  wire [2:0]AXI_ENG_arprot;
  wire AXI_ENG_arready;
  wire AXI_ENG_arvalid;
  wire [4:0]AXI_ENG_awaddr;
  wire [2:0]AXI_ENG_awprot;
  wire AXI_ENG_awready;
  wire AXI_ENG_awvalid;
  wire AXI_ENG_bready;
  wire [1:0]AXI_ENG_bresp;
  wire AXI_ENG_bvalid;
  wire [31:0]AXI_ENG_rdata;
  wire AXI_ENG_rready;
  wire [1:0]AXI_ENG_rresp;
  wire AXI_ENG_rvalid;
  wire [31:0]AXI_ENG_wdata;
  wire AXI_ENG_wready;
  wire [3:0]AXI_ENG_wstrb;
  wire AXI_ENG_wvalid;
  wire [8:0]AXI_HW_araddr;
  wire AXI_HW_arready;
  wire AXI_HW_arvalid;
  wire [8:0]AXI_HW_awaddr;
  wire AXI_HW_awready;
  wire AXI_HW_awvalid;
  wire AXI_HW_bready;
  wire [1:0]AXI_HW_bresp;
  wire AXI_HW_bvalid;
  wire [31:0]AXI_HW_rdata;
  wire AXI_HW_rready;
  wire [1:0]AXI_HW_rresp;
  wire AXI_HW_rvalid;
  wire [31:0]AXI_HW_wdata;
  wire AXI_HW_wready;
  wire [3:0]AXI_HW_wstrb;
  wire AXI_HW_wvalid;
  wire IRq;
  wire areset_n;
  wire axi_hwicap_cap_req;
  wire axi_hwicap_icap_csib;
  wire axi_hwicap_icap_rdwrb;
  wire axi_hwicap_ip2intc_irpt;
  wire clk_axi;
  wire [25:0]fecc_far;
  wire [7:0]fetch_txdata;
  wire hipero_icap_0_fecc_crcerror;
  wire hipero_icap_0_fecc_eccerrornotsingle;
  wire hipero_icap_0_fecc_eccerrorsingle;
  wire hipero_icap_0_fecc_endofframe;
  wire hipero_icap_0_fecc_endofscan;
  wire hipero_icap_0_icap_avail;
  wire hipero_icap_0_icap_prdone;
  wire hipero_icap_0_icap_prerror;
  wire hipero_sem_cap_req;
  wire hipero_sem_command_busy;
  wire [1:0]hipero_sem_fecc_farsel;
  wire hipero_sem_fetch_rxread;
  wire hipero_sem_fetch_txwrite;
  wire hipero_sem_icap_csib;
  wire hipero_sem_icap_rdwrb;
  wire hipero_sem_monitor_rxread;
  wire hipero_sem_monitor_txwrite;
  wire hipero_sem_status_classification;
  wire hipero_sem_status_correction;
  wire hipero_sem_status_detect_only;
  wire hipero_sem_status_diagnostic_scan;
  wire hipero_sem_status_essential;
  wire hipero_sem_status_heartbeat;
  wire hipero_sem_status_initialization;
  wire hipero_sem_status_injection;
  wire hipero_sem_status_observation;
  wire hipero_sem_status_uncorrectable;
  wire [2:0]iConfigRegIrqMask;
  wire [31:0]iHwIcapO;
  wire [31:0]iIcapO;
  wire [7:0]iMonitorRegByte;
  wire [2:0]iResetsReg;
  wire [3:0]iRpMinVoter_0;
  wire [31:0]iSemIcapO;
  wire [7:0]iSemMonTxData;
  wire [31:0]iTblAddReg;
  wire icapmux_0_oHwIcapAvail;
  wire [31:0]icapmux_0_oHwIcapI;
  wire icapmux_0_oIcapCsib;
  wire [31:0]icapmux_0_oIcapI;
  wire icapmux_0_oIcapRdWrb;
  wire icapmux_0_oSemIcapAvail;
  wire [31:0]icapmux_0_oSemIcapI;
  wire icapmux_0_oSemIcapPrDone;
  wire icapmux_0_oSemIcapPrError;
  wire [2:0]oRpReset_n_0;
  wire semicap_axi_0_oConfigRegSemEn;
  wire semicap_axi_0_oMinVoterRegClearStrobe;
  wire semicap_axi_0_oMonitorRegGetByte;
  wire semicap_axi_0_oMonitorRegPutByte;
  wire semicap_axi_0_oMonitorRegWriteStrobe;
  wire [2:0]semicap_engine_0_oConfigRegIrqMask;
  wire semicap_engine_0_oConfigRegSemEn;
  wire [7:0]semicap_engine_0_oDevInfoId;
  wire [7:0]semicap_engine_0_oDevInfoVersionMajor;
  wire [7:0]semicap_engine_0_oDevInfoVersionMinor;
  wire semicap_engine_0_oHwIcapEos;
  wire semicap_engine_0_oHwIcapGrant;
  wire semicap_engine_0_oHwIcapRelinquish;
  wire semicap_engine_0_oMinVoterRegCmpStat;
  wire [2:0]semicap_engine_0_oMinVoterRegTmrStat;
  wire [7:0]semicap_engine_0_oMonitorRegByte;
  wire semicap_engine_0_oMuxSemSelect;
  wire semicap_engine_0_oSemAuxErrorCrEs;
  wire semicap_engine_0_oSemAuxErrorCrNe;
  wire semicap_engine_0_oSemAuxErrorUc;
  wire semicap_engine_0_oSemCapGrant;
  wire semicap_engine_0_oSemCapRelinquish;
  wire [39:0]semicap_engine_0_oSemCmdCode;
  wire semicap_engine_0_oSemCmdStrobe;
  wire [31:0]semicap_engine_0_oSemFetchTblAddr;
  wire [7:0]semicap_engine_0_oSemMonRxData;
  wire semicap_engine_0_oSemMonRxEmpty;
  wire semicap_engine_0_oSemMonTxFull;
  wire semicap_engine_0_oStatusRegFifoCmdFull;
  wire semicap_engine_0_oStatusRegFifoStatFull;
  wire semicap_engine_0_oStatusRegMonEmpty;
  wire [3:0]semicap_engine_0_oStatusRegState;
  wire [31:0]semicap_engine_0_oTblAddReg;
  wire [7:0]semicap_spihelper_0_fetch_rxdata;
  wire semicap_spihelper_0_fetch_rxempty;
  wire semicap_spihelper_0_fetch_txfull;
  wire spi_c_0;
  wire spi_d_0;
  wire spi_q_0;
  wire spi_s_n_0;

  (* CHECK_LICENSE_TYPE = "semicap_axi_hwicap_0,axi_hwicap,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "axi_hwicap,Vivado 2019.1.1" *) 
  semicap_semicap_axi_hwicap_0 axi_hwicap
       (.cap_gnt(semicap_engine_0_oHwIcapGrant),
        .cap_rel(semicap_engine_0_oHwIcapRelinquish),
        .cap_req(axi_hwicap_cap_req),
        .eos_in(semicap_engine_0_oHwIcapEos),
        .icap_avail(icapmux_0_oHwIcapAvail),
        .icap_clk(clk_axi),
        .icap_csib(axi_hwicap_icap_csib),
        .icap_i(icapmux_0_oHwIcapI),
        .icap_o(iHwIcapO),
        .icap_rdwrb(axi_hwicap_icap_rdwrb),
        .ip2intc_irpt(axi_hwicap_ip2intc_irpt),
        .s_axi_aclk(clk_axi),
        .s_axi_araddr(AXI_HW_araddr),
        .s_axi_aresetn(areset_n),
        .s_axi_arready(AXI_HW_arready),
        .s_axi_arvalid(AXI_HW_arvalid),
        .s_axi_awaddr(AXI_HW_awaddr),
        .s_axi_awready(AXI_HW_awready),
        .s_axi_awvalid(AXI_HW_awvalid),
        .s_axi_bready(AXI_HW_bready),
        .s_axi_bresp(AXI_HW_bresp),
        .s_axi_bvalid(AXI_HW_bvalid),
        .s_axi_rdata(AXI_HW_rdata),
        .s_axi_rready(AXI_HW_rready),
        .s_axi_rresp(AXI_HW_rresp),
        .s_axi_rvalid(AXI_HW_rvalid),
        .s_axi_wdata(AXI_HW_wdata),
        .s_axi_wready(AXI_HW_wready),
        .s_axi_wstrb(AXI_HW_wstrb),
        .s_axi_wvalid(AXI_HW_wvalid));
  (* CHECK_LICENSE_TYPE = "semicap_hipero_icap_0_0,hipero_icap,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* ip_definition_source = "package_project" *) 
  (* x_core_info = "hipero_icap,Vivado 2018.3.1" *) 
  semicap_semicap_hipero_icap_0_0 hipero_icap_0
       (.fecc_crcerror(hipero_icap_0_fecc_crcerror),
        .fecc_eccerrornotsingle(hipero_icap_0_fecc_eccerrornotsingle),
        .fecc_eccerrorsingle(hipero_icap_0_fecc_eccerrorsingle),
        .fecc_endofframe(hipero_icap_0_fecc_endofframe),
        .fecc_endofscan(hipero_icap_0_fecc_endofscan),
        .fecc_far(fecc_far),
        .fecc_farsel(hipero_sem_fecc_farsel),
        .icap_avail(hipero_icap_0_icap_avail),
        .icap_clk(clk_axi),
        .icap_csib(icapmux_0_oIcapCsib),
        .icap_i(icapmux_0_oIcapI),
        .icap_o(iIcapO),
        .icap_prdone(hipero_icap_0_icap_prdone),
        .icap_prerror(hipero_icap_0_icap_prerror),
        .icap_rdwrb(icapmux_0_oIcapRdWrb));
  (* x_core_info = "sem_ultra_v3_1_11,Vivado 2019.1.1" *) 
  semicap_semicap_hipero_sem_0 hipero_sem
       (.aux_error_cr_es(semicap_engine_0_oSemAuxErrorCrEs),
        .aux_error_cr_ne(semicap_engine_0_oSemAuxErrorCrNe),
        .aux_error_uc(semicap_engine_0_oSemAuxErrorUc),
        .cap_gnt(semicap_engine_0_oSemCapGrant),
        .cap_rel(semicap_engine_0_oSemCapRelinquish),
        .cap_req(hipero_sem_cap_req),
        .command_busy(hipero_sem_command_busy),
        .command_code(semicap_engine_0_oSemCmdCode),
        .command_strobe(semicap_engine_0_oSemCmdStrobe),
        .fecc_crcerror(hipero_icap_0_fecc_crcerror),
        .fecc_eccerrornotsingle(hipero_icap_0_fecc_eccerrornotsingle),
        .fecc_eccerrorsingle(hipero_icap_0_fecc_eccerrorsingle),
        .fecc_endofframe(hipero_icap_0_fecc_endofframe),
        .fecc_endofscan(hipero_icap_0_fecc_endofscan),
        .fecc_far(fecc_far),
        .fecc_farsel(hipero_sem_fecc_farsel),
        .fetch_rxdata(semicap_spihelper_0_fetch_rxdata),
        .fetch_rxempty(semicap_spihelper_0_fetch_rxempty),
        .fetch_rxread(hipero_sem_fetch_rxread),
        .fetch_tbladdr(semicap_engine_0_oSemFetchTblAddr),
        .fetch_txdata(fetch_txdata),
        .fetch_txfull(semicap_spihelper_0_fetch_txfull),
        .fetch_txwrite(hipero_sem_fetch_txwrite),
        .icap_avail(icapmux_0_oSemIcapAvail),
        .icap_clk(clk_axi),
        .icap_csib(hipero_sem_icap_csib),
        .icap_i(iSemIcapO),
        .icap_o(icapmux_0_oSemIcapI),
        .icap_prdone(icapmux_0_oSemIcapPrDone),
        .icap_prerror(icapmux_0_oSemIcapPrError),
        .icap_rdwrb(hipero_sem_icap_rdwrb),
        .monitor_rxdata(semicap_engine_0_oSemMonRxData),
        .monitor_rxempty(semicap_engine_0_oSemMonRxEmpty),
        .monitor_rxread(hipero_sem_monitor_rxread),
        .monitor_txdata(iSemMonTxData),
        .monitor_txfull(semicap_engine_0_oSemMonTxFull),
        .monitor_txwrite(hipero_sem_monitor_txwrite),
        .status_classification(hipero_sem_status_classification),
        .status_correction(hipero_sem_status_correction),
        .status_detect_only(hipero_sem_status_detect_only),
        .status_diagnostic_scan(hipero_sem_status_diagnostic_scan),
        .status_essential(hipero_sem_status_essential),
        .status_heartbeat(hipero_sem_status_heartbeat),
        .status_initialization(hipero_sem_status_initialization),
        .status_injection(hipero_sem_status_injection),
        .status_observation(hipero_sem_status_observation),
        .status_uncorrectable(hipero_sem_status_uncorrectable));
  (* CHECK_LICENSE_TYPE = "semicap_icapmux_0_0,icapmux,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* ip_definition_source = "module_ref" *) 
  (* x_core_info = "icapmux,Vivado 2019.1.1" *) 
  semicap_semicap_icapmux_0_0 icapmux_0
       (.iEngSemSelect(semicap_engine_0_oMuxSemSelect),
        .iHwIcapCsib(axi_hwicap_icap_csib),
        .iHwIcapO(iHwIcapO),
        .iHwIcapWr_n(axi_hwicap_icap_rdwrb),
        .iIcapAvail(hipero_icap_0_icap_avail),
        .iIcapO(iIcapO),
        .iIcapPrDone(hipero_icap_0_icap_prdone),
        .iIcapPrError(hipero_icap_0_icap_prerror),
        .iSemIcapCsib(hipero_sem_icap_csib),
        .iSemIcapO(iSemIcapO),
        .iSemIcapWr_n(hipero_sem_icap_rdwrb),
        .oHwIcapAvail(icapmux_0_oHwIcapAvail),
        .oHwIcapI(icapmux_0_oHwIcapI),
        .oIcapCsib(icapmux_0_oIcapCsib),
        .oIcapI(icapmux_0_oIcapI),
        .oIcapRdWrb(icapmux_0_oIcapRdWrb),
        .oSemIcapAvail(icapmux_0_oSemIcapAvail),
        .oSemIcapI(icapmux_0_oSemIcapI),
        .oSemIcapPrDone(icapmux_0_oSemIcapPrDone),
        .oSemIcapPrError(icapmux_0_oSemIcapPrError));
  (* CHECK_LICENSE_TYPE = "semicap_semicap_axi_0_0,semicap_axi_v1_0,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "semicap_axi_v1_0,Vivado 2019.1.1" *) 
  semicap_semicap_semicap_axi_0_0 semicap_axi_0
       (.iConfigRegIrqMask(semicap_engine_0_oConfigRegIrqMask),
        .iConfigRegSemEn(semicap_engine_0_oConfigRegSemEn),
        .iDevInfoId(semicap_engine_0_oDevInfoId),
        .iDevInfoVersionMajor(semicap_engine_0_oDevInfoVersionMajor),
        .iDevInfoVersionMinor(semicap_engine_0_oDevInfoVersionMinor),
        .iMinVoterRegCmpStat(semicap_engine_0_oMinVoterRegCmpStat),
        .iMinVoterRegTmrStat(semicap_engine_0_oMinVoterRegTmrStat),
        .iMonitorRegByte(semicap_engine_0_oMonitorRegByte),
        .iStatusRegFifoCmdFull(semicap_engine_0_oStatusRegFifoCmdFull),
        .iStatusRegFifoStatFull(semicap_engine_0_oStatusRegFifoStatFull),
        .iStatusRegMonEmpty(semicap_engine_0_oStatusRegMonEmpty),
        .iStatusRegState(semicap_engine_0_oStatusRegState),
        .iTblAddReg(semicap_engine_0_oTblAddReg),
        .oConfigRegIrqMask(iConfigRegIrqMask),
        .oConfigRegSemEn(semicap_axi_0_oConfigRegSemEn),
        .oMinVoterRegClearStrobe(semicap_axi_0_oMinVoterRegClearStrobe),
        .oMonitorRegByte(iMonitorRegByte),
        .oMonitorRegGetByte(semicap_axi_0_oMonitorRegGetByte),
        .oMonitorRegPutByte(semicap_axi_0_oMonitorRegPutByte),
        .oMonitorRegWriteStrobe(semicap_axi_0_oMonitorRegWriteStrobe),
        .oResetsReg(iResetsReg),
        .oTblAddReg(iTblAddReg),
        .s00_axi_aclk(clk_axi),
        .s00_axi_araddr(AXI_ENG_araddr),
        .s00_axi_aresetn(areset_n),
        .s00_axi_arprot(AXI_ENG_arprot),
        .s00_axi_arready(AXI_ENG_arready),
        .s00_axi_arvalid(AXI_ENG_arvalid),
        .s00_axi_awaddr(AXI_ENG_awaddr),
        .s00_axi_awprot(AXI_ENG_awprot),
        .s00_axi_awready(AXI_ENG_awready),
        .s00_axi_awvalid(AXI_ENG_awvalid),
        .s00_axi_bready(AXI_ENG_bready),
        .s00_axi_bresp(AXI_ENG_bresp),
        .s00_axi_bvalid(AXI_ENG_bvalid),
        .s00_axi_rdata(AXI_ENG_rdata),
        .s00_axi_rready(AXI_ENG_rready),
        .s00_axi_rresp(AXI_ENG_rresp),
        .s00_axi_rvalid(AXI_ENG_rvalid),
        .s00_axi_wdata(AXI_ENG_wdata),
        .s00_axi_wready(AXI_ENG_wready),
        .s00_axi_wstrb(AXI_ENG_wstrb),
        .s00_axi_wvalid(AXI_ENG_wvalid));
  (* CHECK_LICENSE_TYPE = "semicap_semicap_engine_0_0,semicap_engine,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* ip_definition_source = "package_project" *) 
  (* x_core_info = "semicap_engine,Vivado 2019.1.1" *) 
  semicap_semicap_semicap_engine_0_0 semicap_engine_0
       (.iClk(clk_axi),
        .iConfigRegIrqMask(iConfigRegIrqMask),
        .iConfigRegSemEn(semicap_axi_0_oConfigRegSemEn),
        .iHwIcapIrq(axi_hwicap_ip2intc_irpt),
        .iHwIcapRequest(axi_hwicap_cap_req),
        .iMinVoterRegClearStrobe(semicap_axi_0_oMinVoterRegClearStrobe),
        .iMonitorRegByte(iMonitorRegByte),
        .iMonitorRegGetByte(semicap_axi_0_oMonitorRegGetByte),
        .iMonitorRegPutByte(semicap_axi_0_oMonitorRegPutByte),
        .iMonitorRegWriteStrobe(semicap_axi_0_oMonitorRegWriteStrobe),
        .iResetsReg(iResetsReg),
        .iRpMinVoter(iRpMinVoter_0),
        .iRst_n(areset_n),
        .iSemCapRequest(hipero_sem_cap_req),
        .iSemCmdBusy(hipero_sem_command_busy),
        .iSemMonRxRead(hipero_sem_monitor_rxread),
        .iSemMonTxData(iSemMonTxData),
        .iSemMonTxWrite(hipero_sem_monitor_txwrite),
        .iSemStatusclassification(hipero_sem_status_classification),
        .iSemStatuscorrection(hipero_sem_status_correction),
        .iSemStatusdetectOnly(hipero_sem_status_detect_only),
        .iSemStatusdiagnosticScan(hipero_sem_status_diagnostic_scan),
        .iSemStatusessential(hipero_sem_status_essential),
        .iSemStatusheartbeat(hipero_sem_status_heartbeat),
        .iSemStatusinitialization(hipero_sem_status_initialization),
        .iSemStatusinjection(hipero_sem_status_injection),
        .iSemStatusobservation(hipero_sem_status_observation),
        .iSemStatusuncorrectable(hipero_sem_status_uncorrectable),
        .iTblAddReg(iTblAddReg),
        .oConfigRegIrqMask(semicap_engine_0_oConfigRegIrqMask),
        .oConfigRegSemEn(semicap_engine_0_oConfigRegSemEn),
        .oDevInfoId(semicap_engine_0_oDevInfoId),
        .oDevInfoVersionMajor(semicap_engine_0_oDevInfoVersionMajor),
        .oDevInfoVersionMinor(semicap_engine_0_oDevInfoVersionMinor),
        .oHwIcapEos(semicap_engine_0_oHwIcapEos),
        .oHwIcapGrant(semicap_engine_0_oHwIcapGrant),
        .oHwIcapRelinquish(semicap_engine_0_oHwIcapRelinquish),
        .oIRq(IRq),
        .oMinVoterRegCmpStat(semicap_engine_0_oMinVoterRegCmpStat),
        .oMinVoterRegTmrStat(semicap_engine_0_oMinVoterRegTmrStat),
        .oMonitorRegByte(semicap_engine_0_oMonitorRegByte),
        .oMuxSemSelect(semicap_engine_0_oMuxSemSelect),
        .oRpReset_n(oRpReset_n_0),
        .oSemAuxErrorCrEs(semicap_engine_0_oSemAuxErrorCrEs),
        .oSemAuxErrorCrNe(semicap_engine_0_oSemAuxErrorCrNe),
        .oSemAuxErrorUc(semicap_engine_0_oSemAuxErrorUc),
        .oSemCapGrant(semicap_engine_0_oSemCapGrant),
        .oSemCapRelinquish(semicap_engine_0_oSemCapRelinquish),
        .oSemCmdCode(semicap_engine_0_oSemCmdCode),
        .oSemCmdStrobe(semicap_engine_0_oSemCmdStrobe),
        .oSemFetchTblAddr(semicap_engine_0_oSemFetchTblAddr),
        .oSemMonRxData(semicap_engine_0_oSemMonRxData),
        .oSemMonRxEmpty(semicap_engine_0_oSemMonRxEmpty),
        .oSemMonTxFull(semicap_engine_0_oSemMonTxFull),
        .oStatusRegFifoCmdFull(semicap_engine_0_oStatusRegFifoCmdFull),
        .oStatusRegFifoStatFull(semicap_engine_0_oStatusRegFifoStatFull),
        .oStatusRegMonEmpty(semicap_engine_0_oStatusRegMonEmpty),
        .oStatusRegState(semicap_engine_0_oStatusRegState),
        .oTblAddReg(semicap_engine_0_oTblAddReg));
  (* CHECK_LICENSE_TYPE = "semicap_semicap_spihelper_0_0,sem_ultra_0_spi,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* ip_definition_source = "package_project" *) 
  (* x_core_info = "sem_ultra_0_spi,Vivado 2019.1.1" *) 
  semicap_semicap_semicap_spihelper_0_0 semicap_spihelper_0
       (.fetch_rxdata(semicap_spihelper_0_fetch_rxdata),
        .fetch_rxempty(semicap_spihelper_0_fetch_rxempty),
        .fetch_rxread(hipero_sem_fetch_rxread),
        .fetch_txdata(fetch_txdata),
        .fetch_txfull(semicap_spihelper_0_fetch_txfull),
        .fetch_txwrite(hipero_sem_fetch_txwrite),
        .icap_clk(clk_axi),
        .spi_c(spi_c_0),
        .spi_d(spi_d_0),
        .spi_q(spi_q_0),
        .spi_s_n(spi_s_n_0));
endmodule

(* ORIG_REF_NAME = "address_decoder" *) 
module semicap_address_decoder
   (\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ,
    p_8_in,
    \GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ,
    \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ,
    Bus_RNW_reg_reg_0,
    \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] ,
    \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ,
    \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_1 ,
    IP2Bus_WrAck_reg,
    SR,
    irpt_rdack,
    intr2bus_rdack0,
    irpt_wrack,
    interrupt_wrce_strb,
    irpt_wrack_d1_reg,
    IP2Bus_RdAck0,
    IP2Bus_WrAck0,
    p_10_in,
    p_11_in,
    D,
    bus2ip_wrce,
    \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_1 ,
    \AXI_HW_wdata[31] ,
    start2,
    s_axi_aclk,
    s_axi_aresetn,
    Q,
    AXI_HW_arready,
    ip2bus_rdack_i,
    AXI_HW_wready,
    ip2bus_wrack_i,
    ip2bus_rdack_i_reg,
    p_7_out,
    intr2bus_wrack,
    irpt_rdack_d1,
    irpt_wrack_d1,
    ipbus_ack_fifo,
    ipbus_ack,
    wr_en,
    busip_1,
    dout,
    \IP2Bus_Data_reg[20] ,
    scndry_vect_out,
    wr_data_count,
    rd_data_count,
    \IP2Bus_Data_reg[27] ,
    scndry_out,
    \IP2Bus_Data_reg[30] ,
    \IP2Bus_Data_reg[29] ,
    ipif_glbl_irpt_enable_reg,
    \ip2bus_data_i_reg[0] ,
    s_axi_wdata,
    \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 ,
    bus2ip_rnw_i);
  output \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ;
  output p_8_in;
  output \GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ;
  output \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ;
  output Bus_RNW_reg_reg_0;
  output \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] ;
  output \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ;
  output \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_1 ;
  output IP2Bus_WrAck_reg;
  output [0:0]SR;
  output irpt_rdack;
  output intr2bus_rdack0;
  output irpt_wrack;
  output interrupt_wrce_strb;
  output irpt_wrack_d1_reg;
  output IP2Bus_RdAck0;
  output IP2Bus_WrAck0;
  output p_10_in;
  output p_11_in;
  output [31:0]D;
  output [2:0]bus2ip_wrce;
  output [0:0]\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_1 ;
  output \AXI_HW_wdata[31] ;
  input start2;
  input s_axi_aclk;
  input s_axi_aresetn;
  input [4:0]Q;
  input AXI_HW_arready;
  input ip2bus_rdack_i;
  input AXI_HW_wready;
  input ip2bus_wrack_i;
  input ip2bus_rdack_i_reg;
  input p_7_out;
  input intr2bus_wrack;
  input irpt_rdack_d1;
  input irpt_wrack_d1;
  input ipbus_ack_fifo;
  input ipbus_ack;
  input wr_en;
  input busip_1;
  input [31:0]dout;
  input [11:0]\IP2Bus_Data_reg[20] ;
  input [31:0]scndry_vect_out;
  input [10:0]wr_data_count;
  input [8:0]rd_data_count;
  input [4:0]\IP2Bus_Data_reg[27] ;
  input scndry_out;
  input \IP2Bus_Data_reg[30] ;
  input \IP2Bus_Data_reg[29] ;
  input ipif_glbl_irpt_enable_reg;
  input [0:0]\ip2bus_data_i_reg[0] ;
  input [0:0]s_axi_wdata;
  input [6:0]\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 ;
  input bus2ip_rnw_i;

  wire AXI_HW_arready;
  wire \AXI_HW_wdata[31] ;
  wire AXI_HW_wready;
  wire Bus_RNW_reg_i_1_n_0;
  wire Bus_RNW_reg_reg_0;
  wire [31:0]D;
  wire \GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ;
  wire \GEN_BKEND_CE_REGISTERS[15].ce_out_i[15]_i_1_n_0 ;
  wire \GEN_BKEND_CE_REGISTERS[16].ce_out_i[16]_i_1_n_0 ;
  wire \GEN_BKEND_CE_REGISTERS[17].ce_out_i[17]_i_1_n_0 ;
  wire \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ;
  wire \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_1 ;
  wire \GEN_BKEND_CE_REGISTERS[18].ce_out_i[18]_i_1_n_0 ;
  wire \GEN_BKEND_CE_REGISTERS[19].ce_out_i[19]_i_1_n_0 ;
  wire \GEN_BKEND_CE_REGISTERS[20].ce_out_i[20]_i_1_n_0 ;
  wire \GEN_BKEND_CE_REGISTERS[21].ce_out_i[21]_i_1_n_0 ;
  wire \GEN_BKEND_CE_REGISTERS[22].ce_out_i[22]_i_1_n_0 ;
  wire \GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ;
  wire \GEN_BKEND_CE_REGISTERS[8].ce_out_i[8]_i_1_n_0 ;
  wire \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ;
  wire [0:0]\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_1 ;
  wire [6:0]\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 ;
  wire \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] ;
  wire \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ;
  wire \IP2Bus_Data[20]_i_2_n_0 ;
  wire \IP2Bus_Data[20]_i_3_n_0 ;
  wire \IP2Bus_Data[20]_i_4_n_0 ;
  wire \IP2Bus_Data[21]_i_2_n_0 ;
  wire \IP2Bus_Data[22]_i_2_n_0 ;
  wire \IP2Bus_Data[23]_i_2_n_0 ;
  wire \IP2Bus_Data[23]_i_3_n_0 ;
  wire \IP2Bus_Data[23]_i_4_n_0 ;
  wire \IP2Bus_Data[24]_i_2_n_0 ;
  wire \IP2Bus_Data[25]_i_2_n_0 ;
  wire \IP2Bus_Data[26]_i_2_n_0 ;
  wire \IP2Bus_Data[27]_i_2_n_0 ;
  wire \IP2Bus_Data[27]_i_3_n_0 ;
  wire \IP2Bus_Data[28]_i_2_n_0 ;
  wire \IP2Bus_Data[28]_i_3_n_0 ;
  wire \IP2Bus_Data[29]_i_2_n_0 ;
  wire \IP2Bus_Data[29]_i_3_n_0 ;
  wire \IP2Bus_Data[30]_i_2_n_0 ;
  wire \IP2Bus_Data[30]_i_3_n_0 ;
  wire \IP2Bus_Data[31]_i_2_n_0 ;
  wire \IP2Bus_Data[31]_i_3_n_0 ;
  wire [11:0]\IP2Bus_Data_reg[20] ;
  wire [4:0]\IP2Bus_Data_reg[27] ;
  wire \IP2Bus_Data_reg[29] ;
  wire \IP2Bus_Data_reg[30] ;
  wire IP2Bus_RdAck0;
  wire IP2Bus_RdAck_i_2_n_0;
  wire IP2Bus_WrAck0;
  wire IP2Bus_WrAck_reg;
  wire [4:0]Q;
  wire [0:0]SR;
  wire bus2ip_rnw_i;
  wire [2:0]bus2ip_wrce;
  wire busip_1;
  wire cs_ce_clr;
  wire [31:0]dout;
  wire interrupt_wrce_strb;
  wire intr2bus_rdack0;
  wire intr2bus_wrack;
  wire \ip2bus_data_i[0]_i_3_n_0 ;
  wire [0:0]\ip2bus_data_i_reg[0] ;
  wire ip2bus_rdack_i;
  wire ip2bus_rdack_i_i_3_n_0;
  wire ip2bus_rdack_i_i_4_n_0;
  wire ip2bus_rdack_i_i_5_n_0;
  wire ip2bus_rdack_i_i_6_n_0;
  wire ip2bus_rdack_i_reg;
  wire ip2bus_wrack_i;
  wire ipbus_1_i_2_n_0;
  wire ipbus_ack;
  wire ipbus_ack_fifo;
  wire ipif_glbl_irpt_enable_reg;
  wire irpt_rdack;
  wire irpt_rdack_d1;
  wire irpt_wrack;
  wire irpt_wrack_d1;
  wire irpt_wrack_d1_reg;
  wire p_10_in;
  wire p_10_in_0;
  wire p_10_out;
  wire p_11_in;
  wire p_11_in_1;
  wire p_11_out;
  wire p_12_in;
  wire p_12_out;
  wire p_13_in;
  wire p_13_out;
  wire p_14_out;
  wire p_15_in;
  wire p_15_out;
  wire p_17_in;
  wire p_18_in;
  wire p_19_in;
  wire p_1_out;
  wire p_20_in;
  wire p_21_in;
  wire p_22_in;
  wire p_23_in;
  wire p_24_in;
  wire p_2_in;
  wire p_2_out;
  wire p_3_in;
  wire p_3_out;
  wire p_4_in;
  wire p_4_out;
  wire p_5_in;
  wire p_5_out;
  wire p_6_in;
  wire p_6_out;
  wire p_7_out;
  wire p_7_out_2;
  wire p_8_in;
  wire p_8_out;
  wire p_9_in;
  wire p_9_out;
  wire pselect_hit_i_0;
  wire pselect_hit_i_1;
  wire [8:0]rd_data_count;
  wire s_axi_aclk;
  wire s_axi_aresetn;
  wire [0:0]s_axi_wdata;
  wire s_axi_wready_INST_0_i_1_n_0;
  wire scndry_out;
  wire [31:0]scndry_vect_out;
  wire start2;
  wire [10:0]wr_data_count;
  wire wr_en;

  LUT3 #(
    .INIT(8'hB8)) 
    Bus_RNW_reg_i_1
       (.I0(bus2ip_rnw_i),
        .I1(start2),
        .I2(Bus_RNW_reg_reg_0),
        .O(Bus_RNW_reg_i_1_n_0));
  FDRE Bus_RNW_reg_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Bus_RNW_reg_i_1_n_0),
        .Q(Bus_RNW_reg_reg_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    \GEN_BKEND_CE_REGISTERS[0].ce_out_i[0]_i_1 
       (.I0(pselect_hit_i_1),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .O(p_15_out));
  FDRE \GEN_BKEND_CE_REGISTERS[0].ce_out_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_15_out),
        .Q(p_24_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'h00400000)) 
    \GEN_BKEND_CE_REGISTERS[10].ce_out_i[10]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I2(pselect_hit_i_1),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .O(p_5_out));
  FDRE \GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_5_out),
        .Q(\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'h40000000)) 
    \GEN_BKEND_CE_REGISTERS[11].ce_out_i[11]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I4(pselect_hit_i_1),
        .O(p_4_out));
  FDRE \GEN_BKEND_CE_REGISTERS[11].ce_out_i_reg[11] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_4_out),
        .Q(p_13_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'h00400000)) 
    \GEN_BKEND_CE_REGISTERS[12].ce_out_i[12]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(pselect_hit_i_1),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .O(p_3_out));
  FDRE \GEN_BKEND_CE_REGISTERS[12].ce_out_i_reg[12] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_3_out),
        .Q(p_12_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'h40000000)) 
    \GEN_BKEND_CE_REGISTERS[13].ce_out_i[13]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I1(pselect_hit_i_1),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .O(p_2_out));
  FDRE \GEN_BKEND_CE_REGISTERS[13].ce_out_i_reg[13] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_2_out),
        .Q(p_11_in_1),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'h40000000)) 
    \GEN_BKEND_CE_REGISTERS[14].ce_out_i[14]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I2(pselect_hit_i_1),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .O(p_1_out));
  FDRE \GEN_BKEND_CE_REGISTERS[14].ce_out_i_reg[14] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_1_out),
        .Q(p_10_in_0),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \GEN_BKEND_CE_REGISTERS[15].ce_out_i[15]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(pselect_hit_i_1),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .O(\GEN_BKEND_CE_REGISTERS[15].ce_out_i[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \GEN_BKEND_CE_REGISTERS[15].ce_out_i[15]_i_2 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [4]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [6]),
        .I2(start2),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [5]),
        .O(pselect_hit_i_1));
  FDRE \GEN_BKEND_CE_REGISTERS[15].ce_out_i_reg[15] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(\GEN_BKEND_CE_REGISTERS[15].ce_out_i[15]_i_1_n_0 ),
        .Q(p_9_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \GEN_BKEND_CE_REGISTERS[16].ce_out_i[16]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(pselect_hit_i_0),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .O(\GEN_BKEND_CE_REGISTERS[16].ce_out_i[16]_i_1_n_0 ));
  FDRE \GEN_BKEND_CE_REGISTERS[16].ce_out_i_reg[16] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(\GEN_BKEND_CE_REGISTERS[16].ce_out_i[16]_i_1_n_0 ),
        .Q(p_8_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \GEN_BKEND_CE_REGISTERS[17].ce_out_i[17]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(pselect_hit_i_0),
        .O(\GEN_BKEND_CE_REGISTERS[17].ce_out_i[17]_i_1_n_0 ));
  FDRE \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(\GEN_BKEND_CE_REGISTERS[17].ce_out_i[17]_i_1_n_0 ),
        .Q(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \GEN_BKEND_CE_REGISTERS[18].ce_out_i[18]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I3(pselect_hit_i_0),
        .O(\GEN_BKEND_CE_REGISTERS[18].ce_out_i[18]_i_1_n_0 ));
  FDRE \GEN_BKEND_CE_REGISTERS[18].ce_out_i_reg[18] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(\GEN_BKEND_CE_REGISTERS[18].ce_out_i[18]_i_1_n_0 ),
        .Q(p_6_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \GEN_BKEND_CE_REGISTERS[19].ce_out_i[19]_i_1 
       (.I0(pselect_hit_i_0),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .O(\GEN_BKEND_CE_REGISTERS[19].ce_out_i[19]_i_1_n_0 ));
  FDRE \GEN_BKEND_CE_REGISTERS[19].ce_out_i_reg[19] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(\GEN_BKEND_CE_REGISTERS[19].ce_out_i[19]_i_1_n_0 ),
        .Q(p_5_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \GEN_BKEND_CE_REGISTERS[1].ce_out_i[1]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(pselect_hit_i_1),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .O(p_14_out));
  FDRE \GEN_BKEND_CE_REGISTERS[1].ce_out_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_14_out),
        .Q(p_23_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \GEN_BKEND_CE_REGISTERS[20].ce_out_i[20]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I2(pselect_hit_i_0),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .O(\GEN_BKEND_CE_REGISTERS[20].ce_out_i[20]_i_1_n_0 ));
  FDRE \GEN_BKEND_CE_REGISTERS[20].ce_out_i_reg[20] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(\GEN_BKEND_CE_REGISTERS[20].ce_out_i[20]_i_1_n_0 ),
        .Q(p_4_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \GEN_BKEND_CE_REGISTERS[21].ce_out_i[21]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(pselect_hit_i_0),
        .O(\GEN_BKEND_CE_REGISTERS[21].ce_out_i[21]_i_1_n_0 ));
  FDRE \GEN_BKEND_CE_REGISTERS[21].ce_out_i_reg[21] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(\GEN_BKEND_CE_REGISTERS[21].ce_out_i[21]_i_1_n_0 ),
        .Q(p_3_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \GEN_BKEND_CE_REGISTERS[22].ce_out_i[22]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I2(pselect_hit_i_0),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .O(\GEN_BKEND_CE_REGISTERS[22].ce_out_i[22]_i_1_n_0 ));
  FDRE \GEN_BKEND_CE_REGISTERS[22].ce_out_i_reg[22] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(\GEN_BKEND_CE_REGISTERS[22].ce_out_i[22]_i_1_n_0 ),
        .Q(p_2_in),
        .R(cs_ce_clr));
  LUT3 #(
    .INIT(8'hFD)) 
    \GEN_BKEND_CE_REGISTERS[23].ce_out_i[23]_i_1 
       (.I0(s_axi_aresetn),
        .I1(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] ),
        .I2(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ),
        .O(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \GEN_BKEND_CE_REGISTERS[23].ce_out_i[23]_i_2 
       (.I0(pselect_hit_i_0),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .O(p_7_out_2));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \GEN_BKEND_CE_REGISTERS[23].ce_out_i[23]_i_3 
       (.I0(start2),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [5]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [6]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [4]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .O(pselect_hit_i_0));
  FDRE \GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg[23] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_7_out_2),
        .Q(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \GEN_BKEND_CE_REGISTERS[2].ce_out_i[2]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(pselect_hit_i_1),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .O(p_13_out));
  FDRE \GEN_BKEND_CE_REGISTERS[2].ce_out_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_13_out),
        .Q(p_22_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'h00400000)) 
    \GEN_BKEND_CE_REGISTERS[3].ce_out_i[3]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I4(pselect_hit_i_1),
        .O(p_12_out));
  FDRE \GEN_BKEND_CE_REGISTERS[3].ce_out_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_12_out),
        .Q(p_21_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \GEN_BKEND_CE_REGISTERS[4].ce_out_i[4]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I2(pselect_hit_i_1),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .O(p_11_out));
  FDRE \GEN_BKEND_CE_REGISTERS[4].ce_out_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_11_out),
        .Q(p_20_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'h00400000)) 
    \GEN_BKEND_CE_REGISTERS[5].ce_out_i[5]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I4(pselect_hit_i_1),
        .O(p_10_out));
  FDRE \GEN_BKEND_CE_REGISTERS[5].ce_out_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_10_out),
        .Q(p_19_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'h00400000)) 
    \GEN_BKEND_CE_REGISTERS[6].ce_out_i[6]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I4(pselect_hit_i_1),
        .O(p_9_out));
  FDRE \GEN_BKEND_CE_REGISTERS[6].ce_out_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_9_out),
        .Q(p_18_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'h40000000)) 
    \GEN_BKEND_CE_REGISTERS[7].ce_out_i[7]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(pselect_hit_i_1),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .O(p_8_out));
  FDRE \GEN_BKEND_CE_REGISTERS[7].ce_out_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_8_out),
        .Q(p_17_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \GEN_BKEND_CE_REGISTERS[8].ce_out_i[8]_i_1 
       (.I0(pselect_hit_i_1),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .O(\GEN_BKEND_CE_REGISTERS[8].ce_out_i[8]_i_1_n_0 ));
  FDRE \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(\GEN_BKEND_CE_REGISTERS[8].ce_out_i[8]_i_1_n_0 ),
        .Q(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'h00400000)) 
    \GEN_BKEND_CE_REGISTERS[9].ce_out_i[9]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [2]),
        .I1(pselect_hit_i_1),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [0]),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [1]),
        .I4(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 [3]),
        .O(p_6_out));
  FDRE \GEN_BKEND_CE_REGISTERS[9].ce_out_i_reg[9] 
       (.C(s_axi_aclk),
        .CE(start2),
        .D(p_6_out),
        .Q(p_15_in),
        .R(cs_ce_clr));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_3 
       (.I0(irpt_wrack_d1),
        .I1(Bus_RNW_reg_reg_0),
        .I2(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ),
        .O(irpt_wrack_d1_reg));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[0]_i_1 
       (.I0(dout[31]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[31]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[31]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[10]_i_1 
       (.I0(dout[21]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[21]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[21]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[11]_i_1 
       (.I0(dout[20]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[20]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[20]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[12]_i_1 
       (.I0(dout[19]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[19]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[19]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[13]_i_1 
       (.I0(dout[18]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[18]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[18]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[14]_i_1 
       (.I0(dout[17]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[17]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[17]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[15]_i_1 
       (.I0(dout[16]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[16]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[16]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[16]_i_1 
       (.I0(dout[15]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[15]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[15]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[17]_i_1 
       (.I0(dout[14]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[14]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[14]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[18]_i_1 
       (.I0(dout[13]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[13]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[13]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[19]_i_1 
       (.I0(dout[12]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[12]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[12]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[1]_i_1 
       (.I0(dout[30]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[30]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[30]));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \IP2Bus_Data[20]_i_1 
       (.I0(\IP2Bus_Data[20]_i_2_n_0 ),
        .I1(scndry_vect_out[11]),
        .I2(\IP2Bus_Data[20]_i_3_n_0 ),
        .I3(\IP2Bus_Data_reg[20] [11]),
        .I4(dout[11]),
        .I5(\IP2Bus_Data[20]_i_4_n_0 ),
        .O(D[11]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \IP2Bus_Data[20]_i_2 
       (.I0(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I1(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[20]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \IP2Bus_Data[20]_i_3 
       (.I0(p_6_in),
        .I1(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[20]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \IP2Bus_Data[20]_i_4 
       (.I0(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I1(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[20]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF0808080)) 
    \IP2Bus_Data[21]_i_1 
       (.I0(dout[10]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(Bus_RNW_reg_reg_0),
        .I3(p_6_in),
        .I4(\IP2Bus_Data_reg[20] [10]),
        .I5(\IP2Bus_Data[21]_i_2_n_0 ),
        .O(D[10]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[21]_i_2 
       (.I0(scndry_vect_out[10]),
        .I1(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I2(wr_data_count[10]),
        .I3(p_3_in),
        .I4(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF0808080)) 
    \IP2Bus_Data[22]_i_1 
       (.I0(dout[9]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(Bus_RNW_reg_reg_0),
        .I3(p_6_in),
        .I4(\IP2Bus_Data_reg[20] [9]),
        .I5(\IP2Bus_Data[22]_i_2_n_0 ),
        .O(D[9]));
  LUT5 #(
    .INIT(32'h8F880000)) 
    \IP2Bus_Data[22]_i_2 
       (.I0(scndry_vect_out[9]),
        .I1(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I2(wr_data_count[9]),
        .I3(p_3_in),
        .I4(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFEAEAEAAAAAAAAA)) 
    \IP2Bus_Data[23]_i_1 
       (.I0(\IP2Bus_Data[23]_i_2_n_0 ),
        .I1(p_6_in),
        .I2(\IP2Bus_Data_reg[20] [8]),
        .I3(dout[8]),
        .I4(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I5(Bus_RNW_reg_reg_0),
        .O(D[8]));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \IP2Bus_Data[23]_i_2 
       (.I0(\IP2Bus_Data[23]_i_3_n_0 ),
        .I1(wr_data_count[8]),
        .I2(\IP2Bus_Data[20]_i_2_n_0 ),
        .I3(scndry_vect_out[8]),
        .I4(rd_data_count[8]),
        .I5(\IP2Bus_Data[23]_i_4_n_0 ),
        .O(\IP2Bus_Data[23]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \IP2Bus_Data[23]_i_3 
       (.I0(p_3_in),
        .I1(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[23]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \IP2Bus_Data[23]_i_4 
       (.I0(p_2_in),
        .I1(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[23]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFEAEAEAAAAAAAAA)) 
    \IP2Bus_Data[24]_i_1 
       (.I0(\IP2Bus_Data[24]_i_2_n_0 ),
        .I1(p_6_in),
        .I2(\IP2Bus_Data_reg[20] [7]),
        .I3(dout[7]),
        .I4(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I5(Bus_RNW_reg_reg_0),
        .O(D[7]));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \IP2Bus_Data[24]_i_2 
       (.I0(\IP2Bus_Data[23]_i_3_n_0 ),
        .I1(wr_data_count[7]),
        .I2(\IP2Bus_Data[20]_i_2_n_0 ),
        .I3(scndry_vect_out[7]),
        .I4(rd_data_count[7]),
        .I5(\IP2Bus_Data[23]_i_4_n_0 ),
        .O(\IP2Bus_Data[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFEAEAEAAAAAAAAA)) 
    \IP2Bus_Data[25]_i_1 
       (.I0(\IP2Bus_Data[25]_i_2_n_0 ),
        .I1(p_6_in),
        .I2(\IP2Bus_Data_reg[20] [6]),
        .I3(dout[6]),
        .I4(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I5(Bus_RNW_reg_reg_0),
        .O(D[6]));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \IP2Bus_Data[25]_i_2 
       (.I0(\IP2Bus_Data[23]_i_3_n_0 ),
        .I1(wr_data_count[6]),
        .I2(\IP2Bus_Data[20]_i_2_n_0 ),
        .I3(scndry_vect_out[6]),
        .I4(rd_data_count[6]),
        .I5(\IP2Bus_Data[23]_i_4_n_0 ),
        .O(\IP2Bus_Data[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFEAEAEAAAAAAAAA)) 
    \IP2Bus_Data[26]_i_1 
       (.I0(\IP2Bus_Data[26]_i_2_n_0 ),
        .I1(p_6_in),
        .I2(\IP2Bus_Data_reg[20] [5]),
        .I3(dout[5]),
        .I4(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I5(Bus_RNW_reg_reg_0),
        .O(D[5]));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \IP2Bus_Data[26]_i_2 
       (.I0(\IP2Bus_Data[23]_i_3_n_0 ),
        .I1(wr_data_count[5]),
        .I2(\IP2Bus_Data[20]_i_2_n_0 ),
        .I3(scndry_vect_out[5]),
        .I4(rd_data_count[5]),
        .I5(\IP2Bus_Data[23]_i_4_n_0 ),
        .O(\IP2Bus_Data[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF8F8F8)) 
    \IP2Bus_Data[27]_i_1 
       (.I0(\IP2Bus_Data[20]_i_4_n_0 ),
        .I1(dout[4]),
        .I2(\IP2Bus_Data[27]_i_2_n_0 ),
        .I3(\IP2Bus_Data[20]_i_2_n_0 ),
        .I4(scndry_vect_out[4]),
        .I5(\IP2Bus_Data[27]_i_3_n_0 ),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[27]_i_2 
       (.I0(\IP2Bus_Data_reg[20] [4]),
        .I1(p_6_in),
        .I2(rd_data_count[4]),
        .I3(p_2_in),
        .I4(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[27]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'hF4440000)) 
    \IP2Bus_Data[27]_i_3 
       (.I0(wr_data_count[4]),
        .I1(p_3_in),
        .I2(\IP2Bus_Data_reg[27] [4]),
        .I3(p_5_in),
        .I4(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[27]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF8F8F8)) 
    \IP2Bus_Data[28]_i_1 
       (.I0(\IP2Bus_Data[20]_i_4_n_0 ),
        .I1(dout[3]),
        .I2(\IP2Bus_Data[28]_i_2_n_0 ),
        .I3(\IP2Bus_Data[20]_i_2_n_0 ),
        .I4(scndry_vect_out[3]),
        .I5(\IP2Bus_Data[28]_i_3_n_0 ),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[28]_i_2 
       (.I0(\IP2Bus_Data_reg[20] [3]),
        .I1(p_6_in),
        .I2(rd_data_count[3]),
        .I3(p_2_in),
        .I4(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[28]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF4440000)) 
    \IP2Bus_Data[28]_i_3 
       (.I0(wr_data_count[3]),
        .I1(p_3_in),
        .I2(\IP2Bus_Data_reg[27] [3]),
        .I3(p_5_in),
        .I4(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[28]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFEAFFEAFFEA)) 
    \IP2Bus_Data[29]_i_1 
       (.I0(\IP2Bus_Data[29]_i_2_n_0 ),
        .I1(\IP2Bus_Data[20]_i_4_n_0 ),
        .I2(dout[2]),
        .I3(\IP2Bus_Data[29]_i_3_n_0 ),
        .I4(\IP2Bus_Data[20]_i_3_n_0 ),
        .I5(\IP2Bus_Data_reg[20] [2]),
        .O(D[2]));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \IP2Bus_Data[29]_i_2 
       (.I0(\IP2Bus_Data[23]_i_3_n_0 ),
        .I1(wr_data_count[2]),
        .I2(\IP2Bus_Data[20]_i_2_n_0 ),
        .I3(scndry_vect_out[2]),
        .I4(rd_data_count[2]),
        .I5(\IP2Bus_Data[23]_i_4_n_0 ),
        .O(\IP2Bus_Data[29]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[29]_i_3 
       (.I0(\IP2Bus_Data_reg[27] [2]),
        .I1(p_5_in),
        .I2(\IP2Bus_Data_reg[29] ),
        .I3(p_4_in),
        .I4(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[29]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[2]_i_1 
       (.I0(dout[29]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[29]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[29]));
  LUT6 #(
    .INIT(64'hFFFFFFEAFFEAFFEA)) 
    \IP2Bus_Data[30]_i_1 
       (.I0(\IP2Bus_Data[30]_i_2_n_0 ),
        .I1(\IP2Bus_Data[20]_i_4_n_0 ),
        .I2(dout[1]),
        .I3(\IP2Bus_Data[30]_i_3_n_0 ),
        .I4(\IP2Bus_Data[20]_i_3_n_0 ),
        .I5(\IP2Bus_Data_reg[20] [1]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \IP2Bus_Data[30]_i_2 
       (.I0(\IP2Bus_Data[23]_i_3_n_0 ),
        .I1(wr_data_count[1]),
        .I2(\IP2Bus_Data[20]_i_2_n_0 ),
        .I3(scndry_vect_out[1]),
        .I4(rd_data_count[1]),
        .I5(\IP2Bus_Data[23]_i_4_n_0 ),
        .O(\IP2Bus_Data[30]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[30]_i_3 
       (.I0(\IP2Bus_Data_reg[27] [1]),
        .I1(p_5_in),
        .I2(\IP2Bus_Data_reg[30] ),
        .I3(p_4_in),
        .I4(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFEAFFEAFFEA)) 
    \IP2Bus_Data[31]_i_1 
       (.I0(\IP2Bus_Data[31]_i_2_n_0 ),
        .I1(\IP2Bus_Data[20]_i_4_n_0 ),
        .I2(dout[0]),
        .I3(\IP2Bus_Data[31]_i_3_n_0 ),
        .I4(\IP2Bus_Data[20]_i_3_n_0 ),
        .I5(\IP2Bus_Data_reg[20] [0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \IP2Bus_Data[31]_i_2 
       (.I0(\IP2Bus_Data[23]_i_3_n_0 ),
        .I1(wr_data_count[0]),
        .I2(\IP2Bus_Data[20]_i_2_n_0 ),
        .I3(scndry_vect_out[0]),
        .I4(rd_data_count[0]),
        .I5(\IP2Bus_Data[23]_i_4_n_0 ),
        .O(\IP2Bus_Data[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[31]_i_3 
       (.I0(\IP2Bus_Data_reg[27] [0]),
        .I1(p_5_in),
        .I2(scndry_out),
        .I3(p_4_in),
        .I4(Bus_RNW_reg_reg_0),
        .O(\IP2Bus_Data[31]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[3]_i_1 
       (.I0(dout[28]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[28]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[28]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[4]_i_1 
       (.I0(dout[27]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[27]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[27]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[5]_i_1 
       (.I0(dout[26]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[26]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[26]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[6]_i_1 
       (.I0(dout[25]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[25]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[25]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[7]_i_1 
       (.I0(dout[24]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[24]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[24]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[8]_i_1 
       (.I0(dout[23]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[23]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[23]));
  LUT5 #(
    .INIT(32'hF8880000)) 
    \IP2Bus_Data[9]_i_1 
       (.I0(dout[22]),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(scndry_vect_out[22]),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I4(Bus_RNW_reg_reg_0),
        .O(D[22]));
  LUT6 #(
    .INIT(64'hFFEAC0C000000000)) 
    IP2Bus_RdAck_i_1
       (.I0(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(ipbus_ack_fifo),
        .I3(IP2Bus_RdAck_i_2_n_0),
        .I4(ipbus_ack),
        .I5(Bus_RNW_reg_reg_0),
        .O(IP2Bus_RdAck0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    IP2Bus_RdAck_i_2
       (.I0(p_6_in),
        .I1(p_3_in),
        .I2(p_2_in),
        .I3(p_4_in),
        .I4(p_5_in),
        .O(IP2Bus_RdAck_i_2_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAFFFE)) 
    IP2Bus_WrAck_i_1
       (.I0(wr_en),
        .I1(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I2(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I3(IP2Bus_RdAck_i_2_n_0),
        .I4(Bus_RNW_reg_reg_0),
        .I5(busip_1),
        .O(IP2Bus_WrAck0));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT4 #(
    .INIT(16'h00FE)) 
    busip_1_i_1
       (.I0(ipbus_1_i_2_n_0),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I3(Bus_RNW_reg_reg_0),
        .O(p_11_in));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \cr_i[0]_i_2 
       (.I0(p_5_in),
        .I1(Bus_RNW_reg_reg_0),
        .O(bus2ip_wrce[0]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'h44444440)) 
    intr2bus_rdack_i_1
       (.I0(irpt_rdack_d1),
        .I1(Bus_RNW_reg_reg_0),
        .I2(p_17_in),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ),
        .I4(\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ),
        .O(intr2bus_rdack0));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'h000000FE)) 
    intr2bus_wrack_i_1
       (.I0(p_17_in),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ),
        .I3(irpt_wrack_d1),
        .I4(Bus_RNW_reg_reg_0),
        .O(interrupt_wrce_strb));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \ip2bus_data_i[0]_i_1 
       (.I0(s_axi_aresetn),
        .I1(Bus_RNW_reg_reg_0),
        .I2(\ip2bus_data_i[0]_i_3_n_0 ),
        .O(SR));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    \ip2bus_data_i[0]_i_2 
       (.I0(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ),
        .I1(\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ),
        .I2(p_17_in),
        .I3(ipif_glbl_irpt_enable_reg),
        .I4(\ip2bus_data_i_reg[0] ),
        .O(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_1 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \ip2bus_data_i[0]_i_3 
       (.I0(ip2bus_rdack_i_i_3_n_0),
        .I1(ipbus_1_i_2_n_0),
        .I2(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .O(\ip2bus_data_i[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF000000FE000000)) 
    ip2bus_rdack_i_i_1
       (.I0(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I1(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .I2(ipbus_1_i_2_n_0),
        .I3(ip2bus_rdack_i_reg),
        .I4(Bus_RNW_reg_reg_0),
        .I5(ip2bus_rdack_i_i_3_n_0),
        .O(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_1 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    ip2bus_rdack_i_i_3
       (.I0(ip2bus_rdack_i_i_4_n_0),
        .I1(ip2bus_rdack_i_i_5_n_0),
        .I2(p_9_in),
        .I3(p_10_in_0),
        .I4(p_24_in),
        .I5(ip2bus_rdack_i_i_6_n_0),
        .O(ip2bus_rdack_i_i_3_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    ip2bus_rdack_i_i_4
       (.I0(p_20_in),
        .I1(p_21_in),
        .I2(p_18_in),
        .I3(p_19_in),
        .O(ip2bus_rdack_i_i_4_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    ip2bus_rdack_i_i_5
       (.I0(p_22_in),
        .I1(p_23_in),
        .I2(p_17_in),
        .I3(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ),
        .I4(\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ),
        .O(ip2bus_rdack_i_i_5_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    ip2bus_rdack_i_i_6
       (.I0(p_13_in),
        .I1(p_15_in),
        .I2(p_11_in_1),
        .I3(p_12_in),
        .O(ip2bus_rdack_i_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'h0000A800)) 
    ip2bus_wrack_i_i_1
       (.I0(\ip2bus_data_i[0]_i_3_n_0 ),
        .I1(p_7_out),
        .I2(intr2bus_wrack),
        .I3(s_axi_aresetn),
        .I4(Bus_RNW_reg_reg_0),
        .O(IP2Bus_WrAck_reg));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ip_irpt_enable_reg[3]_i_1 
       (.I0(\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ),
        .I1(Bus_RNW_reg_reg_0),
        .O(bus2ip_wrce[2]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT4 #(
    .INIT(16'hF0E0)) 
    ipbus_1_i_1
       (.I0(ipbus_1_i_2_n_0),
        .I1(\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .I2(Bus_RNW_reg_reg_0),
        .I3(\GEN_BKEND_CE_REGISTERS[23].ce_out_i_reg_n_0_[23] ),
        .O(p_10_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    ipbus_1_i_2
       (.I0(p_5_in),
        .I1(p_4_in),
        .I2(p_2_in),
        .I3(p_3_in),
        .I4(p_6_in),
        .I5(p_8_in),
        .O(ipbus_1_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'hFB08)) 
    ipif_glbl_irpt_enable_reg_i_1
       (.I0(s_axi_wdata),
        .I1(p_17_in),
        .I2(Bus_RNW_reg_reg_0),
        .I3(ipif_glbl_irpt_enable_reg),
        .O(\AXI_HW_wdata[31] ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    irpt_rdack_d1_i_1
       (.I0(p_17_in),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .O(irpt_rdack));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT4 #(
    .INIT(16'h00FE)) 
    irpt_wrack_d1_i_1
       (.I0(p_17_in),
        .I1(\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ),
        .I2(\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 ),
        .I3(Bus_RNW_reg_reg_0),
        .O(irpt_wrack));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000020)) 
    s_axi_arready_INST_0
       (.I0(s_axi_wready_INST_0_i_1_n_0),
        .I1(Q[0]),
        .I2(AXI_HW_arready),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(ip2bus_rdack_i),
        .O(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000020)) 
    s_axi_wready_INST_0
       (.I0(s_axi_wready_INST_0_i_1_n_0),
        .I1(Q[0]),
        .I2(AXI_HW_wready),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(ip2bus_wrack_i),
        .O(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    s_axi_wready_INST_0_i_1
       (.I0(Q[4]),
        .I1(Q[3]),
        .O(s_axi_wready_INST_0_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \sz_i[0]_i_2 
       (.I0(p_6_in),
        .I1(Bus_RNW_reg_reg_0),
        .O(bus2ip_wrce[1]));
endmodule

(* ORIG_REF_NAME = "async_fifo_fg" *) 
module semicap_async_fifo_fg
   (wr_data_count,
    D,
    prmry_in,
    rst,
    wr_en,
    \gwdc.wr_data_count_i_reg[10] ,
    \gen_pf_ic_rc.ram_empty_i_reg ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ,
    Send_done_ns8_in,
    s_axi_aclk,
    s_axi_wdata,
    rd_en,
    p_8_in,
    busip_1,
    Bus_RNW_reg,
    fifo_clear_del_reg,
    abort_onreset,
    fifo_rst,
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ,
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ,
    scndry_out,
    \FSM_sequential_icap_nstate_cs[1]_i_5 ,
    cap_rel,
    cap_gnt,
    \FSM_sequential_icap_nstate_cs[1]_i_5_0 ,
    icap_rel_d2,
    icap_req_d11__0);
  output [10:0]wr_data_count;
  output [31:0]D;
  output prmry_in;
  output rst;
  output wr_en;
  output \gwdc.wr_data_count_i_reg[10] ;
  output \gen_pf_ic_rc.ram_empty_i_reg ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ;
  output Send_done_ns8_in;
  input s_axi_aclk;
  input [31:0]s_axi_wdata;
  input rd_en;
  input p_8_in;
  input busip_1;
  input Bus_RNW_reg;
  input fifo_clear_del_reg;
  input abort_onreset;
  input fifo_rst;
  input \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ;
  input \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ;
  input scndry_out;
  input \FSM_sequential_icap_nstate_cs[1]_i_5 ;
  input cap_rel;
  input cap_gnt;
  input \FSM_sequential_icap_nstate_cs[1]_i_5_0 ;
  input icap_rel_d2;
  input icap_req_d11__0;

  wire Bus_RNW_reg;
  wire [31:0]D;
  wire \FSM_sequential_icap_nstate_cs[1]_i_5 ;
  wire \FSM_sequential_icap_nstate_cs[1]_i_5_0 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ;
  wire \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_2_n_0 ;
  wire \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_4_n_0 ;
  wire \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ;
  wire \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ;
  wire Send_done_ns8_in;
  wire abort_onreset;
  wire busip_1;
  wire cap_gnt;
  wire cap_rel;
  wire fifo_clear_del_reg;
  wire fifo_rst;
  wire full;
  wire \gen_pf_ic_rc.ram_empty_i_reg ;
  wire \gwdc.wr_data_count_i_reg[10] ;
  wire icap_rel_d2;
  wire icap_req_d11__0;
  wire \icap_statemachine_I1/icap_req_d1125_out__0 ;
  wire p_8_in;
  wire prmry_in;
  wire rd_en;
  wire rst;
  wire s_axi_aclk;
  wire [31:0]s_axi_wdata;
  wire scndry_out;
  wire [10:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_15 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_16 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_51 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_52 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_53 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_54 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_55 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_56 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_57 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_58 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_59 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_60 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_61 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_64 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_65 ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_dbiterr_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_overflow_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_prog_empty_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_prog_full_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_rd_rst_busy_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_sbiterr_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_underflow_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h0004000000340000)) 
    \FSM_sequential_icap_nstate_cs[1]_i_7 
       (.I0(prmry_in),
        .I1(scndry_out),
        .I2(\FSM_sequential_icap_nstate_cs[1]_i_5 ),
        .I3(cap_rel),
        .I4(cap_gnt),
        .I5(\FSM_sequential_icap_nstate_cs[1]_i_5_0 ),
        .O(\gen_pf_ic_rc.ram_empty_i_reg ));
  LUT5 #(
    .INIT(32'hF22FF2F2)) 
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_1 
       (.I0(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_2_n_0 ),
        .I1(wr_data_count[10]),
        .I2(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ),
        .I3(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ),
        .I4(s_axi_wdata[0]),
        .O(\gwdc.wr_data_count_i_reg[10] ));
  LUT5 #(
    .INIT(32'h0100FFFF)) 
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_2 
       (.I0(wr_data_count[2]),
        .I1(wr_data_count[1]),
        .I2(wr_data_count[0]),
        .I3(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_4_n_0 ),
        .I4(wr_data_count[9]),
        .O(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_4 
       (.I0(wr_data_count[3]),
        .I1(wr_data_count[4]),
        .I2(wr_data_count[5]),
        .I3(wr_data_count[6]),
        .I4(wr_data_count[8]),
        .I5(wr_data_count[7]),
        .O(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hC3C3C3C3C7F7C3C3)) 
    Send_done_cs_i_4
       (.I0(prmry_in),
        .I1(scndry_out),
        .I2(\FSM_sequential_icap_nstate_cs[1]_i_5 ),
        .I3(\FSM_sequential_icap_nstate_cs[1]_i_5_0 ),
        .I4(cap_gnt),
        .I5(cap_rel),
        .O(Send_done_ns8_in));
  LUT6 #(
    .INIT(64'h3838383C0808083C)) 
    cap_req_INST_0_i_2
       (.I0(\icap_statemachine_I1/icap_req_d1125_out__0 ),
        .I1(scndry_out),
        .I2(\FSM_sequential_icap_nstate_cs[1]_i_5 ),
        .I3(cap_rel),
        .I4(icap_rel_d2),
        .I5(icap_req_d11__0),
        .O(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ));
  LUT3 #(
    .INIT(8'h04)) 
    cap_req_INST_0_i_3
       (.I0(cap_rel),
        .I1(cap_gnt),
        .I2(prmry_in),
        .O(\icap_statemachine_I1/icap_req_d1125_out__0 ));
  (* CDC_SYNC_STAGES = "4" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "no_ecc" *) 
  (* EN_ADV_FEATURE_ASYNC = "16'b0001111100011111" *) 
  (* FIFO_MEMORY_TYPE = "block" *) 
  (* FIFO_READ_LATENCY = "1" *) 
  (* FIFO_WRITE_DEPTH = "1024" *) 
  (* FULL_RESET_VALUE = "1" *) 
  (* PROG_EMPTY_THRESH = "10" *) 
  (* PROG_FULL_THRESH = "10" *) 
  (* P_COMMON_CLOCK = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_FIFO_MEMORY_TYPE = "2" *) 
  (* P_READ_MODE = "0" *) 
  (* P_WAKEUP_TIME = "2" *) 
  (* RD_DATA_COUNT_WIDTH = "11" *) 
  (* READ_DATA_WIDTH = "32" *) 
  (* READ_MODE = "std" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "1F1F" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH = "32" *) 
  (* WR_DATA_COUNT_WIDTH = "11" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_fifo_async \xpm_fifo_instance.xpm_fifo_async_inst 
       (.almost_empty(\xpm_fifo_instance.xpm_fifo_async_inst_n_64 ),
        .almost_full(\xpm_fifo_instance.xpm_fifo_async_inst_n_15 ),
        .data_valid(\xpm_fifo_instance.xpm_fifo_async_inst_n_65 ),
        .dbiterr(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_dbiterr_UNCONNECTED ),
        .din(s_axi_wdata),
        .dout(D),
        .empty(prmry_in),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_overflow_UNCONNECTED ),
        .prog_empty(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_prog_empty_UNCONNECTED ),
        .prog_full(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_prog_full_UNCONNECTED ),
        .rd_clk(s_axi_aclk),
        .rd_data_count({\xpm_fifo_instance.xpm_fifo_async_inst_n_51 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_52 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_53 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_54 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_55 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_56 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_57 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_58 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_59 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_60 ,\xpm_fifo_instance.xpm_fifo_async_inst_n_61 }),
        .rd_en(rd_en),
        .rd_rst_busy(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_rd_rst_busy_UNCONNECTED ),
        .rst(rst),
        .sbiterr(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_sbiterr_UNCONNECTED ),
        .sleep(1'b0),
        .underflow(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_underflow_UNCONNECTED ),
        .wr_ack(\xpm_fifo_instance.xpm_fifo_async_inst_n_16 ),
        .wr_clk(s_axi_aclk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
  LUT3 #(
    .INIT(8'hFE)) 
    \xpm_fifo_instance.xpm_fifo_async_inst_i_1 
       (.I0(fifo_clear_del_reg),
        .I1(abort_onreset),
        .I2(fifo_rst),
        .O(rst));
  LUT5 #(
    .INIT(32'h00000002)) 
    \xpm_fifo_instance.xpm_fifo_async_inst_i_2 
       (.I0(p_8_in),
        .I1(full),
        .I2(wr_rst_busy),
        .I3(busip_1),
        .I4(Bus_RNW_reg),
        .O(wr_en));
endmodule

(* ORIG_REF_NAME = "async_fifo_fg" *) 
module semicap_async_fifo_fg__parameterized0
   (dout,
    rd_data_count,
    \AXI_HW_wdata[1] ,
    \gwdc.wr_data_count_i_reg[8] ,
    prmry_in,
    rst,
    s_axi_aclk,
    Q,
    ipbus_1,
    ipbus_2,
    Bus_RNW_reg,
    p_7_in,
    s_axi_wdata,
    \GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1] ,
    p_1_in5_in,
    gate_signal_p_reg,
    rdfifo_wren);
  output [31:0]dout;
  output [8:0]rd_data_count;
  output \AXI_HW_wdata[1] ;
  output \gwdc.wr_data_count_i_reg[8] ;
  output prmry_in;
  input rst;
  input s_axi_aclk;
  input [31:0]Q;
  input ipbus_1;
  input ipbus_2;
  input Bus_RNW_reg;
  input p_7_in;
  input [0:0]s_axi_wdata;
  input \GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1] ;
  input p_1_in5_in;
  input gate_signal_p_reg;
  input rdfifo_wren;

  wire \AXI_HW_wdata[1] ;
  wire Bus_RNW_reg;
  wire \GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1] ;
  wire [31:0]Q;
  wire [31:0]dout;
  wire dt_fifo_rd_i;
  wire full;
  wire gate_signal_p_i_2_n_0;
  wire gate_signal_p_i_3_n_0;
  wire gate_signal_p_reg;
  wire \gwdc.wr_data_count_i_reg[8] ;
  wire ipbus_1;
  wire ipbus_2;
  wire p_1_in5_in;
  wire p_7_in;
  wire prmry_in;
  wire [8:0]rd_data_count;
  wire rdfifo_wren;
  wire rdfifo_wren_q;
  wire readfifo_empty;
  wire rst;
  wire s_axi_aclk;
  wire [0:0]s_axi_wdata;
  wire [0:8]wr_count;
  wire wr_rst_busy;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_13 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_14 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_60 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_n_61 ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_dbiterr_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_overflow_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_prog_empty_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_prog_full_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_rd_rst_busy_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_sbiterr_UNCONNECTED ;
  wire \NLW_xpm_fifo_instance.xpm_fifo_async_inst_underflow_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_i_1__0 
       (.I0(full),
        .I1(wr_rst_busy),
        .O(prmry_in));
  LUT5 #(
    .INIT(32'hFFFFFFD2)) 
    \GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg[1]_i_1 
       (.I0(s_axi_wdata),
        .I1(\GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1] ),
        .I2(p_1_in5_in),
        .I3(rd_data_count[8]),
        .I4(rd_data_count[7]),
        .O(\AXI_HW_wdata[1] ));
  LUT6 #(
    .INIT(64'hFFEFEEEEEEEEEEEE)) 
    gate_signal_p_i_1
       (.I0(gate_signal_p_i_2_n_0),
        .I1(wr_count[0]),
        .I2(gate_signal_p_i_3_n_0),
        .I3(wr_count[2]),
        .I4(wr_count[1]),
        .I5(gate_signal_p_reg),
        .O(\gwdc.wr_data_count_i_reg[8] ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    gate_signal_p_i_2
       (.I0(wr_count[2]),
        .I1(wr_count[4]),
        .I2(wr_count[6]),
        .I3(wr_count[5]),
        .I4(wr_count[3]),
        .I5(wr_count[1]),
        .O(gate_signal_p_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    gate_signal_p_i_3
       (.I0(wr_count[4]),
        .I1(wr_count[6]),
        .I2(wr_count[8]),
        .I3(wr_count[7]),
        .I4(wr_count[5]),
        .I5(wr_count[3]),
        .O(gate_signal_p_i_3_n_0));
  (* CDC_SYNC_STAGES = "4" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "no_ecc" *) 
  (* EN_ADV_FEATURE_ASYNC = "16'b0001111100011111" *) 
  (* FIFO_MEMORY_TYPE = "block" *) 
  (* FIFO_READ_LATENCY = "1" *) 
  (* FIFO_WRITE_DEPTH = "256" *) 
  (* FULL_RESET_VALUE = "1" *) 
  (* PROG_EMPTY_THRESH = "10" *) 
  (* PROG_FULL_THRESH = "10" *) 
  (* P_COMMON_CLOCK = "0" *) 
  (* P_ECC_MODE = "0" *) 
  (* P_FIFO_MEMORY_TYPE = "2" *) 
  (* P_READ_MODE = "0" *) 
  (* P_WAKEUP_TIME = "2" *) 
  (* RD_DATA_COUNT_WIDTH = "9" *) 
  (* READ_DATA_WIDTH = "32" *) 
  (* READ_MODE = "std" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "1F1F" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH = "32" *) 
  (* WR_DATA_COUNT_WIDTH = "9" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_fifo_async__parameterized1 \xpm_fifo_instance.xpm_fifo_async_inst 
       (.almost_empty(\xpm_fifo_instance.xpm_fifo_async_inst_n_60 ),
        .almost_full(\xpm_fifo_instance.xpm_fifo_async_inst_n_13 ),
        .data_valid(\xpm_fifo_instance.xpm_fifo_async_inst_n_61 ),
        .dbiterr(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_dbiterr_UNCONNECTED ),
        .din({Q[24],Q[25],Q[26],Q[27],Q[28],Q[29],Q[30],Q[31],Q[16],Q[17],Q[18],Q[19],Q[20],Q[21],Q[22],Q[23],Q[8],Q[9],Q[10],Q[11],Q[12],Q[13],Q[14],Q[15],Q[0],Q[1],Q[2],Q[3],Q[4],Q[5],Q[6],Q[7]}),
        .dout(dout),
        .empty(readfifo_empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_overflow_UNCONNECTED ),
        .prog_empty(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_prog_empty_UNCONNECTED ),
        .prog_full(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_prog_full_UNCONNECTED ),
        .rd_clk(s_axi_aclk),
        .rd_data_count(rd_data_count),
        .rd_en(dt_fifo_rd_i),
        .rd_rst_busy(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_rd_rst_busy_UNCONNECTED ),
        .rst(rst),
        .sbiterr(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_sbiterr_UNCONNECTED ),
        .sleep(1'b0),
        .underflow(\NLW_xpm_fifo_instance.xpm_fifo_async_inst_underflow_UNCONNECTED ),
        .wr_ack(\xpm_fifo_instance.xpm_fifo_async_inst_n_14 ),
        .wr_clk(s_axi_aclk),
        .wr_data_count({wr_count[0],wr_count[1],wr_count[2],wr_count[3],wr_count[4],wr_count[5],wr_count[6],wr_count[7],wr_count[8]}),
        .wr_en(rdfifo_wren_q),
        .wr_rst_busy(wr_rst_busy));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \xpm_fifo_instance.xpm_fifo_async_inst_i_2__0 
       (.I0(rdfifo_wren),
        .I1(wr_rst_busy),
        .I2(full),
        .O(rdfifo_wren_q));
  LUT5 #(
    .INIT(32'h04000000)) 
    \xpm_fifo_instance.xpm_fifo_async_inst_i_3 
       (.I0(readfifo_empty),
        .I1(ipbus_1),
        .I2(ipbus_2),
        .I3(Bus_RNW_reg),
        .I4(p_7_in),
        .O(dt_fifo_rd_i));
endmodule

(* C_BRAM_SRL_FIFO_TYPE = "1" *) (* C_DEVICE_ID = "69353619" *) (* C_ENABLE_ASYNC = "0" *) 
(* C_FAMILY = "kintexu" *) (* C_ICAP_EXTERNAL = "1" *) (* C_ICAP_WIDTH_S = "X32" *) 
(* C_INCLUDE_STARTUP = "0" *) (* C_MODE = "0" *) (* C_NOREAD = "0" *) 
(* C_OPERATION = "1" *) (* C_READ_FIFO_DEPTH = "256" *) (* C_SHARED_STARTUP = "0" *) 
(* C_SIMULATION = "2" *) (* C_S_AXI_ADDR_WIDTH = "9" *) (* C_S_AXI_DATA_WIDTH = "32" *) 
(* C_WRITE_FIFO_DEPTH = "1024" *) (* ORIG_REF_NAME = "axi_hwicap" *) (* downgradeipidentifiedwarnings = "yes" *) 
module semicap_axi_hwicap
   (icap_clk,
    eos_in,
    s_axi_aclk,
    s_axi_aresetn,
    s_axi_awaddr,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_araddr,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rvalid,
    s_axi_rready,
    ip2intc_irpt,
    cfgclk,
    cfgmclk,
    preq,
    clk,
    gsr,
    gts,
    keyclearb,
    pack,
    usrcclko,
    usrcclkts,
    usrdoneo,
    usrdonets,
    icap_i,
    icap_o,
    icap_csib,
    icap_rdwrb,
    cap_req,
    cap_gnt,
    cap_rel,
    icap_avail);
  input icap_clk;
  input eos_in;
  input s_axi_aclk;
  input s_axi_aresetn;
  input [8:0]s_axi_awaddr;
  input s_axi_awvalid;
  output s_axi_awready;
  input [31:0]s_axi_wdata;
  input [3:0]s_axi_wstrb;
  input s_axi_wvalid;
  output s_axi_wready;
  output [1:0]s_axi_bresp;
  output s_axi_bvalid;
  input s_axi_bready;
  input [8:0]s_axi_araddr;
  input s_axi_arvalid;
  output s_axi_arready;
  output [31:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rvalid;
  input s_axi_rready;
  output ip2intc_irpt;
  output cfgclk;
  output cfgmclk;
  output preq;
  input clk;
  input gsr;
  input gts;
  input keyclearb;
  input pack;
  input usrcclko;
  input usrcclkts;
  input usrdoneo;
  input usrdonets;
  (* keep = "true" *) input [31:0]icap_i;
  output [31:0]icap_o;
  output icap_csib;
  output icap_rdwrb;
  output cap_req;
  input cap_gnt;
  input cap_rel;
  input icap_avail;

  wire \<const0> ;
  wire \ICAP_SHARED.HWICAP_CTRL_I_n_100 ;
  wire \ICAP_SHARED.HWICAP_CTRL_I_n_101 ;
  wire \ICAP_SHARED.HWICAP_CTRL_I_n_102 ;
  wire \ICAP_SHARED.HWICAP_CTRL_I_n_103 ;
  wire \ICAP_SHARED.HWICAP_CTRL_I_n_90 ;
  wire \ICAP_SHARED.HWICAP_CTRL_I_n_91 ;
  wire \ICAP_SHARED.HWICAP_CTRL_I_n_92 ;
  wire \ICAP_SHARED.HWICAP_CTRL_I_n_93 ;
  wire \ICAP_SHARED.HWICAP_CTRL_I_n_99 ;
  wire INTERRUPT_CONTROL_I_n_1;
  wire INTERRUPT_CONTROL_I_n_10;
  wire INTERRUPT_CONTROL_I_n_11;
  wire INTERRUPT_CONTROL_I_n_12;
  wire INTERRUPT_CONTROL_I_n_13;
  wire \IPIC_IF_I/IP2Bus_RdAck0 ;
  wire \IPIC_IF_I/IP2Bus_WrAck0 ;
  wire [0:11]\IPIC_IF_I/Size_counter_i3 ;
  wire \IPIC_IF_I/busip_1 ;
  wire \IPIC_IF_I/dt_fifo_wr_i ;
  wire \IPIC_IF_I/eos_status_i2 ;
  wire \IPIC_IF_I/hang_status_i2 ;
  wire \IPIC_IF_I/ipbus_ack ;
  wire \IPIC_IF_I/ipbus_ack_fifo ;
  wire \IPIC_IF_I/p_0_in9_in ;
  wire \IPIC_IF_I/p_10_in ;
  wire \IPIC_IF_I/p_11_in ;
  wire [31:0]\IPIC_IF_I/p_5_out ;
  wire [0:8]\IPIC_IF_I/rd_occy_i ;
  wire \IPIC_IF_I/send_done_icap2bus ;
  wire [0:31]\IPIC_IF_I/sr_icap2bus_3 ;
  wire [0:10]\IPIC_IF_I/wroccy ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/Bus_RNW_reg ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/p_14_in ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/p_16_in ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/p_7_in ;
  wire \I_SLAVE_ATTACHMENT/I_DECODER/p_8_in ;
  wire XI4_LITE_I_n_10;
  wire XI4_LITE_I_n_11;
  wire XI4_LITE_I_n_16;
  wire XI4_LITE_I_n_21;
  wire XI4_LITE_I_n_22;
  wire XI4_LITE_I_n_23;
  wire XI4_LITE_I_n_24;
  wire XI4_LITE_I_n_25;
  wire XI4_LITE_I_n_26;
  wire XI4_LITE_I_n_27;
  wire XI4_LITE_I_n_28;
  wire XI4_LITE_I_n_29;
  wire XI4_LITE_I_n_30;
  wire XI4_LITE_I_n_31;
  wire XI4_LITE_I_n_32;
  wire XI4_LITE_I_n_33;
  wire XI4_LITE_I_n_34;
  wire XI4_LITE_I_n_35;
  wire XI4_LITE_I_n_36;
  wire XI4_LITE_I_n_37;
  wire XI4_LITE_I_n_38;
  wire XI4_LITE_I_n_39;
  wire XI4_LITE_I_n_40;
  wire XI4_LITE_I_n_41;
  wire XI4_LITE_I_n_42;
  wire XI4_LITE_I_n_43;
  wire XI4_LITE_I_n_44;
  wire XI4_LITE_I_n_45;
  wire XI4_LITE_I_n_46;
  wire XI4_LITE_I_n_47;
  wire XI4_LITE_I_n_48;
  wire XI4_LITE_I_n_49;
  wire XI4_LITE_I_n_50;
  wire XI4_LITE_I_n_51;
  wire XI4_LITE_I_n_52;
  wire XI4_LITE_I_n_56;
  wire XI4_LITE_I_n_57;
  wire XI4_LITE_I_n_9;
  wire bus2ip_reset;
  wire [13:4]bus2ip_wrce;
  wire cap_gnt;
  wire cap_rel;
  wire cap_req;
  wire icap_avail;
  wire icap_csib;
  wire [31:0]icap_i;
  wire [31:0]icap_o;
  wire icap_rdwrb;
  wire interrupt_wrce_strb;
  wire intr2bus_rdack;
  wire intr2bus_rdack0;
  wire intr2bus_wrack;
  wire intr_rst;
  wire [0:31]ip2bus_data_i;
  wire ip2bus_rdack_i;
  wire ip2bus_wrack_i;
  wire ip2intc_irpt;
  wire ipif_glbl_irpt_enable_reg;
  wire irpt_rdack;
  wire irpt_rdack_d1;
  wire irpt_wrack;
  wire irpt_wrack_d1;
  wire [0:31]p_10_out;
  wire p_1_in;
  wire p_1_in2_in;
  wire p_1_in5_in;
  wire p_7_out;
  wire s_axi_aclk;
  wire [8:0]s_axi_araddr;
  wire s_axi_aresetn;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire [8:0]s_axi_awaddr;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_bvalid;
  wire [31:0]s_axi_rdata;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wready;
  wire s_axi_wvalid;

  assign cfgclk = \<const0> ;
  assign cfgmclk = \<const0> ;
  assign preq = \<const0> ;
  assign s_axi_awready = s_axi_wready;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  semicap_hwicap_shared \ICAP_SHARED.HWICAP_CTRL_I 
       (.\AXI_HW_wdata[1] (\ICAP_SHARED.HWICAP_CTRL_I_n_101 ),
        .Bus_RNW_reg(\I_SLAVE_ATTACHMENT/I_DECODER/Bus_RNW_reg ),
        .D({XI4_LITE_I_n_21,XI4_LITE_I_n_22,XI4_LITE_I_n_23,XI4_LITE_I_n_24,XI4_LITE_I_n_25,XI4_LITE_I_n_26,XI4_LITE_I_n_27,XI4_LITE_I_n_28,XI4_LITE_I_n_29,XI4_LITE_I_n_30,XI4_LITE_I_n_31,XI4_LITE_I_n_32,XI4_LITE_I_n_33,XI4_LITE_I_n_34,XI4_LITE_I_n_35,XI4_LITE_I_n_36,XI4_LITE_I_n_37,XI4_LITE_I_n_38,XI4_LITE_I_n_39,XI4_LITE_I_n_40,XI4_LITE_I_n_41,XI4_LITE_I_n_42,XI4_LITE_I_n_43,XI4_LITE_I_n_44,XI4_LITE_I_n_45,XI4_LITE_I_n_46,XI4_LITE_I_n_47,XI4_LITE_I_n_48,XI4_LITE_I_n_49,XI4_LITE_I_n_50,XI4_LITE_I_n_51,XI4_LITE_I_n_52}),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 (\ICAP_SHARED.HWICAP_CTRL_I_n_102 ),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 (\IPIC_IF_I/hang_status_i2 ),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 (\IPIC_IF_I/eos_status_i2 ),
        .\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] (INTERRUPT_CONTROL_I_n_1),
        .\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] (XI4_LITE_I_n_16),
        .\IP2Bus_Data_reg[0] ({p_10_out[0],p_10_out[1],p_10_out[2],p_10_out[3],p_10_out[4],p_10_out[5],p_10_out[6],p_10_out[7],p_10_out[8],p_10_out[9],p_10_out[10],p_10_out[11],p_10_out[12],p_10_out[13],p_10_out[14],p_10_out[15],p_10_out[16],p_10_out[17],p_10_out[18],p_10_out[19],p_10_out[20],p_10_out[21],p_10_out[22],p_10_out[23],p_10_out[24],p_10_out[25],p_10_out[26],p_10_out[27],p_10_out[28],p_10_out[29],p_10_out[30],p_10_out[31]}),
        .IP2Bus_RdAck0(\IPIC_IF_I/IP2Bus_RdAck0 ),
        .IP2Bus_RdAck_reg(\ICAP_SHARED.HWICAP_CTRL_I_n_99 ),
        .IP2Bus_WrAck0(\IPIC_IF_I/IP2Bus_WrAck0 ),
        .Q({\IPIC_IF_I/p_0_in9_in ,\ICAP_SHARED.HWICAP_CTRL_I_n_90 ,\ICAP_SHARED.HWICAP_CTRL_I_n_91 ,\ICAP_SHARED.HWICAP_CTRL_I_n_92 ,\ICAP_SHARED.HWICAP_CTRL_I_n_93 }),
        .\RD_FIFO.fifo_full_mask_reg (\ICAP_SHARED.HWICAP_CTRL_I_n_103 ),
        .\Size_counter_i3_reg[0] ({\IPIC_IF_I/Size_counter_i3 [0],\IPIC_IF_I/Size_counter_i3 [1],\IPIC_IF_I/Size_counter_i3 [2],\IPIC_IF_I/Size_counter_i3 [3],\IPIC_IF_I/Size_counter_i3 [4],\IPIC_IF_I/Size_counter_i3 [5],\IPIC_IF_I/Size_counter_i3 [6],\IPIC_IF_I/Size_counter_i3 [7],\IPIC_IF_I/Size_counter_i3 [8],\IPIC_IF_I/Size_counter_i3 [9],\IPIC_IF_I/Size_counter_i3 [10],\IPIC_IF_I/Size_counter_i3 [11]}),
        .bus2ip_reset(bus2ip_reset),
        .bus2ip_wrce(bus2ip_wrce[5:4]),
        .busip_1(\IPIC_IF_I/busip_1 ),
        .cap_gnt(cap_gnt),
        .cap_rel(cap_rel),
        .cap_req(cap_req),
        .dout(\IPIC_IF_I/p_5_out ),
        .\gwdc.wr_data_count_i_reg[10] (\ICAP_SHARED.HWICAP_CTRL_I_n_100 ),
        .icap_avail(icap_avail),
        .icap_i(icap_i),
        .icap_o(icap_o),
        .icap_we_cs_reg(icap_rdwrb),
        .intr2bus_rdack(intr2bus_rdack),
        .intr_rst(intr_rst),
        .ipbus_ack(\IPIC_IF_I/ipbus_ack ),
        .ipbus_ack_fifo(\IPIC_IF_I/ipbus_ack_fifo ),
        .out(icap_csib),
        .p_10_in(\IPIC_IF_I/p_10_in ),
        .p_11_in(\IPIC_IF_I/p_11_in ),
        .p_1_in(p_1_in),
        .p_1_in2_in(p_1_in2_in),
        .p_1_in5_in(p_1_in5_in),
        .p_7_in(\I_SLAVE_ATTACHMENT/I_DECODER/p_7_in ),
        .p_7_out(p_7_out),
        .p_8_in(\I_SLAVE_ATTACHMENT/I_DECODER/p_8_in ),
        .rd_data_count({\IPIC_IF_I/rd_occy_i [0],\IPIC_IF_I/rd_occy_i [1],\IPIC_IF_I/rd_occy_i [2],\IPIC_IF_I/rd_occy_i [3],\IPIC_IF_I/rd_occy_i [4],\IPIC_IF_I/rd_occy_i [5],\IPIC_IF_I/rd_occy_i [6],\IPIC_IF_I/rd_occy_i [7],\IPIC_IF_I/rd_occy_i [8]}),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_wdata(s_axi_wdata),
        .scndry_out(\IPIC_IF_I/send_done_icap2bus ),
        .scndry_vect_out({\IPIC_IF_I/sr_icap2bus_3 [0],\IPIC_IF_I/sr_icap2bus_3 [1],\IPIC_IF_I/sr_icap2bus_3 [2],\IPIC_IF_I/sr_icap2bus_3 [3],\IPIC_IF_I/sr_icap2bus_3 [4],\IPIC_IF_I/sr_icap2bus_3 [5],\IPIC_IF_I/sr_icap2bus_3 [6],\IPIC_IF_I/sr_icap2bus_3 [7],\IPIC_IF_I/sr_icap2bus_3 [8],\IPIC_IF_I/sr_icap2bus_3 [9],\IPIC_IF_I/sr_icap2bus_3 [10],\IPIC_IF_I/sr_icap2bus_3 [11],\IPIC_IF_I/sr_icap2bus_3 [12],\IPIC_IF_I/sr_icap2bus_3 [13],\IPIC_IF_I/sr_icap2bus_3 [14],\IPIC_IF_I/sr_icap2bus_3 [15],\IPIC_IF_I/sr_icap2bus_3 [16],\IPIC_IF_I/sr_icap2bus_3 [17],\IPIC_IF_I/sr_icap2bus_3 [18],\IPIC_IF_I/sr_icap2bus_3 [19],\IPIC_IF_I/sr_icap2bus_3 [20],\IPIC_IF_I/sr_icap2bus_3 [21],\IPIC_IF_I/sr_icap2bus_3 [22],\IPIC_IF_I/sr_icap2bus_3 [23],\IPIC_IF_I/sr_icap2bus_3 [24],\IPIC_IF_I/sr_icap2bus_3 [25],\IPIC_IF_I/sr_icap2bus_3 [26],\IPIC_IF_I/sr_icap2bus_3 [27],\IPIC_IF_I/sr_icap2bus_3 [28],\IPIC_IF_I/sr_icap2bus_3 [29],\IPIC_IF_I/sr_icap2bus_3 [30],\IPIC_IF_I/sr_icap2bus_3 [31]}),
        .wr_data_count({\IPIC_IF_I/wroccy [0],\IPIC_IF_I/wroccy [1],\IPIC_IF_I/wroccy [2],\IPIC_IF_I/wroccy [3],\IPIC_IF_I/wroccy [4],\IPIC_IF_I/wroccy [5],\IPIC_IF_I/wroccy [6],\IPIC_IF_I/wroccy [7],\IPIC_IF_I/wroccy [8],\IPIC_IF_I/wroccy [9],\IPIC_IF_I/wroccy [10]}),
        .wr_en(\IPIC_IF_I/dt_fifo_wr_i ));
  semicap_interrupt_control INTERRUPT_CONTROL_I
       (.D({INTERRUPT_CONTROL_I_n_10,INTERRUPT_CONTROL_I_n_11,INTERRUPT_CONTROL_I_n_12,INTERRUPT_CONTROL_I_n_13}),
        .E(bus2ip_wrce[13]),
        .\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 (INTERRUPT_CONTROL_I_n_1),
        .\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_1 (\ICAP_SHARED.HWICAP_CTRL_I_n_100 ),
        .\GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1]_0 (\ICAP_SHARED.HWICAP_CTRL_I_n_101 ),
        .\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2]_0 (\ICAP_SHARED.HWICAP_CTRL_I_n_102 ),
        .\GEN_IP_IRPT_STATUS_REG[3].GEN_REG_STATUS.ip_irpt_status_reg_reg[3]_0 (\ICAP_SHARED.HWICAP_CTRL_I_n_103 ),
        .interrupt_wrce_strb(interrupt_wrce_strb),
        .intr2bus_rdack(intr2bus_rdack),
        .intr2bus_rdack0(intr2bus_rdack0),
        .intr2bus_wrack(intr2bus_wrack),
        .intr_rst(intr_rst),
        .\ip2bus_data_i_reg[28] ({p_10_out[28],p_10_out[29],p_10_out[30],p_10_out[31]}),
        .ip2intc_irpt(ip2intc_irpt),
        .ipif_glbl_irpt_enable_reg(ipif_glbl_irpt_enable_reg),
        .ipif_glbl_irpt_enable_reg_reg_0(XI4_LITE_I_n_57),
        .irpt_rdack(irpt_rdack),
        .irpt_rdack_d1(irpt_rdack_d1),
        .irpt_wrack(irpt_wrack),
        .irpt_wrack_d1(irpt_wrack_d1),
        .p_14_in(\I_SLAVE_ATTACHMENT/I_DECODER/p_14_in ),
        .p_16_in(\I_SLAVE_ATTACHMENT/I_DECODER/p_16_in ),
        .p_1_in(p_1_in),
        .p_1_in2_in(p_1_in2_in),
        .p_1_in5_in(p_1_in5_in),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_wdata(s_axi_wdata[3:0]));
  semicap_axi_lite_ipif XI4_LITE_I
       (.\AXI_HW_wdata[31] (XI4_LITE_I_n_57),
        .Bus_RNW_reg(\I_SLAVE_ATTACHMENT/I_DECODER/Bus_RNW_reg ),
        .D({XI4_LITE_I_n_21,XI4_LITE_I_n_22,XI4_LITE_I_n_23,XI4_LITE_I_n_24,XI4_LITE_I_n_25,XI4_LITE_I_n_26,XI4_LITE_I_n_27,XI4_LITE_I_n_28,XI4_LITE_I_n_29,XI4_LITE_I_n_30,XI4_LITE_I_n_31,XI4_LITE_I_n_32,XI4_LITE_I_n_33,XI4_LITE_I_n_34,XI4_LITE_I_n_35,XI4_LITE_I_n_36,XI4_LITE_I_n_37,XI4_LITE_I_n_38,XI4_LITE_I_n_39,XI4_LITE_I_n_40,XI4_LITE_I_n_41,XI4_LITE_I_n_42,XI4_LITE_I_n_43,XI4_LITE_I_n_44,XI4_LITE_I_n_45,XI4_LITE_I_n_46,XI4_LITE_I_n_47,XI4_LITE_I_n_48,XI4_LITE_I_n_49,XI4_LITE_I_n_50,XI4_LITE_I_n_51,XI4_LITE_I_n_52}),
        .\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] (XI4_LITE_I_n_9),
        .\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] (XI4_LITE_I_n_56),
        .\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] (s_axi_arready),
        .\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 (s_axi_wready),
        .\IP2Bus_Data_reg[20] ({\IPIC_IF_I/Size_counter_i3 [0],\IPIC_IF_I/Size_counter_i3 [1],\IPIC_IF_I/Size_counter_i3 [2],\IPIC_IF_I/Size_counter_i3 [3],\IPIC_IF_I/Size_counter_i3 [4],\IPIC_IF_I/Size_counter_i3 [5],\IPIC_IF_I/Size_counter_i3 [6],\IPIC_IF_I/Size_counter_i3 [7],\IPIC_IF_I/Size_counter_i3 [8],\IPIC_IF_I/Size_counter_i3 [9],\IPIC_IF_I/Size_counter_i3 [10],\IPIC_IF_I/Size_counter_i3 [11]}),
        .\IP2Bus_Data_reg[29] (\IPIC_IF_I/eos_status_i2 ),
        .\IP2Bus_Data_reg[30] (\IPIC_IF_I/hang_status_i2 ),
        .IP2Bus_RdAck0(\IPIC_IF_I/IP2Bus_RdAck0 ),
        .IP2Bus_WrAck0(\IPIC_IF_I/IP2Bus_WrAck0 ),
        .IP2Bus_WrAck_reg(XI4_LITE_I_n_10),
        .Q({\IPIC_IF_I/p_0_in9_in ,\ICAP_SHARED.HWICAP_CTRL_I_n_90 ,\ICAP_SHARED.HWICAP_CTRL_I_n_91 ,\ICAP_SHARED.HWICAP_CTRL_I_n_92 ,\ICAP_SHARED.HWICAP_CTRL_I_n_93 }),
        .SR(XI4_LITE_I_n_11),
        .bus2ip_reset(bus2ip_reset),
        .bus2ip_wrce({bus2ip_wrce[13],bus2ip_wrce[5:4]}),
        .busip_1(\IPIC_IF_I/busip_1 ),
        .dout(\IPIC_IF_I/p_5_out ),
        .interrupt_wrce_strb(interrupt_wrce_strb),
        .intr2bus_rdack0(intr2bus_rdack0),
        .intr2bus_wrack(intr2bus_wrack),
        .\ip2bus_data_i_reg[0] (p_10_out[0]),
        .ip2bus_rdack_i(ip2bus_rdack_i),
        .ip2bus_rdack_i_reg(\ICAP_SHARED.HWICAP_CTRL_I_n_99 ),
        .ip2bus_wrack_i(ip2bus_wrack_i),
        .ipbus_ack(\IPIC_IF_I/ipbus_ack ),
        .ipbus_ack_fifo(\IPIC_IF_I/ipbus_ack_fifo ),
        .ipif_glbl_irpt_enable_reg(ipif_glbl_irpt_enable_reg),
        .irpt_rdack(irpt_rdack),
        .irpt_rdack_d1(irpt_rdack_d1),
        .irpt_wrack(irpt_wrack),
        .irpt_wrack_d1(irpt_wrack_d1),
        .irpt_wrack_d1_reg(XI4_LITE_I_n_16),
        .p_10_in(\IPIC_IF_I/p_10_in ),
        .p_11_in(\IPIC_IF_I/p_11_in ),
        .p_14_in(\I_SLAVE_ATTACHMENT/I_DECODER/p_14_in ),
        .p_16_in(\I_SLAVE_ATTACHMENT/I_DECODER/p_16_in ),
        .p_7_in(\I_SLAVE_ATTACHMENT/I_DECODER/p_7_in ),
        .p_7_out(p_7_out),
        .p_8_in(\I_SLAVE_ATTACHMENT/I_DECODER/p_8_in ),
        .rd_data_count({\IPIC_IF_I/rd_occy_i [0],\IPIC_IF_I/rd_occy_i [1],\IPIC_IF_I/rd_occy_i [2],\IPIC_IF_I/rd_occy_i [3],\IPIC_IF_I/rd_occy_i [4],\IPIC_IF_I/rd_occy_i [5],\IPIC_IF_I/rd_occy_i [6],\IPIC_IF_I/rd_occy_i [7],\IPIC_IF_I/rd_occy_i [8]}),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr(s_axi_araddr[8:2]),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr[8:2]),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bvalid_i_reg(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .\s_axi_rdata_i_reg[31] ({ip2bus_data_i[0],ip2bus_data_i[1],ip2bus_data_i[2],ip2bus_data_i[3],ip2bus_data_i[4],ip2bus_data_i[5],ip2bus_data_i[6],ip2bus_data_i[7],ip2bus_data_i[8],ip2bus_data_i[9],ip2bus_data_i[10],ip2bus_data_i[11],ip2bus_data_i[12],ip2bus_data_i[13],ip2bus_data_i[14],ip2bus_data_i[15],ip2bus_data_i[16],ip2bus_data_i[17],ip2bus_data_i[18],ip2bus_data_i[19],ip2bus_data_i[20],ip2bus_data_i[21],ip2bus_data_i[22],ip2bus_data_i[23],ip2bus_data_i[24],ip2bus_data_i[25],ip2bus_data_i[26],ip2bus_data_i[27],ip2bus_data_i[28],ip2bus_data_i[29],ip2bus_data_i[30],ip2bus_data_i[31]}),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid_i_reg(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata[31]),
        .s_axi_wvalid(s_axi_wvalid),
        .scndry_out(\IPIC_IF_I/send_done_icap2bus ),
        .scndry_vect_out({\IPIC_IF_I/sr_icap2bus_3 [0],\IPIC_IF_I/sr_icap2bus_3 [1],\IPIC_IF_I/sr_icap2bus_3 [2],\IPIC_IF_I/sr_icap2bus_3 [3],\IPIC_IF_I/sr_icap2bus_3 [4],\IPIC_IF_I/sr_icap2bus_3 [5],\IPIC_IF_I/sr_icap2bus_3 [6],\IPIC_IF_I/sr_icap2bus_3 [7],\IPIC_IF_I/sr_icap2bus_3 [8],\IPIC_IF_I/sr_icap2bus_3 [9],\IPIC_IF_I/sr_icap2bus_3 [10],\IPIC_IF_I/sr_icap2bus_3 [11],\IPIC_IF_I/sr_icap2bus_3 [12],\IPIC_IF_I/sr_icap2bus_3 [13],\IPIC_IF_I/sr_icap2bus_3 [14],\IPIC_IF_I/sr_icap2bus_3 [15],\IPIC_IF_I/sr_icap2bus_3 [16],\IPIC_IF_I/sr_icap2bus_3 [17],\IPIC_IF_I/sr_icap2bus_3 [18],\IPIC_IF_I/sr_icap2bus_3 [19],\IPIC_IF_I/sr_icap2bus_3 [20],\IPIC_IF_I/sr_icap2bus_3 [21],\IPIC_IF_I/sr_icap2bus_3 [22],\IPIC_IF_I/sr_icap2bus_3 [23],\IPIC_IF_I/sr_icap2bus_3 [24],\IPIC_IF_I/sr_icap2bus_3 [25],\IPIC_IF_I/sr_icap2bus_3 [26],\IPIC_IF_I/sr_icap2bus_3 [27],\IPIC_IF_I/sr_icap2bus_3 [28],\IPIC_IF_I/sr_icap2bus_3 [29],\IPIC_IF_I/sr_icap2bus_3 [30],\IPIC_IF_I/sr_icap2bus_3 [31]}),
        .wr_data_count({\IPIC_IF_I/wroccy [0],\IPIC_IF_I/wroccy [1],\IPIC_IF_I/wroccy [2],\IPIC_IF_I/wroccy [3],\IPIC_IF_I/wroccy [4],\IPIC_IF_I/wroccy [5],\IPIC_IF_I/wroccy [6],\IPIC_IF_I/wroccy [7],\IPIC_IF_I/wroccy [8],\IPIC_IF_I/wroccy [9],\IPIC_IF_I/wroccy [10]}),
        .wr_en(\IPIC_IF_I/dt_fifo_wr_i ));
  FDRE \ip2bus_data_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(XI4_LITE_I_n_56),
        .Q(ip2bus_data_i[0]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[10]),
        .Q(ip2bus_data_i[10]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[11]),
        .Q(ip2bus_data_i[11]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[12] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[12]),
        .Q(ip2bus_data_i[12]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[13] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[13]),
        .Q(ip2bus_data_i[13]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[14] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[14]),
        .Q(ip2bus_data_i[14]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[15] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[15]),
        .Q(ip2bus_data_i[15]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[16] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[16]),
        .Q(ip2bus_data_i[16]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[17] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[17]),
        .Q(ip2bus_data_i[17]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[18] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[18]),
        .Q(ip2bus_data_i[18]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[19] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[19]),
        .Q(ip2bus_data_i[19]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[1]),
        .Q(ip2bus_data_i[1]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[20] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[20]),
        .Q(ip2bus_data_i[20]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[21] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[21]),
        .Q(ip2bus_data_i[21]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[22] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[22]),
        .Q(ip2bus_data_i[22]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[23] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[23]),
        .Q(ip2bus_data_i[23]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[24] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[24]),
        .Q(ip2bus_data_i[24]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[25] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[25]),
        .Q(ip2bus_data_i[25]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[26] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[26]),
        .Q(ip2bus_data_i[26]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[27] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[27]),
        .Q(ip2bus_data_i[27]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[28] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(INTERRUPT_CONTROL_I_n_10),
        .Q(ip2bus_data_i[28]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[29] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(INTERRUPT_CONTROL_I_n_11),
        .Q(ip2bus_data_i[29]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[2]),
        .Q(ip2bus_data_i[2]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[30] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(INTERRUPT_CONTROL_I_n_12),
        .Q(ip2bus_data_i[30]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[31] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(INTERRUPT_CONTROL_I_n_13),
        .Q(ip2bus_data_i[31]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[3]),
        .Q(ip2bus_data_i[3]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[4]),
        .Q(ip2bus_data_i[4]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[5]),
        .Q(ip2bus_data_i[5]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[6]),
        .Q(ip2bus_data_i[6]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[7]),
        .Q(ip2bus_data_i[7]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[8]),
        .Q(ip2bus_data_i[8]),
        .R(XI4_LITE_I_n_11));
  FDRE \ip2bus_data_i_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_out[9]),
        .Q(ip2bus_data_i[9]),
        .R(XI4_LITE_I_n_11));
  FDRE ip2bus_rdack_i_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(XI4_LITE_I_n_9),
        .Q(ip2bus_rdack_i),
        .R(1'b0));
  FDRE ip2bus_wrack_i_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(XI4_LITE_I_n_10),
        .Q(ip2bus_wrack_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "axi_lite_ipif" *) 
module semicap_axi_lite_ipif
   (p_7_in,
    p_8_in,
    p_14_in,
    p_16_in,
    Bus_RNW_reg,
    s_axi_rvalid_i_reg,
    s_axi_bvalid_i_reg,
    \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] ,
    \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ,
    \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] ,
    IP2Bus_WrAck_reg,
    SR,
    irpt_rdack,
    intr2bus_rdack0,
    irpt_wrack,
    interrupt_wrce_strb,
    irpt_wrack_d1_reg,
    IP2Bus_RdAck0,
    IP2Bus_WrAck0,
    p_10_in,
    p_11_in,
    D,
    bus2ip_wrce,
    \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] ,
    \AXI_HW_wdata[31] ,
    s_axi_rdata,
    bus2ip_reset,
    s_axi_aclk,
    s_axi_arvalid,
    ip2bus_wrack_i,
    ip2bus_rdack_i,
    s_axi_aresetn,
    s_axi_awvalid,
    s_axi_wvalid,
    ip2bus_rdack_i_reg,
    p_7_out,
    intr2bus_wrack,
    irpt_rdack_d1,
    irpt_wrack_d1,
    ipbus_ack_fifo,
    ipbus_ack,
    wr_en,
    busip_1,
    dout,
    \IP2Bus_Data_reg[20] ,
    scndry_vect_out,
    wr_data_count,
    rd_data_count,
    s_axi_bready,
    s_axi_rready,
    Q,
    scndry_out,
    \IP2Bus_Data_reg[30] ,
    \IP2Bus_Data_reg[29] ,
    s_axi_awaddr,
    s_axi_araddr,
    ipif_glbl_irpt_enable_reg,
    \ip2bus_data_i_reg[0] ,
    s_axi_wdata,
    \s_axi_rdata_i_reg[31] );
  output p_7_in;
  output p_8_in;
  output p_14_in;
  output p_16_in;
  output Bus_RNW_reg;
  output s_axi_rvalid_i_reg;
  output s_axi_bvalid_i_reg;
  output \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] ;
  output \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ;
  output \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] ;
  output IP2Bus_WrAck_reg;
  output [0:0]SR;
  output irpt_rdack;
  output intr2bus_rdack0;
  output irpt_wrack;
  output interrupt_wrce_strb;
  output irpt_wrack_d1_reg;
  output IP2Bus_RdAck0;
  output IP2Bus_WrAck0;
  output p_10_in;
  output p_11_in;
  output [31:0]D;
  output [2:0]bus2ip_wrce;
  output [0:0]\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] ;
  output \AXI_HW_wdata[31] ;
  output [31:0]s_axi_rdata;
  input bus2ip_reset;
  input s_axi_aclk;
  input s_axi_arvalid;
  input ip2bus_wrack_i;
  input ip2bus_rdack_i;
  input s_axi_aresetn;
  input s_axi_awvalid;
  input s_axi_wvalid;
  input ip2bus_rdack_i_reg;
  input p_7_out;
  input intr2bus_wrack;
  input irpt_rdack_d1;
  input irpt_wrack_d1;
  input ipbus_ack_fifo;
  input ipbus_ack;
  input wr_en;
  input busip_1;
  input [31:0]dout;
  input [11:0]\IP2Bus_Data_reg[20] ;
  input [31:0]scndry_vect_out;
  input [10:0]wr_data_count;
  input [8:0]rd_data_count;
  input s_axi_bready;
  input s_axi_rready;
  input [4:0]Q;
  input scndry_out;
  input \IP2Bus_Data_reg[30] ;
  input \IP2Bus_Data_reg[29] ;
  input [6:0]s_axi_awaddr;
  input [6:0]s_axi_araddr;
  input ipif_glbl_irpt_enable_reg;
  input [0:0]\ip2bus_data_i_reg[0] ;
  input [0:0]s_axi_wdata;
  input [31:0]\s_axi_rdata_i_reg[31] ;

  wire \AXI_HW_wdata[31] ;
  wire Bus_RNW_reg;
  wire [31:0]D;
  wire \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] ;
  wire [0:0]\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] ;
  wire \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] ;
  wire \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ;
  wire [11:0]\IP2Bus_Data_reg[20] ;
  wire \IP2Bus_Data_reg[29] ;
  wire \IP2Bus_Data_reg[30] ;
  wire IP2Bus_RdAck0;
  wire IP2Bus_WrAck0;
  wire IP2Bus_WrAck_reg;
  wire [4:0]Q;
  wire [0:0]SR;
  wire bus2ip_reset;
  wire [2:0]bus2ip_wrce;
  wire busip_1;
  wire [31:0]dout;
  wire interrupt_wrce_strb;
  wire intr2bus_rdack0;
  wire intr2bus_wrack;
  wire [0:0]\ip2bus_data_i_reg[0] ;
  wire ip2bus_rdack_i;
  wire ip2bus_rdack_i_reg;
  wire ip2bus_wrack_i;
  wire ipbus_ack;
  wire ipbus_ack_fifo;
  wire ipif_glbl_irpt_enable_reg;
  wire irpt_rdack;
  wire irpt_rdack_d1;
  wire irpt_wrack;
  wire irpt_wrack_d1;
  wire irpt_wrack_d1_reg;
  wire p_10_in;
  wire p_11_in;
  wire p_14_in;
  wire p_16_in;
  wire p_7_in;
  wire p_7_out;
  wire p_8_in;
  wire [8:0]rd_data_count;
  wire s_axi_aclk;
  wire [6:0]s_axi_araddr;
  wire s_axi_aresetn;
  wire s_axi_arvalid;
  wire [6:0]s_axi_awaddr;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_bvalid_i_reg;
  wire [31:0]s_axi_rdata;
  wire [31:0]\s_axi_rdata_i_reg[31] ;
  wire s_axi_rready;
  wire s_axi_rvalid_i_reg;
  wire [0:0]s_axi_wdata;
  wire s_axi_wvalid;
  wire scndry_out;
  wire [31:0]scndry_vect_out;
  wire [10:0]wr_data_count;
  wire wr_en;

  semicap_slave_attachment I_SLAVE_ATTACHMENT
       (.\AXI_HW_wdata[31] (\AXI_HW_wdata[31] ),
        .Bus_RNW_reg_reg(Bus_RNW_reg),
        .D(D),
        .\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10] (p_14_in),
        .\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] (p_7_in),
        .\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 (\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] ),
        .\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] (p_16_in),
        .\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 (\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] ),
        .\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 (\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] ),
        .\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_1 (\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ),
        .\IP2Bus_Data_reg[20] (\IP2Bus_Data_reg[20] ),
        .\IP2Bus_Data_reg[29] (\IP2Bus_Data_reg[29] ),
        .\IP2Bus_Data_reg[30] (\IP2Bus_Data_reg[30] ),
        .IP2Bus_RdAck0(IP2Bus_RdAck0),
        .IP2Bus_WrAck0(IP2Bus_WrAck0),
        .IP2Bus_WrAck_reg(IP2Bus_WrAck_reg),
        .Q(Q),
        .SR(SR),
        .bus2ip_reset(bus2ip_reset),
        .bus2ip_wrce(bus2ip_wrce),
        .busip_1(busip_1),
        .dout(dout),
        .interrupt_wrce_strb(interrupt_wrce_strb),
        .intr2bus_rdack0(intr2bus_rdack0),
        .intr2bus_wrack(intr2bus_wrack),
        .\ip2bus_data_i_reg[0] (\ip2bus_data_i_reg[0] ),
        .ip2bus_rdack_i(ip2bus_rdack_i),
        .ip2bus_rdack_i_reg(ip2bus_rdack_i_reg),
        .ip2bus_wrack_i(ip2bus_wrack_i),
        .ipbus_ack(ipbus_ack),
        .ipbus_ack_fifo(ipbus_ack_fifo),
        .ipif_glbl_irpt_enable_reg(ipif_glbl_irpt_enable_reg),
        .irpt_rdack(irpt_rdack),
        .irpt_rdack_d1(irpt_rdack_d1),
        .irpt_wrack(irpt_wrack),
        .irpt_wrack_d1(irpt_wrack_d1),
        .irpt_wrack_d1_reg(irpt_wrack_d1_reg),
        .p_10_in(p_10_in),
        .p_11_in(p_11_in),
        .p_7_out(p_7_out),
        .p_8_in(p_8_in),
        .rd_data_count(rd_data_count),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bvalid_i_reg_0(s_axi_bvalid_i_reg),
        .s_axi_rdata(s_axi_rdata),
        .\s_axi_rdata_i_reg[31]_0 (\s_axi_rdata_i_reg[31] ),
        .s_axi_rready(s_axi_rready),
        .s_axi_rvalid_i_reg_0(s_axi_rvalid_i_reg),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wvalid(s_axi_wvalid),
        .scndry_out(scndry_out),
        .scndry_vect_out(scndry_vect_out),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync
   (scndry_vect_out,
    Q,
    s_axi_aclk);
  output [11:0]scndry_vect_out;
  input [11:0]Q;
  input s_axi_aclk;

  wire [11:0]Q;
  wire s_axi_aclk;
  wire s_level_out_bus_d1_cdc_to_0;
  wire s_level_out_bus_d1_cdc_to_1;
  wire s_level_out_bus_d1_cdc_to_10;
  wire s_level_out_bus_d1_cdc_to_11;
  wire s_level_out_bus_d1_cdc_to_2;
  wire s_level_out_bus_d1_cdc_to_3;
  wire s_level_out_bus_d1_cdc_to_4;
  wire s_level_out_bus_d1_cdc_to_5;
  wire s_level_out_bus_d1_cdc_to_6;
  wire s_level_out_bus_d1_cdc_to_7;
  wire s_level_out_bus_d1_cdc_to_8;
  wire s_level_out_bus_d1_cdc_to_9;
  wire s_level_out_bus_d2_0;
  wire s_level_out_bus_d2_1;
  wire s_level_out_bus_d2_10;
  wire s_level_out_bus_d2_11;
  wire s_level_out_bus_d2_2;
  wire s_level_out_bus_d2_3;
  wire s_level_out_bus_d2_4;
  wire s_level_out_bus_d2_5;
  wire s_level_out_bus_d2_6;
  wire s_level_out_bus_d2_7;
  wire s_level_out_bus_d2_8;
  wire s_level_out_bus_d2_9;
  wire s_level_out_bus_d3_0;
  wire s_level_out_bus_d3_1;
  wire s_level_out_bus_d3_10;
  wire s_level_out_bus_d3_11;
  wire s_level_out_bus_d3_2;
  wire s_level_out_bus_d3_3;
  wire s_level_out_bus_d3_4;
  wire s_level_out_bus_d3_5;
  wire s_level_out_bus_d3_6;
  wire s_level_out_bus_d3_7;
  wire s_level_out_bus_d3_8;
  wire s_level_out_bus_d3_9;
  wire [11:0]scndry_vect_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[0].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_0),
        .Q(s_level_out_bus_d2_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[10].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_10),
        .Q(s_level_out_bus_d2_10),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[11].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_11),
        .Q(s_level_out_bus_d2_11),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[1].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_1),
        .Q(s_level_out_bus_d2_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[2].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_2),
        .Q(s_level_out_bus_d2_2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[3].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_3),
        .Q(s_level_out_bus_d2_3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[4].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_4),
        .Q(s_level_out_bus_d2_4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[5].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_5),
        .Q(s_level_out_bus_d2_5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[6].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_6),
        .Q(s_level_out_bus_d2_6),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[7].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_7),
        .Q(s_level_out_bus_d2_7),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[8].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_8),
        .Q(s_level_out_bus_d2_8),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[9].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_9),
        .Q(s_level_out_bus_d2_9),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[0].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_0),
        .Q(s_level_out_bus_d3_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[10].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_10),
        .Q(s_level_out_bus_d3_10),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[11].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_11),
        .Q(s_level_out_bus_d3_11),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[1].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_1),
        .Q(s_level_out_bus_d3_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[2].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_2),
        .Q(s_level_out_bus_d3_2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[3].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_3),
        .Q(s_level_out_bus_d3_3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[4].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_4),
        .Q(s_level_out_bus_d3_4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[5].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_5),
        .Q(s_level_out_bus_d3_5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[6].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_6),
        .Q(s_level_out_bus_d3_6),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[7].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_7),
        .Q(s_level_out_bus_d3_7),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[8].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_8),
        .Q(s_level_out_bus_d3_8),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[9].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_9),
        .Q(s_level_out_bus_d3_9),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[0].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_0),
        .Q(scndry_vect_out[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[10].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_10),
        .Q(scndry_vect_out[10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[11].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_11),
        .Q(scndry_vect_out[11]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[1].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_1),
        .Q(scndry_vect_out[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[2].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_2),
        .Q(scndry_vect_out[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[3].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_3),
        .Q(scndry_vect_out[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[4].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_4),
        .Q(scndry_vect_out[4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[5].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_5),
        .Q(scndry_vect_out[5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[6].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_6),
        .Q(scndry_vect_out[6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[7].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_7),
        .Q(scndry_vect_out[7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[8].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_8),
        .Q(scndry_vect_out[8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[9].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_9),
        .Q(scndry_vect_out[9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[0].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[0]),
        .Q(s_level_out_bus_d1_cdc_to_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[10].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[10]),
        .Q(s_level_out_bus_d1_cdc_to_10),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[11]),
        .Q(s_level_out_bus_d1_cdc_to_11),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[1].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[1]),
        .Q(s_level_out_bus_d1_cdc_to_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[2].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[2]),
        .Q(s_level_out_bus_d1_cdc_to_2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[3].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[3]),
        .Q(s_level_out_bus_d1_cdc_to_3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[4].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[4]),
        .Q(s_level_out_bus_d1_cdc_to_4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[5].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[5]),
        .Q(s_level_out_bus_d1_cdc_to_5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[6].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[6]),
        .Q(s_level_out_bus_d1_cdc_to_6),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[7].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[7]),
        .Q(s_level_out_bus_d1_cdc_to_7),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[8].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[8]),
        .Q(s_level_out_bus_d1_cdc_to_8),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[9].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[9]),
        .Q(s_level_out_bus_d1_cdc_to_9),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync_17
   (scndry_vect_out,
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ,
    s_axi_aclk);
  output [11:0]scndry_vect_out;
  input [11:0]\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  input s_axi_aclk;

  wire [11:0]\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  wire s_axi_aclk;
  wire s_level_out_bus_d1_cdc_to_0;
  wire s_level_out_bus_d1_cdc_to_1;
  wire s_level_out_bus_d1_cdc_to_10;
  wire s_level_out_bus_d1_cdc_to_11;
  wire s_level_out_bus_d1_cdc_to_2;
  wire s_level_out_bus_d1_cdc_to_3;
  wire s_level_out_bus_d1_cdc_to_4;
  wire s_level_out_bus_d1_cdc_to_5;
  wire s_level_out_bus_d1_cdc_to_6;
  wire s_level_out_bus_d1_cdc_to_7;
  wire s_level_out_bus_d1_cdc_to_8;
  wire s_level_out_bus_d1_cdc_to_9;
  wire s_level_out_bus_d2_0;
  wire s_level_out_bus_d2_1;
  wire s_level_out_bus_d2_10;
  wire s_level_out_bus_d2_11;
  wire s_level_out_bus_d2_2;
  wire s_level_out_bus_d2_3;
  wire s_level_out_bus_d2_4;
  wire s_level_out_bus_d2_5;
  wire s_level_out_bus_d2_6;
  wire s_level_out_bus_d2_7;
  wire s_level_out_bus_d2_8;
  wire s_level_out_bus_d2_9;
  wire s_level_out_bus_d3_0;
  wire s_level_out_bus_d3_1;
  wire s_level_out_bus_d3_10;
  wire s_level_out_bus_d3_11;
  wire s_level_out_bus_d3_2;
  wire s_level_out_bus_d3_3;
  wire s_level_out_bus_d3_4;
  wire s_level_out_bus_d3_5;
  wire s_level_out_bus_d3_6;
  wire s_level_out_bus_d3_7;
  wire s_level_out_bus_d3_8;
  wire s_level_out_bus_d3_9;
  wire [11:0]scndry_vect_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[0].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_0),
        .Q(s_level_out_bus_d2_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[10].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_10),
        .Q(s_level_out_bus_d2_10),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[11].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_11),
        .Q(s_level_out_bus_d2_11),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[1].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_1),
        .Q(s_level_out_bus_d2_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[2].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_2),
        .Q(s_level_out_bus_d2_2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[3].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_3),
        .Q(s_level_out_bus_d2_3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[4].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_4),
        .Q(s_level_out_bus_d2_4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[5].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_5),
        .Q(s_level_out_bus_d2_5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[6].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_6),
        .Q(s_level_out_bus_d2_6),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[7].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_7),
        .Q(s_level_out_bus_d2_7),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[8].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_8),
        .Q(s_level_out_bus_d2_8),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[9].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_9),
        .Q(s_level_out_bus_d2_9),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[0].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_0),
        .Q(s_level_out_bus_d3_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[10].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_10),
        .Q(s_level_out_bus_d3_10),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[11].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_11),
        .Q(s_level_out_bus_d3_11),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[1].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_1),
        .Q(s_level_out_bus_d3_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[2].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_2),
        .Q(s_level_out_bus_d3_2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[3].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_3),
        .Q(s_level_out_bus_d3_3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[4].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_4),
        .Q(s_level_out_bus_d3_4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[5].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_5),
        .Q(s_level_out_bus_d3_5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[6].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_6),
        .Q(s_level_out_bus_d3_6),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[7].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_7),
        .Q(s_level_out_bus_d3_7),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[8].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_8),
        .Q(s_level_out_bus_d3_8),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[9].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_9),
        .Q(s_level_out_bus_d3_9),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[0].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_0),
        .Q(scndry_vect_out[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[10].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_10),
        .Q(scndry_vect_out[10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[11].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_11),
        .Q(scndry_vect_out[11]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[1].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_1),
        .Q(scndry_vect_out[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[2].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_2),
        .Q(scndry_vect_out[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[3].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_3),
        .Q(scndry_vect_out[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[4].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_4),
        .Q(scndry_vect_out[4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[5].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_5),
        .Q(scndry_vect_out[5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[6].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_6),
        .Q(scndry_vect_out[6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[7].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_7),
        .Q(scndry_vect_out[7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[8].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_8),
        .Q(scndry_vect_out[8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[9].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_9),
        .Q(scndry_vect_out[9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[0].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [0]),
        .Q(s_level_out_bus_d1_cdc_to_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[10].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [10]),
        .Q(s_level_out_bus_d1_cdc_to_10),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [11]),
        .Q(s_level_out_bus_d1_cdc_to_11),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[1].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [1]),
        .Q(s_level_out_bus_d1_cdc_to_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[2].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [2]),
        .Q(s_level_out_bus_d1_cdc_to_2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[3].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [3]),
        .Q(s_level_out_bus_d1_cdc_to_3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[4].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [4]),
        .Q(s_level_out_bus_d1_cdc_to_4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[5].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [5]),
        .Q(s_level_out_bus_d1_cdc_to_5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[6].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [6]),
        .Q(s_level_out_bus_d1_cdc_to_6),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[7].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [7]),
        .Q(s_level_out_bus_d1_cdc_to_7),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[8].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [8]),
        .Q(s_level_out_bus_d1_cdc_to_8),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[9].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 [9]),
        .Q(s_level_out_bus_d1_cdc_to_9),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized0
   (\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 ,
    Q,
    s_axi_aclk);
  output [31:0]\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 ;
  input [31:0]Q;
  input s_axi_aclk;

  wire [31:0]\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 ;
  wire [31:0]Q;
  wire s_axi_aclk;
  wire s_level_out_bus_d1_cdc_to_0;
  wire s_level_out_bus_d1_cdc_to_1;
  wire s_level_out_bus_d1_cdc_to_10;
  wire s_level_out_bus_d1_cdc_to_11;
  wire s_level_out_bus_d1_cdc_to_12;
  wire s_level_out_bus_d1_cdc_to_13;
  wire s_level_out_bus_d1_cdc_to_14;
  wire s_level_out_bus_d1_cdc_to_15;
  wire s_level_out_bus_d1_cdc_to_16;
  wire s_level_out_bus_d1_cdc_to_17;
  wire s_level_out_bus_d1_cdc_to_18;
  wire s_level_out_bus_d1_cdc_to_19;
  wire s_level_out_bus_d1_cdc_to_2;
  wire s_level_out_bus_d1_cdc_to_20;
  wire s_level_out_bus_d1_cdc_to_21;
  wire s_level_out_bus_d1_cdc_to_22;
  wire s_level_out_bus_d1_cdc_to_23;
  wire s_level_out_bus_d1_cdc_to_24;
  wire s_level_out_bus_d1_cdc_to_25;
  wire s_level_out_bus_d1_cdc_to_26;
  wire s_level_out_bus_d1_cdc_to_27;
  wire s_level_out_bus_d1_cdc_to_28;
  wire s_level_out_bus_d1_cdc_to_29;
  wire s_level_out_bus_d1_cdc_to_3;
  wire s_level_out_bus_d1_cdc_to_30;
  wire s_level_out_bus_d1_cdc_to_31;
  wire s_level_out_bus_d1_cdc_to_4;
  wire s_level_out_bus_d1_cdc_to_5;
  wire s_level_out_bus_d1_cdc_to_6;
  wire s_level_out_bus_d1_cdc_to_7;
  wire s_level_out_bus_d1_cdc_to_8;
  wire s_level_out_bus_d1_cdc_to_9;
  wire s_level_out_bus_d2_0;
  wire s_level_out_bus_d2_1;
  wire s_level_out_bus_d2_10;
  wire s_level_out_bus_d2_11;
  wire s_level_out_bus_d2_12;
  wire s_level_out_bus_d2_13;
  wire s_level_out_bus_d2_14;
  wire s_level_out_bus_d2_15;
  wire s_level_out_bus_d2_16;
  wire s_level_out_bus_d2_17;
  wire s_level_out_bus_d2_18;
  wire s_level_out_bus_d2_19;
  wire s_level_out_bus_d2_2;
  wire s_level_out_bus_d2_20;
  wire s_level_out_bus_d2_21;
  wire s_level_out_bus_d2_22;
  wire s_level_out_bus_d2_23;
  wire s_level_out_bus_d2_24;
  wire s_level_out_bus_d2_25;
  wire s_level_out_bus_d2_26;
  wire s_level_out_bus_d2_27;
  wire s_level_out_bus_d2_28;
  wire s_level_out_bus_d2_29;
  wire s_level_out_bus_d2_3;
  wire s_level_out_bus_d2_30;
  wire s_level_out_bus_d2_31;
  wire s_level_out_bus_d2_4;
  wire s_level_out_bus_d2_5;
  wire s_level_out_bus_d2_6;
  wire s_level_out_bus_d2_7;
  wire s_level_out_bus_d2_8;
  wire s_level_out_bus_d2_9;
  wire s_level_out_bus_d3_0;
  wire s_level_out_bus_d3_1;
  wire s_level_out_bus_d3_10;
  wire s_level_out_bus_d3_11;
  wire s_level_out_bus_d3_12;
  wire s_level_out_bus_d3_13;
  wire s_level_out_bus_d3_14;
  wire s_level_out_bus_d3_15;
  wire s_level_out_bus_d3_16;
  wire s_level_out_bus_d3_17;
  wire s_level_out_bus_d3_18;
  wire s_level_out_bus_d3_19;
  wire s_level_out_bus_d3_2;
  wire s_level_out_bus_d3_20;
  wire s_level_out_bus_d3_21;
  wire s_level_out_bus_d3_22;
  wire s_level_out_bus_d3_23;
  wire s_level_out_bus_d3_24;
  wire s_level_out_bus_d3_25;
  wire s_level_out_bus_d3_26;
  wire s_level_out_bus_d3_27;
  wire s_level_out_bus_d3_28;
  wire s_level_out_bus_d3_29;
  wire s_level_out_bus_d3_3;
  wire s_level_out_bus_d3_30;
  wire s_level_out_bus_d3_31;
  wire s_level_out_bus_d3_4;
  wire s_level_out_bus_d3_5;
  wire s_level_out_bus_d3_6;
  wire s_level_out_bus_d3_7;
  wire s_level_out_bus_d3_8;
  wire s_level_out_bus_d3_9;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[0].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_0),
        .Q(s_level_out_bus_d2_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[10].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_10),
        .Q(s_level_out_bus_d2_10),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[11].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_11),
        .Q(s_level_out_bus_d2_11),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[12].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_12),
        .Q(s_level_out_bus_d2_12),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[13].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_13),
        .Q(s_level_out_bus_d2_13),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[14].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_14),
        .Q(s_level_out_bus_d2_14),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[15].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_15),
        .Q(s_level_out_bus_d2_15),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[16].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_16),
        .Q(s_level_out_bus_d2_16),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[17].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_17),
        .Q(s_level_out_bus_d2_17),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[18].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_18),
        .Q(s_level_out_bus_d2_18),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[19].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_19),
        .Q(s_level_out_bus_d2_19),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[1].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_1),
        .Q(s_level_out_bus_d2_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[20].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_20),
        .Q(s_level_out_bus_d2_20),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[21].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_21),
        .Q(s_level_out_bus_d2_21),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[22].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_22),
        .Q(s_level_out_bus_d2_22),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[23].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_23),
        .Q(s_level_out_bus_d2_23),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[24].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_24),
        .Q(s_level_out_bus_d2_24),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[25].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_25),
        .Q(s_level_out_bus_d2_25),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[26].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_26),
        .Q(s_level_out_bus_d2_26),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[27].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_27),
        .Q(s_level_out_bus_d2_27),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[28].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_28),
        .Q(s_level_out_bus_d2_28),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[29].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_29),
        .Q(s_level_out_bus_d2_29),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[2].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_2),
        .Q(s_level_out_bus_d2_2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[30].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_30),
        .Q(s_level_out_bus_d2_30),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_31),
        .Q(s_level_out_bus_d2_31),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[3].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_3),
        .Q(s_level_out_bus_d2_3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[4].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_4),
        .Q(s_level_out_bus_d2_4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[5].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_5),
        .Q(s_level_out_bus_d2_5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[6].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_6),
        .Q(s_level_out_bus_d2_6),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[7].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_7),
        .Q(s_level_out_bus_d2_7),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[8].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_8),
        .Q(s_level_out_bus_d2_8),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d2[9].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d1_cdc_to_9),
        .Q(s_level_out_bus_d2_9),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[0].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_0),
        .Q(s_level_out_bus_d3_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[10].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_10),
        .Q(s_level_out_bus_d3_10),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[11].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_11),
        .Q(s_level_out_bus_d3_11),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[12].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_12),
        .Q(s_level_out_bus_d3_12),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[13].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_13),
        .Q(s_level_out_bus_d3_13),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[14].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_14),
        .Q(s_level_out_bus_d3_14),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[15].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_15),
        .Q(s_level_out_bus_d3_15),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[16].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_16),
        .Q(s_level_out_bus_d3_16),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[17].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_17),
        .Q(s_level_out_bus_d3_17),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[18].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_18),
        .Q(s_level_out_bus_d3_18),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[19].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_19),
        .Q(s_level_out_bus_d3_19),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[1].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_1),
        .Q(s_level_out_bus_d3_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[20].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_20),
        .Q(s_level_out_bus_d3_20),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[21].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_21),
        .Q(s_level_out_bus_d3_21),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[22].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_22),
        .Q(s_level_out_bus_d3_22),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[23].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_23),
        .Q(s_level_out_bus_d3_23),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[24].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_24),
        .Q(s_level_out_bus_d3_24),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[25].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_25),
        .Q(s_level_out_bus_d3_25),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[26].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_26),
        .Q(s_level_out_bus_d3_26),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[27].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_27),
        .Q(s_level_out_bus_d3_27),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[28].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_28),
        .Q(s_level_out_bus_d3_28),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[29].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_29),
        .Q(s_level_out_bus_d3_29),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[2].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_2),
        .Q(s_level_out_bus_d3_2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[30].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_30),
        .Q(s_level_out_bus_d3_30),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_31),
        .Q(s_level_out_bus_d3_31),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[3].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_3),
        .Q(s_level_out_bus_d3_3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[4].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_4),
        .Q(s_level_out_bus_d3_4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[5].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_5),
        .Q(s_level_out_bus_d3_5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[6].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_6),
        .Q(s_level_out_bus_d3_6),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[7].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_7),
        .Q(s_level_out_bus_d3_7),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[8].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_8),
        .Q(s_level_out_bus_d3_8),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d3[9].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d2_9),
        .Q(s_level_out_bus_d3_9),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[0].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_0),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[10].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_10),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[11].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_11),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [11]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[12].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_12),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [12]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[13].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_13),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [13]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[14].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_14),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [14]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[15].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_15),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [15]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[16].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_16),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [16]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[17].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_17),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [17]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[18].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_18),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [18]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[19].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_19),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [19]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[1].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_1),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[20].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_20),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [20]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[21].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_21),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [21]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[22].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_22),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [22]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[23].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_23),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [23]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[24].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_24),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [24]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[25].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_25),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [25]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[26].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_26),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [26]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[27].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_27),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [27]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[28].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_28),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [28]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[29].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_29),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [29]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[2].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_2),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[30].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_30),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [30]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_31),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [31]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[3].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_3),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[4].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_4),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[5].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_5),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[6].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_6),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[7].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_7),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[8].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_8),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[9].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_bus_d3_9),
        .Q(\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[0].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[0]),
        .Q(s_level_out_bus_d1_cdc_to_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[10].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[10]),
        .Q(s_level_out_bus_d1_cdc_to_10),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[11]),
        .Q(s_level_out_bus_d1_cdc_to_11),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[12].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[12]),
        .Q(s_level_out_bus_d1_cdc_to_12),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[13].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[13]),
        .Q(s_level_out_bus_d1_cdc_to_13),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[14].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[14]),
        .Q(s_level_out_bus_d1_cdc_to_14),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[15].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[15]),
        .Q(s_level_out_bus_d1_cdc_to_15),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[16].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[16]),
        .Q(s_level_out_bus_d1_cdc_to_16),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[17].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[17]),
        .Q(s_level_out_bus_d1_cdc_to_17),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[18].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[18]),
        .Q(s_level_out_bus_d1_cdc_to_18),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[19].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[19]),
        .Q(s_level_out_bus_d1_cdc_to_19),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[1].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[1]),
        .Q(s_level_out_bus_d1_cdc_to_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[20].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[20]),
        .Q(s_level_out_bus_d1_cdc_to_20),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[21].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[21]),
        .Q(s_level_out_bus_d1_cdc_to_21),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[22].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[22]),
        .Q(s_level_out_bus_d1_cdc_to_22),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[23].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[23]),
        .Q(s_level_out_bus_d1_cdc_to_23),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[24].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[24]),
        .Q(s_level_out_bus_d1_cdc_to_24),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[25].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[25]),
        .Q(s_level_out_bus_d1_cdc_to_25),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[26].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[26]),
        .Q(s_level_out_bus_d1_cdc_to_26),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[27].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[27]),
        .Q(s_level_out_bus_d1_cdc_to_27),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[28].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[28]),
        .Q(s_level_out_bus_d1_cdc_to_28),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[29].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[29]),
        .Q(s_level_out_bus_d1_cdc_to_29),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[2].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[2]),
        .Q(s_level_out_bus_d1_cdc_to_2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[30].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[30]),
        .Q(s_level_out_bus_d1_cdc_to_30),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[31].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[31]),
        .Q(s_level_out_bus_d1_cdc_to_31),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[3].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[3]),
        .Q(s_level_out_bus_d1_cdc_to_3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[4].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[4]),
        .Q(s_level_out_bus_d1_cdc_to_4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[5].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[5]),
        .Q(s_level_out_bus_d1_cdc_to_5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[6].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[6]),
        .Q(s_level_out_bus_d1_cdc_to_6),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[7].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[7]),
        .Q(s_level_out_bus_d1_cdc_to_7),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[8].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[8]),
        .Q(s_level_out_bus_d1_cdc_to_8),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[9].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q[9]),
        .Q(s_level_out_bus_d1_cdc_to_9),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized1
   (SR,
    scndry_out,
    count_reset_cs,
    prmry_in,
    s_axi_aclk);
  output [0:0]SR;
  output scndry_out;
  input count_reset_cs;
  input prmry_in;
  input s_axi_aclk;

  wire [0:0]SR;
  wire count_reset_cs;
  wire prmry_in;
  wire s_axi_aclk;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(prmry_in),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \count[2]_i_1 
       (.I0(scndry_out),
        .I1(count_reset_cs),
        .O(SR));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized1_13
   (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ,
    prmry_in,
    s_axi_aclk);
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  input prmry_in;
  input s_axi_aclk;

  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  wire prmry_in;
  wire s_axi_aclk;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(prmry_in),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized1_14
   (abort_onreset0,
    SR,
    abort_onreset_reg,
    s_axi_aresetn,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ,
    s_axi_aclk);
  output abort_onreset0;
  output [0:0]SR;
  input [0:0]abort_onreset_reg;
  input s_axi_aresetn;
  input \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  input s_axi_aclk;

  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  wire [0:0]SR;
  wire abort_onreset0;
  wire [0:0]abort_onreset_reg;
  wire reset_cr_icap2bus;
  wire s_axi_aclk;
  wire s_axi_aresetn;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(reset_cr_icap2bus),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h8)) 
    abort_onreset_i_1
       (.I0(abort_onreset_reg),
        .I1(reset_cr_icap2bus),
        .O(abort_onreset0));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \cr_i[0]_i_1 
       (.I0(reset_cr_icap2bus),
        .I1(s_axi_aresetn),
        .O(SR));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized1_15
   (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ,
    s_axi_aclk);
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  input \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  input s_axi_aclk;

  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  wire s_axi_aclk;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized1_16
   (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ,
    icap_avail,
    s_axi_aclk);
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  input icap_avail;
  input s_axi_aclk;

  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  wire icap_avail;
  wire s_axi_aclk;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_avail),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized1_18
   (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ,
    scndry_out,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ,
    icap_req_d_reg,
    icap_ce_cs,
    cap_rel,
    cap_gnt,
    \size_cs_reg[11] ,
    \size_cs_reg[11]_0 ,
    \size_cs_reg[11]_1 ,
    icap_req_d,
    icap_req_d_reg_0,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ,
    s_axi_aclk);
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  output scndry_out;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ;
  output icap_req_d_reg;
  input icap_ce_cs;
  input cap_rel;
  input cap_gnt;
  input \size_cs_reg[11] ;
  input \size_cs_reg[11]_0 ;
  input \size_cs_reg[11]_1 ;
  input icap_req_d;
  input icap_req_d_reg_0;
  input [0:0]\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  input s_axi_aclk;

  wire [0:0]\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ;
  wire cap_gnt;
  wire cap_rel;
  wire icap_ce_cs;
  wire icap_req_d;
  wire icap_req_d_reg;
  wire icap_req_d_reg_0;
  wire s_axi_aclk;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire \size_cs_reg[11] ;
  wire \size_cs_reg[11]_0 ;
  wire \size_cs_reg[11]_1 ;

  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_sequential_icap_nstate_cs[2]_i_3 
       (.I0(scndry_out),
        .I1(icap_ce_cs),
        .O(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    cap_req_INST_0_i_1
       (.I0(icap_req_d),
        .I1(scndry_out),
        .I2(icap_req_d_reg_0),
        .O(icap_req_d_reg));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \size_cs[0]_i_4 
       (.I0(scndry_out),
        .I1(cap_rel),
        .I2(cap_gnt),
        .I3(\size_cs_reg[11] ),
        .I4(\size_cs_reg[11]_0 ),
        .I5(\size_cs_reg[11]_1 ),
        .O(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized1_19
   (\FSM_sequential_icap_nstate_cs_reg[1] ,
    scndry_out,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ,
    icap_nstate_ns129_out__1,
    \FSM_sequential_icap_nstate_cs[2]_i_4 ,
    cap_rel,
    cap_gnt,
    \FSM_sequential_icap_nstate_cs[0]_i_4 ,
    \FSM_sequential_icap_nstate_cs[0]_i_4_0 ,
    \FSM_sequential_icap_nstate_cs[2]_i_4_0 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ,
    s_axi_aclk);
  output \FSM_sequential_icap_nstate_cs_reg[1] ;
  output scndry_out;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  output icap_nstate_ns129_out__1;
  input [3:0]\FSM_sequential_icap_nstate_cs[2]_i_4 ;
  input cap_rel;
  input cap_gnt;
  input \FSM_sequential_icap_nstate_cs[0]_i_4 ;
  input \FSM_sequential_icap_nstate_cs[0]_i_4_0 ;
  input \FSM_sequential_icap_nstate_cs[2]_i_4_0 ;
  input [0:0]\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  input s_axi_aclk;

  wire \FSM_sequential_icap_nstate_cs[0]_i_4 ;
  wire \FSM_sequential_icap_nstate_cs[0]_i_4_0 ;
  wire [3:0]\FSM_sequential_icap_nstate_cs[2]_i_4 ;
  wire \FSM_sequential_icap_nstate_cs[2]_i_4_0 ;
  wire \FSM_sequential_icap_nstate_cs[2]_i_7_n_0 ;
  wire \FSM_sequential_icap_nstate_cs_reg[1] ;
  wire [0:0]\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  wire cap_gnt;
  wire cap_rel;
  wire icap_nstate_ns129_out__1;
  wire s_axi_aclk;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;

  LUT3 #(
    .INIT(8'h01)) 
    \FSM_sequential_icap_nstate_cs[0]_i_6 
       (.I0(scndry_out),
        .I1(\FSM_sequential_icap_nstate_cs[0]_i_4_0 ),
        .I2(\FSM_sequential_icap_nstate_cs[2]_i_4_0 ),
        .O(icap_nstate_ns129_out__1));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \FSM_sequential_icap_nstate_cs[0]_i_7 
       (.I0(\FSM_sequential_icap_nstate_cs[2]_i_4 [1]),
        .I1(cap_rel),
        .I2(cap_gnt),
        .I3(\FSM_sequential_icap_nstate_cs[0]_i_4 ),
        .I4(scndry_out),
        .I5(\FSM_sequential_icap_nstate_cs[0]_i_4_0 ),
        .O(\FSM_sequential_icap_nstate_cs_reg[1] ));
  LUT6 #(
    .INIT(64'hF0F0E0E0F0F0F0FF)) 
    \FSM_sequential_icap_nstate_cs[2]_i_6 
       (.I0(\FSM_sequential_icap_nstate_cs[0]_i_4_0 ),
        .I1(scndry_out),
        .I2(\FSM_sequential_icap_nstate_cs[2]_i_4 [2]),
        .I3(\FSM_sequential_icap_nstate_cs[2]_i_7_n_0 ),
        .I4(\FSM_sequential_icap_nstate_cs[2]_i_4_0 ),
        .I5(\FSM_sequential_icap_nstate_cs[2]_i_4 [3]),
        .O(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEFFFFF)) 
    \FSM_sequential_icap_nstate_cs[2]_i_7 
       (.I0(\FSM_sequential_icap_nstate_cs[2]_i_4 [0]),
        .I1(cap_rel),
        .I2(cap_gnt),
        .I3(\FSM_sequential_icap_nstate_cs[0]_i_4 ),
        .I4(scndry_out),
        .I5(\FSM_sequential_icap_nstate_cs[0]_i_4_0 ),
        .O(\FSM_sequential_icap_nstate_cs[2]_i_7_n_0 ));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized1_20
   (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ,
    scndry_out,
    \xpm_fifo_instance.xpm_fifo_async_inst_i_4 ,
    cap_rel,
    cap_gnt,
    prmry_in,
    \xpm_fifo_instance.xpm_fifo_async_inst_i_4_0 ,
    \xpm_fifo_instance.xpm_fifo_async_inst_i_5_0 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ,
    s_axi_aclk);
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  output scndry_out;
  input \xpm_fifo_instance.xpm_fifo_async_inst_i_4 ;
  input cap_rel;
  input cap_gnt;
  input prmry_in;
  input [0:0]\xpm_fifo_instance.xpm_fifo_async_inst_i_4_0 ;
  input \xpm_fifo_instance.xpm_fifo_async_inst_i_5_0 ;
  input [0:0]\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  input s_axi_aclk;

  wire [0:0]\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  wire cap_gnt;
  wire cap_rel;
  wire \icap_statemachine_I1/eqOp16_in ;
  wire prmry_in;
  wire s_axi_aclk;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_i_4 ;
  wire [0:0]\xpm_fifo_instance.xpm_fifo_async_inst_i_4_0 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_i_5_0 ;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \xpm_fifo_instance.xpm_fifo_async_inst_i_5 
       (.I0(\icap_statemachine_I1/eqOp16_in ),
        .I1(\xpm_fifo_instance.xpm_fifo_async_inst_i_4 ),
        .I2(cap_rel),
        .I3(cap_gnt),
        .I4(prmry_in),
        .I5(\xpm_fifo_instance.xpm_fifo_async_inst_i_4_0 ),
        .O(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \xpm_fifo_instance.xpm_fifo_async_inst_i_7 
       (.I0(scndry_out),
        .I1(\xpm_fifo_instance.xpm_fifo_async_inst_i_5_0 ),
        .O(\icap_statemachine_I1/eqOp16_in ));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized1_21
   (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ,
    p_1_in2_in,
    \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ,
    s_axi_wdata,
    empty,
    s_axi_aclk);
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  input p_1_in2_in;
  input \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ;
  input [0:0]s_axi_wdata;
  input empty;
  input s_axi_aclk;

  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  wire \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ;
  wire empty;
  wire p_1_in2_in;
  wire s_axi_aclk;
  wire [0:0]s_axi_wdata;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire wrfifo_empty;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(empty),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(wrfifo_empty),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hEBEE)) 
    \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg[2]_i_1 
       (.I0(wrfifo_empty),
        .I1(p_1_in2_in),
        .I2(\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ),
        .I3(s_axi_wdata),
        .O(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized2
   (\RD_FIFO.fifo_full_mask_reg ,
    scndry_out,
    fifo_full_mask,
    rdfifo_full_d1,
    fifo_rst,
    abort_onreset,
    \RD_FIFO.fifo_full_mask_reg_0 ,
    prmry_in,
    s_axi_aclk);
  output \RD_FIFO.fifo_full_mask_reg ;
  output scndry_out;
  input fifo_full_mask;
  input rdfifo_full_d1;
  input fifo_rst;
  input abort_onreset;
  input \RD_FIFO.fifo_full_mask_reg_0 ;
  input prmry_in;
  input s_axi_aclk;

  wire \RD_FIFO.fifo_full_mask_reg ;
  wire \RD_FIFO.fifo_full_mask_reg_0 ;
  wire abort_onreset;
  wire fifo_full_mask;
  wire fifo_rst;
  wire prmry_in;
  wire rdfifo_full_d1;
  wire s_axi_aclk;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire scndry_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(prmry_in),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(scndry_out),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000000000AE)) 
    \RD_FIFO.fifo_full_mask_i_1 
       (.I0(fifo_full_mask),
        .I1(rdfifo_full_d1),
        .I2(scndry_out),
        .I3(fifo_rst),
        .I4(abort_onreset),
        .I5(\RD_FIFO.fifo_full_mask_reg_0 ),
        .O(\RD_FIFO.fifo_full_mask_reg ));
endmodule

(* ORIG_REF_NAME = "cdc_sync" *) 
module semicap_cdc_sync__parameterized3
   (rst,
    scndry_out,
    fifo_clear_for_iclk,
    prmry_in,
    s_axi_aclk);
  output rst;
  output scndry_out;
  input fifo_clear_for_iclk;
  input prmry_in;
  input s_axi_aclk;

  wire fifo_clear_for_iclk;
  wire prmry_in;
  wire rst;
  wire s_axi_aclk;
  wire s_level_out_d1_cdc_to;
  wire s_level_out_d2;
  wire s_level_out_d3;
  wire scndry_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(prmry_in),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d2 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d3 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(scndry_out),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \xpm_fifo_instance.xpm_fifo_async_inst_i_1__0 
       (.I0(fifo_clear_for_iclk),
        .I1(scndry_out),
        .O(rst));
endmodule

(* CHECK_LICENSE_TYPE = "fifo_mon_cmd,fifo_generator_v13_2_4,{}" *) (* ORIG_REF_NAME = "fifo_mon_cmd" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* x_core_info = "fifo_generator_v13_2_4,Vivado 2019.1.1" *) 
module semicap_fifo_mon_cmd
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    wr_rst_busy,
    rd_rst_busy);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input clk;
  input srst;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [7:0]din;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [7:0]dout;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [9:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [9:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "10" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "8" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "8" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "kintexu" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "6" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "4" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "1022" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "10" *) 
  (* C_RD_DEPTH = "1024" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "10" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "1" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "10" *) 
  (* C_WR_DEPTH = "1024" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "10" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  semicap_fifo_generator_v13_2_4__1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(NLW_U0_data_count_UNCONNECTED[9:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[9:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[9:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "fifo_mon_stat,fifo_generator_v13_2_4,{}" *) (* ORIG_REF_NAME = "fifo_mon_stat" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* x_core_info = "fifo_generator_v13_2_4,Vivado 2019.1.1" *) 
module semicap_fifo_mon_stat
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    wr_rst_busy,
    rd_rst_busy);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input clk;
  input srst;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [7:0]din;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [7:0]dout;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output wr_rst_busy;
  output rd_rst_busy;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [9:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [9:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "10" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "8" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "8" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "kintexu" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "6" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "4" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "1022" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "10" *) 
  (* C_RD_DEPTH = "1024" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "10" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "1" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "10" *) 
  (* C_WR_DEPTH = "1024" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "10" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  semicap_fifo_generator_v13_2_4 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(NLW_U0_data_count_UNCONNECTED[9:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[9:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[9:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "hipero_icap" *) 
module semicap_hipero_icap
   (fecc_crcerror,
    fecc_eccerrornotsingle,
    fecc_eccerrorsingle,
    fecc_endofframe,
    fecc_endofscan,
    fecc_far,
    icap_avail,
    icap_prdone,
    icap_prerror,
    icap_o,
    icap_clk,
    fecc_farsel,
    icap_csib,
    icap_rdwrb,
    icap_i);
  output fecc_crcerror;
  output fecc_eccerrornotsingle;
  output fecc_eccerrorsingle;
  output fecc_endofframe;
  output fecc_endofscan;
  output [25:0]fecc_far;
  output icap_avail;
  output icap_prdone;
  output icap_prerror;
  output [31:0]icap_o;
  input icap_clk;
  input [1:0]fecc_farsel;
  input icap_csib;
  input icap_rdwrb;
  input [31:0]icap_i;

  wire fecc_crcerror;
  wire fecc_eccerrornotsingle;
  wire fecc_eccerrorsingle;
  wire fecc_endofframe;
  wire fecc_endofscan;
  wire [25:0]fecc_far;
  wire [1:0]fecc_farsel;
  wire icap_avail;
  wire icap_clk;
  wire icap_csib;
  wire [31:0]icap_i;
  wire [31:0]icap_o;
  wire icap_prdone;
  wire icap_prerror;
  wire icap_rdwrb;
  wire NLW_cfg_frame_ecce3_ICAPBOTCLK_UNCONNECTED;

  (* box_type = "PRIMITIVE" *) 
  FRAME_ECCE3 cfg_frame_ecce3
       (.CRCERROR(fecc_crcerror),
        .ECCERRORNOTSINGLE(fecc_eccerrornotsingle),
        .ECCERRORSINGLE(fecc_eccerrorsingle),
        .ENDOFFRAME(fecc_endofframe),
        .ENDOFSCAN(fecc_endofscan),
        .FAR(fecc_far),
        .FARSEL(fecc_farsel),
        .ICAPBOTCLK(NLW_cfg_frame_ecce3_ICAPBOTCLK_UNCONNECTED),
        .ICAPTOPCLK(icap_clk));
  (* box_type = "PRIMITIVE" *) 
  ICAPE3 #(
    .DEVICE_ID(32'hFFFFFFFF),
    .ICAP_AUTO_SWITCH("DISABLE"),
    .SIM_CFG_FILE_NAME("NONE")) 
    cfg_icape3
       (.AVAIL(icap_avail),
        .CLK(icap_clk),
        .CSIB(icap_csib),
        .I(icap_i),
        .O(icap_o),
        .PRDONE(icap_prdone),
        .PRERROR(icap_prerror),
        .RDWRB(icap_rdwrb));
endmodule

(* ORIG_REF_NAME = "hwicap_shared" *) 
module semicap_hwicap_shared
   (wr_data_count,
    wr_en,
    dout,
    rd_data_count,
    out,
    icap_we_cs_reg,
    icap_o,
    intr_rst,
    bus2ip_reset,
    Q,
    ipbus_ack_fifo,
    ipbus_ack,
    busip_1,
    p_7_out,
    cap_req,
    IP2Bus_RdAck_reg,
    \gwdc.wr_data_count_i_reg[10] ,
    \AXI_HW_wdata[1] ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ,
    \RD_FIFO.fifo_full_mask_reg ,
    scndry_vect_out,
    scndry_out,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ,
    \Size_counter_i3_reg[0] ,
    \IP2Bus_Data_reg[0] ,
    s_axi_aclk,
    s_axi_wdata,
    icap_i,
    p_10_in,
    IP2Bus_RdAck0,
    p_11_in,
    IP2Bus_WrAck0,
    cap_rel,
    s_axi_aresetn,
    Bus_RNW_reg,
    p_7_in,
    p_8_in,
    intr2bus_rdack,
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ,
    \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ,
    p_1_in5_in,
    p_1_in2_in,
    p_1_in,
    cap_gnt,
    icap_avail,
    bus2ip_wrce,
    D);
  output [10:0]wr_data_count;
  output wr_en;
  output [31:0]dout;
  output [8:0]rd_data_count;
  output out;
  output icap_we_cs_reg;
  output [31:0]icap_o;
  output intr_rst;
  output bus2ip_reset;
  output [4:0]Q;
  output ipbus_ack_fifo;
  output ipbus_ack;
  output busip_1;
  output p_7_out;
  output cap_req;
  output IP2Bus_RdAck_reg;
  output \gwdc.wr_data_count_i_reg[10] ;
  output \AXI_HW_wdata[1] ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ;
  output \RD_FIFO.fifo_full_mask_reg ;
  output [31:0]scndry_vect_out;
  output scndry_out;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ;
  output [11:0]\Size_counter_i3_reg[0] ;
  output [31:0]\IP2Bus_Data_reg[0] ;
  input s_axi_aclk;
  input [31:0]s_axi_wdata;
  input [31:0]icap_i;
  input p_10_in;
  input IP2Bus_RdAck0;
  input p_11_in;
  input IP2Bus_WrAck0;
  input cap_rel;
  input s_axi_aresetn;
  input Bus_RNW_reg;
  input p_7_in;
  input p_8_in;
  input intr2bus_rdack;
  input \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ;
  input \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ;
  input p_1_in5_in;
  input p_1_in2_in;
  input p_1_in;
  input cap_gnt;
  input icap_avail;
  input [1:0]bus2ip_wrce;
  input [31:0]D;

  wire \AXI_HW_wdata[1] ;
  wire Bus_RNW_reg;
  wire [31:0]D;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ;
  wire GEN_BUS2ICAP_RESET_n_0;
  wire \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ;
  wire \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ;
  wire ICAP_Reset;
  wire [31:0]\IP2Bus_Data_reg[0] ;
  wire IP2Bus_RdAck0;
  wire IP2Bus_RdAck_reg;
  wire IP2Bus_WrAck0;
  wire IPIC_IF_I_n_103;
  wire IPIC_IF_I_n_105;
  wire IPIC_IF_I_n_106;
  wire IPIC_IF_I_n_109;
  wire IPIC_IF_I_n_110;
  wire IPIC_IF_I_n_111;
  wire IPIC_IF_I_n_112;
  wire [4:0]Q;
  wire \RD_FIFO.fifo_full_mask_reg ;
  wire Send_done_ns8_in;
  wire [11:0]\Size_counter_i3_reg[0] ;
  wire abort;
  wire abort_cs2;
  wire abort_del1;
  wire abort_del2;
  wire abort_del3;
  wire abort_detect_reg_n_0;
  wire bus2ip_reset;
  wire [1:0]bus2ip_wrce;
  wire busip_1;
  wire cap_gnt;
  wire cap_rel;
  wire cap_req;
  wire ce_del1;
  wire ce_del2;
  wire ce_del3;
  wire count_reset_cs;
  wire [31:0]dout;
  wire gate_icap_p;
  wire \gwdc.wr_data_count_i_reg[10] ;
  wire hang_status;
  wire icap_avail;
  wire icap_ce_cs;
  wire [31:0]icap_i;
  wire [3:0]icap_nstate_cs;
  wire icap_nstate_ns129_out__1;
  wire [31:0]icap_o;
  wire icap_rel_d2;
  wire icap_req_d;
  wire icap_statemachine_I1_n_60;
  wire icap_statemachine_I1_n_61;
  wire icap_statemachine_I1_n_62;
  wire [0:31]icap_status_i;
  wire icap_we_cs_reg;
  wire intr2bus_rdack;
  wire intr_rst;
  wire ipbus_ack;
  wire ipbus_ack_fifo;
  wire out;
  wire p_10_in;
  wire p_11_in;
  wire p_1_in;
  wire p_1_in2_in;
  wire p_1_in5_in;
  wire p_7_in;
  wire p_7_out;
  wire p_8_in;
  wire [8:0]rd_data_count;
  wire [0:31]rdfifo_datain;
  wire rdfifo_wren;
  wire rdwr_int1;
  wire read_en_qual;
  wire reset_cr;
  wire [0:1]rnc;
  wire s_axi_aclk;
  wire s_axi_aresetn;
  wire [31:0]s_axi_wdata;
  wire same_cycle;
  wire scndry_out;
  wire [31:0]scndry_vect_out;
  wire send_done;
  wire [0:11]size;
  wire [0:11]size_counter;
  wire [10:0]wr_data_count;
  wire wr_en;
  wire [0:31]wrfifo_dataout;
  wire writefifo_empty;

  semicap_cdc_sync__parameterized1 GEN_BUS2ICAP_RESET
       (.SR(GEN_BUS2ICAP_RESET_n_0),
        .count_reset_cs(count_reset_cs),
        .prmry_in(bus2ip_reset),
        .s_axi_aclk(s_axi_aclk),
        .scndry_out(ICAP_Reset));
  semicap_ipic_if IPIC_IF_I
       (.\AXI_HW_wdata[1] (\AXI_HW_wdata[1] ),
        .Bus_RNW_reg(Bus_RNW_reg),
        .D({wrfifo_dataout[0],wrfifo_dataout[1],wrfifo_dataout[2],wrfifo_dataout[3],wrfifo_dataout[4],wrfifo_dataout[5],wrfifo_dataout[6],wrfifo_dataout[7],wrfifo_dataout[8],wrfifo_dataout[9],wrfifo_dataout[10],wrfifo_dataout[11],wrfifo_dataout[12],wrfifo_dataout[13],wrfifo_dataout[14],wrfifo_dataout[15],wrfifo_dataout[16],wrfifo_dataout[17],wrfifo_dataout[18],wrfifo_dataout[19],wrfifo_dataout[20],wrfifo_dataout[21],wrfifo_dataout[22],wrfifo_dataout[23],wrfifo_dataout[24],wrfifo_dataout[25],wrfifo_dataout[26],wrfifo_dataout[27],wrfifo_dataout[28],wrfifo_dataout[29],wrfifo_dataout[30],wrfifo_dataout[31]}),
        .E(abort_cs2),
        .\FSM_sequential_icap_nstate_cs[2]_i_4 (icap_nstate_cs),
        .\FSM_sequential_icap_nstate_cs_reg[1] (IPIC_IF_I_n_110),
        .\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 (scndry_vect_out),
        .\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to ({size_counter[0],size_counter[1],size_counter[2],size_counter[3],size_counter[4],size_counter[5],size_counter[6],size_counter[7],size_counter[8],size_counter[9],size_counter[10],size_counter[11]}),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to (reset_cr),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 (hang_status),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 (IPIC_IF_I_n_103),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 (abort),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_2 (IPIC_IF_I_n_105),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_3 (IPIC_IF_I_n_106),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_4 (IPIC_IF_I_n_111),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_5 (scndry_out),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_6 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_7 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ),
        .\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] (\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ),
        .\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] (\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ),
        .\IP2Bus_Data_reg[0]_0 (\IP2Bus_Data_reg[0] ),
        .\IP2Bus_Data_reg[0]_1 (D),
        .IP2Bus_RdAck0(IP2Bus_RdAck0),
        .IP2Bus_RdAck_reg_0(IP2Bus_RdAck_reg),
        .IP2Bus_WrAck0(IP2Bus_WrAck0),
        .Q({rdfifo_datain[7],rdfifo_datain[6],rdfifo_datain[5],rdfifo_datain[4],rdfifo_datain[3],rdfifo_datain[2],rdfifo_datain[1],rdfifo_datain[0],rdfifo_datain[15],rdfifo_datain[14],rdfifo_datain[13],rdfifo_datain[12],rdfifo_datain[11],rdfifo_datain[10],rdfifo_datain[9],rdfifo_datain[8],rdfifo_datain[23],rdfifo_datain[22],rdfifo_datain[21],rdfifo_datain[20],rdfifo_datain[19],rdfifo_datain[18],rdfifo_datain[17],rdfifo_datain[16],rdfifo_datain[31],rdfifo_datain[30],rdfifo_datain[29],rdfifo_datain[28],rdfifo_datain[27],rdfifo_datain[26],rdfifo_datain[25],rdfifo_datain[24]}),
        .\RD_FIFO.fifo_full_mask_reg_0 (\RD_FIFO.fifo_full_mask_reg ),
        .SR(intr_rst),
        .Send_done_ns8_in(Send_done_ns8_in),
        .\Size_counter_i3_reg[0]_0 (\Size_counter_i3_reg[0] ),
        .areset_n(bus2ip_reset),
        .bus2ip_wrce(bus2ip_wrce),
        .busip_1(busip_1),
        .cap_gnt(cap_gnt),
        .cap_rel(cap_rel),
        .\cr_i_reg[0]_0 (Q),
        .dout(dout),
        .empty(writefifo_empty),
        .gate_icap_p(gate_icap_p),
        .\gen_pf_ic_rc.ram_empty_i_reg (IPIC_IF_I_n_109),
        .\gwdc.wr_data_count_i_reg[10] (\gwdc.wr_data_count_i_reg[10] ),
        .icap_avail(icap_avail),
        .icap_ce_cs(icap_ce_cs),
        .icap_nstate_ns129_out__1(icap_nstate_ns129_out__1),
        .icap_rel_d2(icap_rel_d2),
        .icap_req_d(icap_req_d),
        .icap_req_d_reg(IPIC_IF_I_n_112),
        .intr2bus_rdack(intr2bus_rdack),
        .ipbus_ack(ipbus_ack),
        .ipbus_ack_fifo(ipbus_ack_fifo),
        .p_10_in(p_10_in),
        .p_11_in(p_11_in),
        .p_1_in(p_1_in),
        .p_1_in2_in(p_1_in2_in),
        .p_1_in5_in(p_1_in5_in),
        .p_7_in(p_7_in),
        .p_7_out(p_7_out),
        .p_8_in(p_8_in),
        .prmry_in(send_done),
        .rd_data_count(rd_data_count),
        .rd_en(read_en_qual),
        .rdfifo_wren(rdfifo_wren),
        .rnc(rnc),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_wdata(s_axi_wdata),
        .scndry_out(ICAP_Reset),
        .scndry_vect_out({size[0],size[1],size[2],size[3],size[4],size[5],size[6],size[7],size[8],size[9],size[10],size[11]}),
        .\sr_i_reg[0]_0 ({icap_status_i[0],icap_status_i[1],icap_status_i[2],icap_status_i[3],icap_status_i[4],icap_status_i[5],icap_status_i[6],icap_status_i[7],icap_status_i[8],icap_status_i[9],icap_status_i[10],icap_status_i[11],icap_status_i[12],icap_status_i[13],icap_status_i[14],icap_status_i[15],icap_status_i[16],icap_status_i[17],icap_status_i[18],icap_status_i[19],icap_status_i[20],icap_status_i[21],icap_status_i[22],icap_status_i[23],icap_status_i[24],icap_status_i[25],icap_status_i[26],icap_status_i[27],icap_status_i[28],icap_status_i[29],icap_status_i[30],icap_status_i[31]}),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en));
  FDRE abort_del1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(abort_detect_reg_n_0),
        .Q(abort_del1),
        .R(ICAP_Reset));
  FDRE abort_del2_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(abort_del1),
        .Q(abort_del2),
        .R(ICAP_Reset));
  FDRE abort_del3_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(abort_del2),
        .Q(abort_del3),
        .R(ICAP_Reset));
  FDRE abort_detect_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_statemachine_I1_n_60),
        .Q(abort_detect_reg_n_0),
        .R(1'b0));
  FDRE ce_del1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(out),
        .Q(ce_del1),
        .R(ICAP_Reset));
  FDRE ce_del2_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(ce_del1),
        .Q(ce_del2),
        .R(ICAP_Reset));
  FDRE ce_del3_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(ce_del2),
        .Q(ce_del3),
        .R(ICAP_Reset));
  semicap_icap_statemachine_shared icap_statemachine_I1
       (.D({wrfifo_dataout[0],wrfifo_dataout[1],wrfifo_dataout[2],wrfifo_dataout[3],wrfifo_dataout[4],wrfifo_dataout[5],wrfifo_dataout[6],wrfifo_dataout[7],wrfifo_dataout[8],wrfifo_dataout[9],wrfifo_dataout[10],wrfifo_dataout[11],wrfifo_dataout[12],wrfifo_dataout[13],wrfifo_dataout[14],wrfifo_dataout[15],wrfifo_dataout[16],wrfifo_dataout[17],wrfifo_dataout[18],wrfifo_dataout[19],wrfifo_dataout[20],wrfifo_dataout[21],wrfifo_dataout[22],wrfifo_dataout[23],wrfifo_dataout[24],wrfifo_dataout[25],wrfifo_dataout[26],wrfifo_dataout[27],wrfifo_dataout[28],wrfifo_dataout[29],wrfifo_dataout[30],wrfifo_dataout[31]}),
        .E(abort_cs2),
        .\FSM_sequential_icap_nstate_cs_reg[0]_0 (IPIC_IF_I_n_110),
        .\FSM_sequential_icap_nstate_cs_reg[1]_0 (IPIC_IF_I_n_109),
        .\FSM_sequential_icap_nstate_cs_reg[2]_0 (IPIC_IF_I_n_105),
        .\FSM_sequential_icap_nstate_cs_reg[2]_1 (IPIC_IF_I_n_111),
        .Q(icap_nstate_cs),
        .SR(GEN_BUS2ICAP_RESET_n_0),
        .Send_done_ns8_in(Send_done_ns8_in),
        .abort_del1(abort_del1),
        .abort_del2(abort_del2),
        .abort_del3(abort_del3),
        .abort_detect_reg(icap_statemachine_I1_n_60),
        .abort_detect_reg_0(abort_detect_reg_n_0),
        .abort_i_cs_reg_0(abort),
        .cap_rel(cap_rel),
        .cap_req(cap_req),
        .ce_del3(ce_del3),
        .count_reset_cs(count_reset_cs),
        .empty(writefifo_empty),
        .gate_icap_p(gate_icap_p),
        .hang_status_cs_reg_0(hang_status),
        .icap_ce_cs(icap_ce_cs),
        .icap_ce_cs_reg_0(icap_statemachine_I1_n_61),
        .\icap_dataout_i_reg[0]_0 ({rdfifo_datain[7],rdfifo_datain[6],rdfifo_datain[5],rdfifo_datain[4],rdfifo_datain[3],rdfifo_datain[2],rdfifo_datain[1],rdfifo_datain[0],rdfifo_datain[15],rdfifo_datain[14],rdfifo_datain[13],rdfifo_datain[12],rdfifo_datain[11],rdfifo_datain[10],rdfifo_datain[9],rdfifo_datain[8],rdfifo_datain[23],rdfifo_datain[22],rdfifo_datain[21],rdfifo_datain[20],rdfifo_datain[19],rdfifo_datain[18],rdfifo_datain[17],rdfifo_datain[16],rdfifo_datain[31],rdfifo_datain[30],rdfifo_datain[29],rdfifo_datain[28],rdfifo_datain[27],rdfifo_datain[26],rdfifo_datain[25],rdfifo_datain[24]}),
        .icap_i(icap_i),
        .icap_nstate_ns129_out__1(icap_nstate_ns129_out__1),
        .icap_o(icap_o),
        .icap_rel_d2(icap_rel_d2),
        .icap_req_d(icap_req_d),
        .icap_req_d_reg_0(IPIC_IF_I_n_112),
        .\icap_status_i_reg[0]_0 ({icap_status_i[0],icap_status_i[1],icap_status_i[2],icap_status_i[3],icap_status_i[4],icap_status_i[5],icap_status_i[6],icap_status_i[7],icap_status_i[8],icap_status_i[9],icap_status_i[10],icap_status_i[11],icap_status_i[12],icap_status_i[13],icap_status_i[14],icap_status_i[15],icap_status_i[16],icap_status_i[17],icap_status_i[18],icap_status_i[19],icap_status_i[20],icap_status_i[21],icap_status_i[22],icap_status_i[23],icap_status_i[24],icap_status_i[25],icap_status_i[26],icap_status_i[27],icap_status_i[28],icap_status_i[29],icap_status_i[30],icap_status_i[31]}),
        .icap_we_cs_reg_0(icap_we_cs_reg),
        .icap_we_cs_reg_1(icap_statemachine_I1_n_62),
        .out(out),
        .prmry_in(send_done),
        .rd_en(read_en_qual),
        .rdfifo_wren(rdfifo_wren),
        .rdwr_int1(rdwr_int1),
        .reset_cr_cs_reg_0(reset_cr),
        .rnc(rnc),
        .s_axi_aclk(s_axi_aclk),
        .same_cycle(same_cycle),
        .scndry_out(ICAP_Reset),
        .scndry_vect_out({size[0],size[1],size[2],size[3],size[4],size[5],size[6],size[7],size[8],size[9],size[10],size[11]}),
        .\size_cs_reg[0]_0 ({size_counter[0],size_counter[1],size_counter[2],size_counter[3],size_counter[4],size_counter[5],size_counter[6],size_counter[7],size_counter[8],size_counter[9],size_counter[10],size_counter[11]}),
        .\size_cs_reg[11]_0 (IPIC_IF_I_n_106),
        .\xpm_fifo_instance.xpm_fifo_async_inst_i_3__0_0 (IPIC_IF_I_n_103));
  FDSE rdwr_int1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_statemachine_I1_n_62),
        .Q(rdwr_int1),
        .S(ICAP_Reset));
  FDRE same_cycle_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_statemachine_I1_n_61),
        .Q(same_cycle),
        .R(ICAP_Reset));
endmodule

(* ORIG_REF_NAME = "icapArbiter" *) 
module semicap_icapArbiter
   (oHwIcapGrant,
    areset_n,
    oSemCapGrant,
    oConfigRegSemEn,
    oHwIcapRelinquish,
    oSemCapRelinquish,
    iClk,
    iRst_n,
    iSemCapRequest,
    iConfigRegSemEn,
    iHwIcapRequest);
  output oHwIcapGrant;
  output areset_n;
  output oSemCapGrant;
  output oConfigRegSemEn;
  output oHwIcapRelinquish;
  output oSemCapRelinquish;
  input iClk;
  input iRst_n;
  input iSemCapRequest;
  input iConfigRegSemEn;
  input iHwIcapRequest;

  wire areset_n;
  wire iClk;
  wire iConfigRegSemEn;
  wire iHwIcapRequest;
  wire iRst_n;
  wire iSemCapRequest;
  wire oConfigRegSemEn;
  wire oHwIcapGrant;
  wire oHwIcapRelinquish;
  wire oSemCapGrant;
  wire oSemCapRelinquish;
  wire \r[extCapRelinquish]_i_1_n_0 ;
  wire \r[semCapGrant]_i_1_n_0 ;
  wire \r[semCapRelinquish]_i_1_n_0 ;
  wire \r[semEnStat]_i_1_n_0 ;
  wire [0:0]\r_reg[state] ;
  wire \vr[extCapGrant] ;
  wire \vr[extCapRelinquish] ;
  wire \vr[semEnStat]__0 ;
  wire [2:0]\vr[state] ;
  wire \vr[state]_inferred__2/i__n_0 ;

  LUT6 #(
    .INIT(64'h445410005555FFFF)) 
    \FSM_sequential_r[state][0]_i_1 
       (.I0(\vr[extCapRelinquish] ),
        .I1(iHwIcapRequest),
        .I2(iSemCapRequest),
        .I3(iConfigRegSemEn),
        .I4(\vr[extCapGrant] ),
        .I5(\r_reg[state] ),
        .O(\vr[state] [0]));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT4 #(
    .INIT(16'h5510)) 
    \FSM_sequential_r[state][1]_i_1 
       (.I0(\vr[extCapRelinquish] ),
        .I1(\r_reg[state] ),
        .I2(\vr[extCapGrant] ),
        .I3(iHwIcapRequest),
        .O(\vr[state] [1]));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT5 #(
    .INIT(32'h02000000)) 
    \FSM_sequential_r[state][2]_i_1 
       (.I0(iSemCapRequest),
        .I1(iHwIcapRequest),
        .I2(\vr[extCapRelinquish] ),
        .I3(\r_reg[state] ),
        .I4(\vr[extCapGrant] ),
        .O(\vr[state] [2]));
  (* FSM_ENCODED_STATES = "stgranttoext:011,strelinquishext:100,iSTATE:101,strelinquishsem:010,stidle:000,stgranttosem:001" *) 
  FDCE \FSM_sequential_r_reg[state][0] 
       (.C(iClk),
        .CE(\vr[state]_inferred__2/i__n_0 ),
        .CLR(areset_n),
        .D(\vr[state] [0]),
        .Q(\r_reg[state] ));
  (* FSM_ENCODED_STATES = "stgranttoext:011,strelinquishext:100,iSTATE:101,strelinquishsem:010,stidle:000,stgranttosem:001" *) 
  FDCE \FSM_sequential_r_reg[state][1] 
       (.C(iClk),
        .CE(\vr[state]_inferred__2/i__n_0 ),
        .CLR(areset_n),
        .D(\vr[state] [1]),
        .Q(\vr[extCapGrant] ));
  (* FSM_ENCODED_STATES = "stgranttoext:011,strelinquishext:100,iSTATE:101,strelinquishsem:010,stidle:000,stgranttosem:001" *) 
  FDCE \FSM_sequential_r_reg[state][2] 
       (.C(iClk),
        .CE(\vr[state]_inferred__2/i__n_0 ),
        .CLR(areset_n),
        .D(\vr[state] [2]),
        .Q(\vr[extCapRelinquish] ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT4 #(
    .INIT(16'h8A8C)) 
    \r[extCapRelinquish]_i_1 
       (.I0(oHwIcapRelinquish),
        .I1(\vr[extCapRelinquish] ),
        .I2(\r_reg[state] ),
        .I3(\vr[extCapGrant] ),
        .O(\r[extCapRelinquish]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r[semCapGrant]_i_1 
       (.I0(\r_reg[state] ),
        .I1(\vr[extCapGrant] ),
        .O(\r[semCapGrant]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT4 #(
    .INIT(16'h88B8)) 
    \r[semCapRelinquish]_i_1 
       (.I0(oSemCapRelinquish),
        .I1(\vr[extCapRelinquish] ),
        .I2(\vr[extCapGrant] ),
        .I3(\r_reg[state] ),
        .O(\r[semCapRelinquish]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h45)) 
    \r[semEnStat]_i_1 
       (.I0(\vr[extCapRelinquish] ),
        .I1(\r_reg[state] ),
        .I2(\vr[extCapGrant] ),
        .O(\r[semEnStat]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r[semEnStat]_i_2 
       (.I0(iRst_n),
        .O(areset_n));
  FDCE \r_reg[extCapGrant] 
       (.C(iClk),
        .CE(\r[semEnStat]_i_1_n_0 ),
        .CLR(areset_n),
        .D(\vr[extCapGrant] ),
        .Q(oHwIcapGrant));
  FDCE \r_reg[extCapRelinquish] 
       (.C(iClk),
        .CE(1'b1),
        .CLR(areset_n),
        .D(\r[extCapRelinquish]_i_1_n_0 ),
        .Q(oHwIcapRelinquish));
  FDCE \r_reg[semCapGrant] 
       (.C(iClk),
        .CE(\r[semEnStat]_i_1_n_0 ),
        .CLR(areset_n),
        .D(\r[semCapGrant]_i_1_n_0 ),
        .Q(oSemCapGrant));
  FDCE \r_reg[semCapRelinquish] 
       (.C(iClk),
        .CE(1'b1),
        .CLR(areset_n),
        .D(\r[semCapRelinquish]_i_1_n_0 ),
        .Q(oSemCapRelinquish));
  FDCE \r_reg[semEnStat] 
       (.C(iClk),
        .CE(\r[semEnStat]_i_1_n_0 ),
        .CLR(areset_n),
        .D(\vr[semEnStat]__0 ),
        .Q(oConfigRegSemEn));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \vr[semEnStat] 
       (.I0(\vr[extCapGrant] ),
        .I1(iConfigRegSemEn),
        .I2(\r_reg[state] ),
        .O(\vr[semEnStat]__0 ));
  LUT6 #(
    .INIT(64'hFFFFF05FFFD8FF58)) 
    \vr[state]_inferred__2/i_ 
       (.I0(iSemCapRequest),
        .I1(iConfigRegSemEn),
        .I2(\vr[extCapGrant] ),
        .I3(\vr[extCapRelinquish] ),
        .I4(\r_reg[state] ),
        .I5(iHwIcapRequest),
        .O(\vr[state]_inferred__2/i__n_0 ));
endmodule

(* ORIG_REF_NAME = "icap_statemachine_shared" *) 
module semicap_icap_statemachine_shared
   (icap_ce_cs,
    out,
    icap_we_cs_reg_0,
    icap_o,
    E,
    icap_rel_d2,
    icap_req_d,
    cap_req,
    rdfifo_wren,
    reset_cr_cs_reg_0,
    count_reset_cs,
    prmry_in,
    hang_status_cs_reg_0,
    Q,
    \size_cs_reg[0]_0 ,
    abort_detect_reg,
    icap_ce_cs_reg_0,
    icap_we_cs_reg_1,
    rd_en,
    \icap_status_i_reg[0]_0 ,
    \icap_dataout_i_reg[0]_0 ,
    icap_i,
    s_axi_aclk,
    empty,
    scndry_out,
    cap_rel,
    abort_i_cs_reg_0,
    gate_icap_p,
    scndry_vect_out,
    abort_detect_reg_0,
    same_cycle,
    rdwr_int1,
    ce_del3,
    abort_del1,
    abort_del2,
    abort_del3,
    \size_cs_reg[11]_0 ,
    \FSM_sequential_icap_nstate_cs_reg[1]_0 ,
    \FSM_sequential_icap_nstate_cs_reg[0]_0 ,
    \FSM_sequential_icap_nstate_cs_reg[2]_0 ,
    \FSM_sequential_icap_nstate_cs_reg[2]_1 ,
    icap_req_d_reg_0,
    Send_done_ns8_in,
    \xpm_fifo_instance.xpm_fifo_async_inst_i_3__0_0 ,
    rnc,
    icap_nstate_ns129_out__1,
    SR,
    D);
  output icap_ce_cs;
  output out;
  output icap_we_cs_reg_0;
  output [31:0]icap_o;
  output [0:0]E;
  output icap_rel_d2;
  output icap_req_d;
  output cap_req;
  output rdfifo_wren;
  output reset_cr_cs_reg_0;
  output count_reset_cs;
  output prmry_in;
  output hang_status_cs_reg_0;
  output [3:0]Q;
  output [11:0]\size_cs_reg[0]_0 ;
  output abort_detect_reg;
  output icap_ce_cs_reg_0;
  output icap_we_cs_reg_1;
  output rd_en;
  output [31:0]\icap_status_i_reg[0]_0 ;
  output [31:0]\icap_dataout_i_reg[0]_0 ;
  input [31:0]icap_i;
  input s_axi_aclk;
  input empty;
  input scndry_out;
  input cap_rel;
  input abort_i_cs_reg_0;
  input gate_icap_p;
  input [11:0]scndry_vect_out;
  input abort_detect_reg_0;
  input same_cycle;
  input rdwr_int1;
  input ce_del3;
  input abort_del1;
  input abort_del2;
  input abort_del3;
  input \size_cs_reg[11]_0 ;
  input \FSM_sequential_icap_nstate_cs_reg[1]_0 ;
  input \FSM_sequential_icap_nstate_cs_reg[0]_0 ;
  input \FSM_sequential_icap_nstate_cs_reg[2]_0 ;
  input \FSM_sequential_icap_nstate_cs_reg[2]_1 ;
  input icap_req_d_reg_0;
  input Send_done_ns8_in;
  input \xpm_fifo_instance.xpm_fifo_async_inst_i_3__0_0 ;
  input [0:1]rnc;
  input icap_nstate_ns129_out__1;
  input [0:0]SR;
  input [31:0]D;

  wire [31:0]D;
  wire [0:0]E;
  wire \FSM_sequential_icap_nstate_cs[0]_i_1_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[0]_i_2_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[0]_i_3_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[0]_i_4_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[0]_i_5_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[1]_i_1_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[1]_i_2_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[1]_i_3_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[1]_i_4_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[1]_i_5_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[1]_i_6_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[2]_i_1_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[2]_i_2_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[2]_i_4_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[2]_i_5_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[3]_i_1_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[3]_i_2_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[3]_i_3_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[3]_i_4_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[3]_i_5_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[3]_i_6_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[3]_i_8_n_0 ;
  wire \FSM_sequential_icap_nstate_cs[3]_i_9_n_0 ;
  wire \FSM_sequential_icap_nstate_cs_reg[0]_0 ;
  wire \FSM_sequential_icap_nstate_cs_reg[1]_0 ;
  wire \FSM_sequential_icap_nstate_cs_reg[2]_0 ;
  wire \FSM_sequential_icap_nstate_cs_reg[2]_1 ;
  wire Icap_busy_inferred_i_2_n_0;
  wire [3:0]Q;
  wire [0:0]SR;
  wire Send_done_cs_i_1_n_0;
  wire Send_done_cs_i_2_n_0;
  wire Send_done_cs_i_3_n_0;
  wire Send_done_ns8_in;
  wire Wrfifo_empty_r;
  wire Wrfifo_empty_r1;
  wire abort_cs;
  wire abort_del1;
  wire abort_del2;
  wire abort_del3;
  wire abort_detect_reg;
  wire abort_detect_reg_0;
  wire abort_i_cs;
  wire abort_i_cs2;
  wire abort_i_cs_i_2_n_0;
  wire abort_i_cs_i_3_n_0;
  wire abort_i_cs_reg_0;
  wire abort_i_ns;
  wire abort_ns;
  wire cap_rel;
  wire cap_req;
  wire ce_del3;
  wire [2:0]count;
  wire count0;
  wire count_enable_cs;
  wire count_enable_cs_i_1_n_0;
  wire count_enable_cs_i_2_n_0;
  wire count_reset_cs;
  wire count_reset_cs_i_1_n_0;
  wire count_reset_cs_i_2_n_0;
  wire count_reset_cs_i_3_n_0;
  wire empty;
  wire eqOp20_in;
  wire eqOp3_in;
  wire gate_icap_p;
  wire gtOp;
  wire gtOp_carry_i_10_n_0;
  wire gtOp_carry_i_11_n_0;
  wire gtOp_carry_i_12_n_0;
  wire gtOp_carry_i_1_n_0;
  wire gtOp_carry_i_2_n_0;
  wire gtOp_carry_i_3_n_0;
  wire gtOp_carry_i_4_n_0;
  wire gtOp_carry_i_5_n_0;
  wire gtOp_carry_i_6_n_0;
  wire gtOp_carry_i_7_n_0;
  wire gtOp_carry_i_8_n_0;
  wire gtOp_carry_i_9_n_0;
  wire gtOp_carry_n_3;
  wire gtOp_carry_n_4;
  wire gtOp_carry_n_5;
  wire gtOp_carry_n_6;
  wire gtOp_carry_n_7;
  wire hang_status_cs_i_1_n_0;
  wire hang_status_cs_i_2_n_0;
  wire hang_status_cs_i_4_n_0;
  wire hang_status_cs_reg_0;
  wire icap_ce_cs_i_1_n_0;
  wire icap_ce_cs_i_2_n_0;
  wire icap_ce_cs_i_3_n_0;
  wire icap_ce_cs_i_5_n_0;
  wire icap_ce_cs_i_6_n_0;
  wire icap_ce_cs_reg_0;
  wire icap_ce_ns;
  wire [31:0]\icap_dataout_i_reg[0]_0 ;
  (* RTL_KEEP = "true" *) wire [31:0]icap_i;
  wire icap_nstate_ns129_out__1;
  (* RTL_KEEP = "true" *) wire [31:0]icap_o;
  wire icap_rel_d1;
  wire icap_rel_d2;
  wire icap_req_d;
  wire icap_req_d_reg_0;
  wire [31:0]\icap_status_i_reg[0]_0 ;
  wire icap_we_cs_i_1_n_0;
  wire icap_we_cs_i_2_n_0;
  (* RTL_KEEP = "true" *) wire icap_we_cs_reg_0;
  wire icap_we_cs_reg_1;
  wire [0:31]int1;
  (* RTL_KEEP = "true" *) wire out;
  (* RTL_KEEP = "true" *) wire p_0_in;
  wire [2:0]plusOp;
  wire prmry_in;
  wire rd_en;
  wire rdfifo_wren;
  wire rdfifo_wren_ns;
  wire rdwr_int1;
  wire reset_cr_cs_i_2_n_0;
  wire reset_cr_cs_reg_0;
  wire reset_cr_ns;
  wire [0:1]rnc;
  wire s_axi_aclk;
  wire same_cycle;
  wire scndry_out;
  wire [11:0]scndry_vect_out;
  wire \size_cs[0]_i_3_n_0 ;
  wire \size_cs[0]_i_5_n_0 ;
  wire \size_cs[2]_i_2_n_0 ;
  wire \size_cs[3]_i_2_n_0 ;
  wire \size_cs[6]_i_2_n_0 ;
  wire \size_cs[7]_i_2_n_0 ;
  wire [11:0]\size_cs_reg[0]_0 ;
  wire \size_cs_reg[11]_0 ;
  wire size_ns;
  wire [0:11]size_ns0_in;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_i_3__0_0 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_i_4_n_0 ;
  wire \xpm_fifo_instance.xpm_fifo_async_inst_i_6_n_0 ;
  wire [7:6]NLW_gtOp_carry_CO_UNCONNECTED;
  wire [7:0]NLW_gtOp_carry_O_UNCONNECTED;

  assign icap_ce_cs = out;
  LUT6 #(
    .INIT(64'hEFEAEFEAAFAAEFEA)) 
    \FSM_sequential_icap_nstate_cs[0]_i_1 
       (.I0(\FSM_sequential_icap_nstate_cs[0]_i_2_n_0 ),
        .I1(\FSM_sequential_icap_nstate_cs[0]_i_3_n_0 ),
        .I2(Q[0]),
        .I3(\FSM_sequential_icap_nstate_cs[0]_i_4_n_0 ),
        .I4(Q[1]),
        .I5(\FSM_sequential_icap_nstate_cs[0]_i_5_n_0 ),
        .O(\FSM_sequential_icap_nstate_cs[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0300CC88)) 
    \FSM_sequential_icap_nstate_cs[0]_i_2 
       (.I0(p_0_in),
        .I1(Q[1]),
        .I2(icap_nstate_ns129_out__1),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(\FSM_sequential_icap_nstate_cs[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h4444044411111111)) 
    \FSM_sequential_icap_nstate_cs[0]_i_3 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(\FSM_sequential_icap_nstate_cs_reg[2]_0 ),
        .I3(gtOp),
        .I4(gate_icap_p),
        .I5(Q[2]),
        .O(\FSM_sequential_icap_nstate_cs[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFAFAFEFEFFFFA)) 
    \FSM_sequential_icap_nstate_cs[0]_i_4 
       (.I0(\FSM_sequential_icap_nstate_cs_reg[0]_0 ),
        .I1(Wrfifo_empty_r1),
        .I2(Q[1]),
        .I3(abort_i_cs_reg_0),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(\FSM_sequential_icap_nstate_cs[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF7FFFFFFF)) 
    \FSM_sequential_icap_nstate_cs[0]_i_5 
       (.I0(gtOp),
        .I1(count[1]),
        .I2(count[2]),
        .I3(count[0]),
        .I4(p_0_in),
        .I5(gate_icap_p),
        .O(\FSM_sequential_icap_nstate_cs[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h7774FFFF77740000)) 
    \FSM_sequential_icap_nstate_cs[1]_i_1 
       (.I0(\FSM_sequential_icap_nstate_cs[1]_i_2_n_0 ),
        .I1(Q[3]),
        .I2(\FSM_sequential_icap_nstate_cs[1]_i_3_n_0 ),
        .I3(\FSM_sequential_icap_nstate_cs[1]_i_4_n_0 ),
        .I4(Q[0]),
        .I5(\FSM_sequential_icap_nstate_cs[1]_i_5_n_0 ),
        .O(\FSM_sequential_icap_nstate_cs[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_sequential_icap_nstate_cs[1]_i_2 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\FSM_sequential_icap_nstate_cs[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0151000000000000)) 
    \FSM_sequential_icap_nstate_cs[1]_i_3 
       (.I0(\FSM_sequential_icap_nstate_cs_reg[2]_0 ),
        .I1(eqOp20_in),
        .I2(p_0_in),
        .I3(eqOp3_in),
        .I4(gtOp),
        .I5(Q[2]),
        .O(\FSM_sequential_icap_nstate_cs[1]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hB8CC)) 
    \FSM_sequential_icap_nstate_cs[1]_i_4 
       (.I0(gate_icap_p),
        .I1(Q[2]),
        .I2(p_0_in),
        .I3(Q[1]),
        .O(\FSM_sequential_icap_nstate_cs[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAABAA)) 
    \FSM_sequential_icap_nstate_cs[1]_i_5 
       (.I0(\FSM_sequential_icap_nstate_cs[1]_i_6_n_0 ),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(\FSM_sequential_icap_nstate_cs_reg[1]_0 ),
        .I4(Q[3]),
        .I5(abort_i_cs_reg_0),
        .O(\FSM_sequential_icap_nstate_cs[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h01010000FFF00000)) 
    \FSM_sequential_icap_nstate_cs[1]_i_6 
       (.I0(\FSM_sequential_icap_nstate_cs_reg[2]_0 ),
        .I1(Wrfifo_empty_r1),
        .I2(Q[3]),
        .I3(empty),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(\FSM_sequential_icap_nstate_cs[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFAAAEAAAEAAAE)) 
    \FSM_sequential_icap_nstate_cs[2]_i_1 
       (.I0(\FSM_sequential_icap_nstate_cs[2]_i_2_n_0 ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(\FSM_sequential_icap_nstate_cs_reg[2]_0 ),
        .I4(\FSM_sequential_icap_nstate_cs[2]_i_4_n_0 ),
        .I5(\FSM_sequential_icap_nstate_cs[2]_i_5_n_0 ),
        .O(\FSM_sequential_icap_nstate_cs[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2022222220002200)) 
    \FSM_sequential_icap_nstate_cs[2]_i_2 
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(gate_icap_p),
        .I3(Q[0]),
        .I4(gtOp),
        .I5(Wrfifo_empty_r1),
        .O(\FSM_sequential_icap_nstate_cs[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0F00FFF00F0F1F10)) 
    \FSM_sequential_icap_nstate_cs[2]_i_4 
       (.I0(empty),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(\FSM_sequential_icap_nstate_cs_reg[2]_1 ),
        .I4(Q[2]),
        .I5(Q[0]),
        .O(\FSM_sequential_icap_nstate_cs[2]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFF7F)) 
    \FSM_sequential_icap_nstate_cs[2]_i_5 
       (.I0(p_0_in),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .O(\FSM_sequential_icap_nstate_cs[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFAFAAAAAAAAA)) 
    \FSM_sequential_icap_nstate_cs[3]_i_1 
       (.I0(\FSM_sequential_icap_nstate_cs[3]_i_2_n_0 ),
        .I1(Q[3]),
        .I2(\FSM_sequential_icap_nstate_cs[3]_i_3_n_0 ),
        .I3(\FSM_sequential_icap_nstate_cs[3]_i_4_n_0 ),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(\FSM_sequential_icap_nstate_cs[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF55540000)) 
    \FSM_sequential_icap_nstate_cs[3]_i_2 
       (.I0(Q[1]),
        .I1(abort_i_cs_reg_0),
        .I2(rnc[1]),
        .I3(rnc[0]),
        .I4(Q[3]),
        .I5(\FSM_sequential_icap_nstate_cs[3]_i_5_n_0 ),
        .O(\FSM_sequential_icap_nstate_cs[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0000F4FF)) 
    \FSM_sequential_icap_nstate_cs[3]_i_3 
       (.I0(out),
        .I1(abort_i_cs_reg_0),
        .I2(Wrfifo_empty_r1),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\FSM_sequential_icap_nstate_cs[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAA2AAA8AAA0AA)) 
    \FSM_sequential_icap_nstate_cs[3]_i_4 
       (.I0(\FSM_sequential_icap_nstate_cs[3]_i_6_n_0 ),
        .I1(p_0_in),
        .I2(\FSM_sequential_icap_nstate_cs_reg[2]_0 ),
        .I3(gtOp),
        .I4(eqOp3_in),
        .I5(eqOp20_in),
        .O(\FSM_sequential_icap_nstate_cs[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h5555555500100000)) 
    \FSM_sequential_icap_nstate_cs[3]_i_5 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(p_0_in),
        .I3(out),
        .I4(Q[0]),
        .I5(Q[3]),
        .O(\FSM_sequential_icap_nstate_cs[3]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_sequential_icap_nstate_cs[3]_i_6 
       (.I0(Q[0]),
        .I1(gate_icap_p),
        .O(\FSM_sequential_icap_nstate_cs[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \FSM_sequential_icap_nstate_cs[3]_i_7 
       (.I0(\size_cs_reg[0]_0 [8]),
        .I1(\FSM_sequential_icap_nstate_cs[3]_i_8_n_0 ),
        .I2(\size_cs_reg[0]_0 [11]),
        .I3(\size_cs_reg[0]_0 [9]),
        .I4(\size_cs_reg[0]_0 [10]),
        .I5(\FSM_sequential_icap_nstate_cs[3]_i_9_n_0 ),
        .O(eqOp20_in));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_sequential_icap_nstate_cs[3]_i_8 
       (.I0(\size_cs_reg[0]_0 [6]),
        .I1(\size_cs_reg[0]_0 [7]),
        .O(\FSM_sequential_icap_nstate_cs[3]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFB)) 
    \FSM_sequential_icap_nstate_cs[3]_i_9 
       (.I0(\size_cs_reg[0]_0 [2]),
        .I1(\size_cs_reg[0]_0 [0]),
        .I2(\size_cs_reg[0]_0 [1]),
        .I3(\size_cs_reg[0]_0 [5]),
        .I4(\size_cs_reg[0]_0 [3]),
        .I5(\size_cs_reg[0]_0 [4]),
        .O(\FSM_sequential_icap_nstate_cs[3]_i_9_n_0 ));
  (* FSM_ENCODED_STATES = "icap_write3:0011,icap_write4:0100,done:1101,icap_write2:0110,icap_abort4:1011,icap_abort3:1010,icap_abort2:1001,icap_write1:0010,icap_idle:0000,icap_abort0:0001,icap_abort1:1000,icap_abort_hang:1100,icap_read1:0111,icap_write5:0101" *) 
  FDRE \FSM_sequential_icap_nstate_cs_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\FSM_sequential_icap_nstate_cs[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(scndry_out));
  (* FSM_ENCODED_STATES = "icap_write3:0011,icap_write4:0100,done:1101,icap_write2:0110,icap_abort4:1011,icap_abort3:1010,icap_abort2:1001,icap_write1:0010,icap_idle:0000,icap_abort0:0001,icap_abort1:1000,icap_abort_hang:1100,icap_read1:0111,icap_write5:0101" *) 
  FDRE \FSM_sequential_icap_nstate_cs_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\FSM_sequential_icap_nstate_cs[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(scndry_out));
  (* FSM_ENCODED_STATES = "icap_write3:0011,icap_write4:0100,done:1101,icap_write2:0110,icap_abort4:1011,icap_abort3:1010,icap_abort2:1001,icap_write1:0010,icap_idle:0000,icap_abort0:0001,icap_abort1:1000,icap_abort_hang:1100,icap_read1:0111,icap_write5:0101" *) 
  FDRE \FSM_sequential_icap_nstate_cs_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\FSM_sequential_icap_nstate_cs[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(scndry_out));
  (* FSM_ENCODED_STATES = "icap_write3:0011,icap_write4:0100,done:1101,icap_write2:0110,icap_abort4:1011,icap_abort3:1010,icap_abort2:1001,icap_write1:0010,icap_idle:0000,icap_abort0:0001,icap_abort1:1000,icap_abort_hang:1100,icap_read1:0111,icap_write5:0101" *) 
  FDRE \FSM_sequential_icap_nstate_cs_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\FSM_sequential_icap_nstate_cs[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(scndry_out));
  LUT4 #(
    .INIT(16'hFFA8)) 
    Icap_busy_inferred_i_1
       (.I0(icap_we_cs_reg_0),
        .I1(ce_del3),
        .I2(out),
        .I3(Icap_busy_inferred_i_2_n_0),
        .O(p_0_in));
  LUT4 #(
    .INIT(16'hFFFE)) 
    Icap_busy_inferred_i_2
       (.I0(abort_detect_reg_0),
        .I1(abort_del1),
        .I2(abort_del2),
        .I3(abort_del3),
        .O(Icap_busy_inferred_i_2_n_0));
  LUT5 #(
    .INIT(32'hBABF8A80)) 
    Send_done_cs_i_1
       (.I0(Send_done_cs_i_2_n_0),
        .I1(reset_cr_cs_i_2_n_0),
        .I2(Q[0]),
        .I3(Send_done_cs_i_3_n_0),
        .I4(prmry_in),
        .O(Send_done_cs_i_1_n_0));
  LUT5 #(
    .INIT(32'h77777007)) 
    Send_done_cs_i_2
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(rnc[1]),
        .I3(rnc[0]),
        .I4(Q[2]),
        .O(Send_done_cs_i_2_n_0));
  LUT6 #(
    .INIT(64'h5555001011110010)) 
    Send_done_cs_i_3
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Send_done_ns8_in),
        .I3(abort_i_cs_reg_0),
        .I4(Q[2]),
        .I5(Wrfifo_empty_r1),
        .O(Send_done_cs_i_3_n_0));
  FDSE Send_done_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Send_done_cs_i_1_n_0),
        .Q(prmry_in),
        .S(scndry_out));
  FDRE Wrfifo_empty_r1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Wrfifo_empty_r),
        .Q(Wrfifo_empty_r1),
        .R(1'b0));
  FDRE Wrfifo_empty_r_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(empty),
        .Q(Wrfifo_empty_r),
        .R(1'b0));
  FDRE abort_cs2_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(abort_cs),
        .Q(E),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT4 #(
    .INIT(16'h5400)) 
    abort_cs_i_1
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(abort_ns));
  FDRE abort_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(abort_ns),
        .Q(abort_cs),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000008ABABA8A)) 
    abort_detect_i_1
       (.I0(abort_detect_reg_0),
        .I1(out),
        .I2(same_cycle),
        .I3(rdwr_int1),
        .I4(icap_we_cs_reg_0),
        .I5(scndry_out),
        .O(abort_detect_reg));
  FDRE abort_i_cs2_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(abort_i_cs),
        .Q(abort_i_cs2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hBABABABB8A8A8A88)) 
    abort_i_cs_i_1
       (.I0(abort_i_cs_i_2_n_0),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(abort_i_cs_reg_0),
        .I4(Q[3]),
        .I5(abort_i_cs_i_3_n_0),
        .O(abort_i_ns));
  LUT6 #(
    .INIT(64'h004000000000FFFF)) 
    abort_i_cs_i_2
       (.I0(Q[3]),
        .I1(\FSM_sequential_icap_nstate_cs_reg[2]_0 ),
        .I2(gtOp),
        .I3(gate_icap_p),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(abort_i_cs_i_2_n_0));
  LUT6 #(
    .INIT(64'h0808080808280808)) 
    abort_i_cs_i_3
       (.I0(Q[1]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(out),
        .I4(abort_i_cs_reg_0),
        .I5(Wrfifo_empty_r1),
        .O(abort_i_cs_i_3_n_0));
  FDRE abort_i_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(abort_i_ns),
        .Q(abort_i_cs),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0CCCCCCC0CCCCCCA)) 
    cap_req_INST_0
       (.I0(icap_req_d_reg_0),
        .I1(icap_req_d),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(cap_req));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(count[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count[1]_i_1 
       (.I0(count[0]),
        .I1(count[1]),
        .O(plusOp[1]));
  LUT4 #(
    .INIT(16'h2AAA)) 
    \count[2]_i_2 
       (.I0(count_enable_cs),
        .I1(count[0]),
        .I2(count[1]),
        .I3(count[2]),
        .O(count0));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count[2]_i_3 
       (.I0(count[0]),
        .I1(count[1]),
        .I2(count[2]),
        .O(plusOp[2]));
  LUT6 #(
    .INIT(64'hEFFF33FC20000000)) 
    count_enable_cs_i_1
       (.I0(count_enable_cs_i_2_n_0),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(count_enable_cs),
        .O(count_enable_cs_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000D000)) 
    count_enable_cs_i_2
       (.I0(abort_i_cs_reg_0),
        .I1(out),
        .I2(p_0_in),
        .I3(gtOp),
        .I4(gate_icap_p),
        .O(count_enable_cs_i_2_n_0));
  FDRE count_enable_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(count_enable_cs_i_1_n_0),
        .Q(count_enable_cs),
        .R(scndry_out));
  FDRE \count_reg[0] 
       (.C(s_axi_aclk),
        .CE(count0),
        .D(plusOp[0]),
        .Q(count[0]),
        .R(SR));
  FDRE \count_reg[1] 
       (.C(s_axi_aclk),
        .CE(count0),
        .D(plusOp[1]),
        .Q(count[1]),
        .R(SR));
  FDRE \count_reg[2] 
       (.C(s_axi_aclk),
        .CE(count0),
        .D(plusOp[2]),
        .Q(count[2]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFBAAFBFF08AA0800)) 
    count_reset_cs_i_1
       (.I0(count_reset_cs_i_2_n_0),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(count_reset_cs_i_3_n_0),
        .I5(count_reset_cs),
        .O(count_reset_cs_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT4 #(
    .INIT(16'h202F)) 
    count_reset_cs_i_2
       (.I0(gate_icap_p),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(count_reset_cs_i_2_n_0));
  LUT6 #(
    .INIT(64'h08000000000000FF)) 
    count_reset_cs_i_3
       (.I0(hang_status_cs_i_2_n_0),
        .I1(gtOp),
        .I2(gate_icap_p),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[1]),
        .O(count_reset_cs_i_3_n_0));
  FDRE count_reset_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(count_reset_cs_i_1_n_0),
        .Q(count_reset_cs),
        .R(scndry_out));
  CARRY8 gtOp_carry
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({NLW_gtOp_carry_CO_UNCONNECTED[7:6],gtOp,gtOp_carry_n_3,gtOp_carry_n_4,gtOp_carry_n_5,gtOp_carry_n_6,gtOp_carry_n_7}),
        .DI({1'b0,1'b0,gtOp_carry_i_1_n_0,gtOp_carry_i_2_n_0,gtOp_carry_i_3_n_0,gtOp_carry_i_4_n_0,gtOp_carry_i_5_n_0,gtOp_carry_i_6_n_0}),
        .O(NLW_gtOp_carry_O_UNCONNECTED[7:0]),
        .S({1'b0,1'b0,gtOp_carry_i_7_n_0,gtOp_carry_i_8_n_0,gtOp_carry_i_9_n_0,gtOp_carry_i_10_n_0,gtOp_carry_i_11_n_0,gtOp_carry_i_12_n_0}));
  LUT2 #(
    .INIT(4'hE)) 
    gtOp_carry_i_1
       (.I0(\size_cs_reg[0]_0 [10]),
        .I1(\size_cs_reg[0]_0 [11]),
        .O(gtOp_carry_i_1_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    gtOp_carry_i_10
       (.I0(\size_cs_reg[0]_0 [4]),
        .I1(\size_cs_reg[0]_0 [5]),
        .O(gtOp_carry_i_10_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    gtOp_carry_i_11
       (.I0(\size_cs_reg[0]_0 [2]),
        .I1(\size_cs_reg[0]_0 [3]),
        .O(gtOp_carry_i_11_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    gtOp_carry_i_12
       (.I0(\size_cs_reg[0]_0 [0]),
        .I1(\size_cs_reg[0]_0 [1]),
        .O(gtOp_carry_i_12_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    gtOp_carry_i_2
       (.I0(\size_cs_reg[0]_0 [8]),
        .I1(\size_cs_reg[0]_0 [9]),
        .O(gtOp_carry_i_2_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    gtOp_carry_i_3
       (.I0(\size_cs_reg[0]_0 [6]),
        .I1(\size_cs_reg[0]_0 [7]),
        .O(gtOp_carry_i_3_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    gtOp_carry_i_4
       (.I0(\size_cs_reg[0]_0 [4]),
        .I1(\size_cs_reg[0]_0 [5]),
        .O(gtOp_carry_i_4_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    gtOp_carry_i_5
       (.I0(\size_cs_reg[0]_0 [2]),
        .I1(\size_cs_reg[0]_0 [3]),
        .O(gtOp_carry_i_5_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    gtOp_carry_i_6
       (.I0(\size_cs_reg[0]_0 [0]),
        .I1(\size_cs_reg[0]_0 [1]),
        .O(gtOp_carry_i_6_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    gtOp_carry_i_7
       (.I0(\size_cs_reg[0]_0 [10]),
        .I1(\size_cs_reg[0]_0 [11]),
        .O(gtOp_carry_i_7_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    gtOp_carry_i_8
       (.I0(\size_cs_reg[0]_0 [8]),
        .I1(\size_cs_reg[0]_0 [9]),
        .O(gtOp_carry_i_8_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    gtOp_carry_i_9
       (.I0(\size_cs_reg[0]_0 [6]),
        .I1(\size_cs_reg[0]_0 [7]),
        .O(gtOp_carry_i_9_n_0));
  LUT6 #(
    .INIT(64'h55D5FFFF55D50000)) 
    hang_status_cs_i_1
       (.I0(Q[1]),
        .I1(hang_status_cs_i_2_n_0),
        .I2(eqOp3_in),
        .I3(Q[3]),
        .I4(hang_status_cs_i_4_n_0),
        .I5(hang_status_cs_reg_0),
        .O(hang_status_cs_i_1_n_0));
  LUT3 #(
    .INIT(8'h8A)) 
    hang_status_cs_i_2
       (.I0(p_0_in),
        .I1(out),
        .I2(abort_i_cs_reg_0),
        .O(hang_status_cs_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'h80)) 
    hang_status_cs_i_3
       (.I0(count[1]),
        .I1(count[2]),
        .I2(count[0]),
        .O(eqOp3_in));
  LUT6 #(
    .INIT(64'h0000200000F00000)) 
    hang_status_cs_i_4
       (.I0(gtOp),
        .I1(gate_icap_p),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[0]),
        .O(hang_status_cs_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    hang_status_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hang_status_cs_i_1_n_0),
        .Q(hang_status_cs_reg_0),
        .R(scndry_out));
  LUT5 #(
    .INIT(32'hA8FFA800)) 
    icap_ce_cs_i_1
       (.I0(icap_ce_cs_i_2_n_0),
        .I1(icap_ce_cs_i_3_n_0),
        .I2(Q[3]),
        .I3(icap_ce_ns),
        .I4(out),
        .O(icap_ce_cs_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h44FC)) 
    icap_ce_cs_i_2
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(abort_i_cs_reg_0),
        .I3(Q[1]),
        .O(icap_ce_cs_i_2_n_0));
  LUT6 #(
    .INIT(64'h45FF450000FF00FF)) 
    icap_ce_cs_i_3
       (.I0(gate_icap_p),
        .I1(icap_ce_cs_i_5_n_0),
        .I2(gtOp),
        .I3(Q[0]),
        .I4(Wrfifo_empty_r1),
        .I5(Q[1]),
        .O(icap_ce_cs_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h3232ABAA)) 
    icap_ce_cs_i_4
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(abort_i_cs_reg_0),
        .I4(Q[1]),
        .O(icap_ce_ns));
  LUT5 #(
    .INIT(32'h000000D0)) 
    icap_ce_cs_i_5
       (.I0(abort_i_cs_reg_0),
        .I1(out),
        .I2(icap_ce_cs_i_6_n_0),
        .I3(\FSM_sequential_icap_nstate_cs[3]_i_9_n_0 ),
        .I4(p_0_in),
        .O(icap_ce_cs_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    icap_ce_cs_i_6
       (.I0(\size_cs_reg[0]_0 [10]),
        .I1(\size_cs_reg[0]_0 [9]),
        .I2(\size_cs_reg[0]_0 [11]),
        .I3(\size_cs_reg[0]_0 [6]),
        .I4(\size_cs_reg[0]_0 [7]),
        .I5(\size_cs_reg[0]_0 [8]),
        .O(icap_ce_cs_i_6_n_0));
  FDSE icap_ce_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_ce_cs_i_1_n_0),
        .Q(out),
        .S(scndry_out));
  FDRE \icap_datain_cs_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[0]),
        .Q(icap_o[24]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[10]),
        .Q(icap_o[18]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[11]),
        .Q(icap_o[19]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[12] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[12]),
        .Q(icap_o[20]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[13] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[13]),
        .Q(icap_o[21]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[14] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[14]),
        .Q(icap_o[22]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[15] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[15]),
        .Q(icap_o[23]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[16] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[16]),
        .Q(icap_o[8]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[17] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[17]),
        .Q(icap_o[9]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[18] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[18]),
        .Q(icap_o[10]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[19] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[19]),
        .Q(icap_o[11]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[1]),
        .Q(icap_o[25]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[20] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[20]),
        .Q(icap_o[12]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[21] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[21]),
        .Q(icap_o[13]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[22] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[22]),
        .Q(icap_o[14]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[23] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[23]),
        .Q(icap_o[15]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[24] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[24]),
        .Q(icap_o[0]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[25] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[25]),
        .Q(icap_o[1]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[26] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[26]),
        .Q(icap_o[2]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[27] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[27]),
        .Q(icap_o[3]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[28] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[28]),
        .Q(icap_o[4]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[29] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[29]),
        .Q(icap_o[5]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[2]),
        .Q(icap_o[26]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[30] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[30]),
        .Q(icap_o[6]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[31] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[31]),
        .Q(icap_o[7]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[3]),
        .Q(icap_o[27]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[4]),
        .Q(icap_o[28]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[5]),
        .Q(icap_o[29]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[6]),
        .Q(icap_o[30]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[7]),
        .Q(icap_o[31]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[8]),
        .Q(icap_o[16]),
        .R(scndry_out));
  FDRE \icap_datain_cs_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(int1[9]),
        .Q(icap_o[17]),
        .R(scndry_out));
  FDRE \icap_dataout_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[31]),
        .Q(\icap_dataout_i_reg[0]_0 [31]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[21]),
        .Q(\icap_dataout_i_reg[0]_0 [21]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[20]),
        .Q(\icap_dataout_i_reg[0]_0 [20]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[12] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[19]),
        .Q(\icap_dataout_i_reg[0]_0 [19]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[13] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[18]),
        .Q(\icap_dataout_i_reg[0]_0 [18]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[14] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[17]),
        .Q(\icap_dataout_i_reg[0]_0 [17]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[15] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[16]),
        .Q(\icap_dataout_i_reg[0]_0 [16]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[16] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[15]),
        .Q(\icap_dataout_i_reg[0]_0 [15]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[17] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[14]),
        .Q(\icap_dataout_i_reg[0]_0 [14]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[18] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[13]),
        .Q(\icap_dataout_i_reg[0]_0 [13]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[19] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[12]),
        .Q(\icap_dataout_i_reg[0]_0 [12]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[30]),
        .Q(\icap_dataout_i_reg[0]_0 [30]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[20] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[11]),
        .Q(\icap_dataout_i_reg[0]_0 [11]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[21] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[10]),
        .Q(\icap_dataout_i_reg[0]_0 [10]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[22] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[9]),
        .Q(\icap_dataout_i_reg[0]_0 [9]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[23] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[8]),
        .Q(\icap_dataout_i_reg[0]_0 [8]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[24] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[7]),
        .Q(\icap_dataout_i_reg[0]_0 [7]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[25] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[6]),
        .Q(\icap_dataout_i_reg[0]_0 [6]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[26] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[5]),
        .Q(\icap_dataout_i_reg[0]_0 [5]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[27] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[4]),
        .Q(\icap_dataout_i_reg[0]_0 [4]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[28] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[3]),
        .Q(\icap_dataout_i_reg[0]_0 [3]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[29] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[2]),
        .Q(\icap_dataout_i_reg[0]_0 [2]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[29]),
        .Q(\icap_dataout_i_reg[0]_0 [29]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[30] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[1]),
        .Q(\icap_dataout_i_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[31] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[0]),
        .Q(\icap_dataout_i_reg[0]_0 [0]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[28]),
        .Q(\icap_dataout_i_reg[0]_0 [28]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[27]),
        .Q(\icap_dataout_i_reg[0]_0 [27]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[26]),
        .Q(\icap_dataout_i_reg[0]_0 [26]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[25]),
        .Q(\icap_dataout_i_reg[0]_0 [25]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[24]),
        .Q(\icap_dataout_i_reg[0]_0 [24]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[23]),
        .Q(\icap_dataout_i_reg[0]_0 [23]),
        .R(1'b0));
  FDRE \icap_dataout_i_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_i[22]),
        .Q(\icap_dataout_i_reg[0]_0 [22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    icap_rel_d1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(cap_rel),
        .Q(icap_rel_d1),
        .R(scndry_out));
  FDRE #(
    .INIT(1'b0)) 
    icap_rel_d2_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_rel_d1),
        .Q(icap_rel_d2),
        .R(scndry_out));
  FDRE icap_req_d_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(cap_req),
        .Q(icap_req_d),
        .R(scndry_out));
  FDRE \icap_status_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(icap_i[7]),
        .Q(\icap_status_i_reg[0]_0 [31]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[10] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [29]),
        .Q(\icap_status_i_reg[0]_0 [21]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[11] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [28]),
        .Q(\icap_status_i_reg[0]_0 [20]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[12] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [27]),
        .Q(\icap_status_i_reg[0]_0 [19]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[13] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [26]),
        .Q(\icap_status_i_reg[0]_0 [18]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[14] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [25]),
        .Q(\icap_status_i_reg[0]_0 [17]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[15] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [24]),
        .Q(\icap_status_i_reg[0]_0 [16]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[16] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [23]),
        .Q(\icap_status_i_reg[0]_0 [15]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[17] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [22]),
        .Q(\icap_status_i_reg[0]_0 [14]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[18] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [21]),
        .Q(\icap_status_i_reg[0]_0 [13]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[19] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [20]),
        .Q(\icap_status_i_reg[0]_0 [12]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(icap_i[6]),
        .Q(\icap_status_i_reg[0]_0 [30]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[20] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [19]),
        .Q(\icap_status_i_reg[0]_0 [11]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[21] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [18]),
        .Q(\icap_status_i_reg[0]_0 [10]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[22] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [17]),
        .Q(\icap_status_i_reg[0]_0 [9]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[23] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [16]),
        .Q(\icap_status_i_reg[0]_0 [8]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[24] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [15]),
        .Q(\icap_status_i_reg[0]_0 [7]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[25] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [14]),
        .Q(\icap_status_i_reg[0]_0 [6]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[26] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [13]),
        .Q(\icap_status_i_reg[0]_0 [5]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[27] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [12]),
        .Q(\icap_status_i_reg[0]_0 [4]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[28] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [11]),
        .Q(\icap_status_i_reg[0]_0 [3]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[29] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [10]),
        .Q(\icap_status_i_reg[0]_0 [2]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(icap_i[5]),
        .Q(\icap_status_i_reg[0]_0 [29]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[30] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [9]),
        .Q(\icap_status_i_reg[0]_0 [1]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[31] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [8]),
        .Q(\icap_status_i_reg[0]_0 [0]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(icap_i[4]),
        .Q(\icap_status_i_reg[0]_0 [28]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(icap_i[3]),
        .Q(\icap_status_i_reg[0]_0 [27]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(icap_i[2]),
        .Q(\icap_status_i_reg[0]_0 [26]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(icap_i[1]),
        .Q(\icap_status_i_reg[0]_0 [25]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(icap_i[0]),
        .Q(\icap_status_i_reg[0]_0 [24]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [31]),
        .Q(\icap_status_i_reg[0]_0 [23]),
        .R(scndry_out));
  FDRE \icap_status_i_reg[9] 
       (.C(s_axi_aclk),
        .CE(abort_i_cs2),
        .D(\icap_status_i_reg[0]_0 [30]),
        .Q(\icap_status_i_reg[0]_0 [22]),
        .R(scndry_out));
  LUT6 #(
    .INIT(64'hF8F8F0F30808C0C0)) 
    icap_we_cs_i_1
       (.I0(icap_we_cs_i_2_n_0),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(icap_we_cs_reg_0),
        .O(icap_we_cs_i_1_n_0));
  LUT6 #(
    .INIT(64'hF0B0F0F0F0BFF0F0)) 
    icap_we_cs_i_2
       (.I0(gate_icap_p),
        .I1(gtOp),
        .I2(Q[0]),
        .I3(out),
        .I4(abort_i_cs_reg_0),
        .I5(Wrfifo_empty_r1),
        .O(icap_we_cs_i_2_n_0));
  FDSE icap_we_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(icap_we_cs_i_1_n_0),
        .Q(icap_we_cs_reg_0),
        .S(scndry_out));
  FDRE \int1_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[31]),
        .Q(int1[0]),
        .R(scndry_out));
  FDRE \int1_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[21]),
        .Q(int1[10]),
        .R(scndry_out));
  FDRE \int1_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[20]),
        .Q(int1[11]),
        .R(scndry_out));
  FDRE \int1_reg[12] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[19]),
        .Q(int1[12]),
        .R(scndry_out));
  FDRE \int1_reg[13] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[18]),
        .Q(int1[13]),
        .R(scndry_out));
  FDRE \int1_reg[14] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[17]),
        .Q(int1[14]),
        .R(scndry_out));
  FDRE \int1_reg[15] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[16]),
        .Q(int1[15]),
        .R(scndry_out));
  FDRE \int1_reg[16] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[15]),
        .Q(int1[16]),
        .R(scndry_out));
  FDRE \int1_reg[17] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[14]),
        .Q(int1[17]),
        .R(scndry_out));
  FDRE \int1_reg[18] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[13]),
        .Q(int1[18]),
        .R(scndry_out));
  FDRE \int1_reg[19] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[12]),
        .Q(int1[19]),
        .R(scndry_out));
  FDRE \int1_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[30]),
        .Q(int1[1]),
        .R(scndry_out));
  FDRE \int1_reg[20] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[11]),
        .Q(int1[20]),
        .R(scndry_out));
  FDRE \int1_reg[21] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[10]),
        .Q(int1[21]),
        .R(scndry_out));
  FDRE \int1_reg[22] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[9]),
        .Q(int1[22]),
        .R(scndry_out));
  FDRE \int1_reg[23] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(int1[23]),
        .R(scndry_out));
  FDRE \int1_reg[24] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(int1[24]),
        .R(scndry_out));
  FDRE \int1_reg[25] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(int1[25]),
        .R(scndry_out));
  FDRE \int1_reg[26] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(int1[26]),
        .R(scndry_out));
  FDRE \int1_reg[27] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(int1[27]),
        .R(scndry_out));
  FDRE \int1_reg[28] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(int1[28]),
        .R(scndry_out));
  FDRE \int1_reg[29] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(int1[29]),
        .R(scndry_out));
  FDRE \int1_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[29]),
        .Q(int1[2]),
        .R(scndry_out));
  FDRE \int1_reg[30] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(int1[30]),
        .R(scndry_out));
  FDRE \int1_reg[31] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(int1[31]),
        .R(scndry_out));
  FDRE \int1_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[28]),
        .Q(int1[3]),
        .R(scndry_out));
  FDRE \int1_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[27]),
        .Q(int1[4]),
        .R(scndry_out));
  FDRE \int1_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[26]),
        .Q(int1[5]),
        .R(scndry_out));
  FDRE \int1_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[25]),
        .Q(int1[6]),
        .R(scndry_out));
  FDRE \int1_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[24]),
        .Q(int1[7]),
        .R(scndry_out));
  FDRE \int1_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[23]),
        .Q(int1[8]),
        .R(scndry_out));
  FDRE \int1_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[22]),
        .Q(int1[9]),
        .R(scndry_out));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'h40000000)) 
    rdfifo_wren_cs_i_1
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\size_cs[0]_i_3_n_0 ),
        .I4(Q[2]),
        .O(rdfifo_wren_ns));
  FDRE rdfifo_wren_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(rdfifo_wren_ns),
        .Q(rdfifo_wren),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    rdwr_int1_i_1
       (.I0(icap_we_cs_reg_0),
        .I1(out),
        .O(icap_we_cs_reg_1));
  LUT6 #(
    .INIT(64'h8B888B8B88888888)) 
    reset_cr_cs_i_1
       (.I0(reset_cr_cs_i_2_n_0),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Wrfifo_empty_r1),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(reset_cr_ns));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT5 #(
    .INIT(32'h08080828)) 
    reset_cr_cs_i_2
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(gtOp),
        .I4(gate_icap_p),
        .O(reset_cr_cs_i_2_n_0));
  FDRE reset_cr_cs_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(reset_cr_ns),
        .Q(reset_cr_cs_reg_0),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    same_cycle_i_1
       (.I0(out),
        .O(icap_ce_cs_reg_0));
  LUT6 #(
    .INIT(64'h4001000140000000)) 
    \size_cs[0]_i_1 
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(\size_cs[0]_i_3_n_0 ),
        .I5(\size_cs_reg[11]_0 ),
        .O(size_ns));
  LUT5 #(
    .INIT(32'hE4E4E44E)) 
    \size_cs[0]_i_2 
       (.I0(Q[1]),
        .I1(scndry_vect_out[11]),
        .I2(\size_cs_reg[0]_0 [11]),
        .I3(\size_cs[0]_i_5_n_0 ),
        .I4(\size_cs_reg[0]_0 [10]),
        .O(size_ns0_in[0]));
  LUT5 #(
    .INIT(32'h02020002)) 
    \size_cs[0]_i_3 
       (.I0(gtOp),
        .I1(gate_icap_p),
        .I2(p_0_in),
        .I3(abort_i_cs_reg_0),
        .I4(out),
        .O(\size_cs[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \size_cs[0]_i_5 
       (.I0(\size_cs_reg[0]_0 [8]),
        .I1(\size_cs_reg[0]_0 [6]),
        .I2(\size_cs[3]_i_2_n_0 ),
        .I3(\size_cs_reg[0]_0 [7]),
        .I4(\size_cs_reg[0]_0 [9]),
        .O(\size_cs[0]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'hE44E)) 
    \size_cs[10]_i_1 
       (.I0(Q[1]),
        .I1(scndry_vect_out[1]),
        .I2(\size_cs_reg[0]_0 [1]),
        .I3(\size_cs_reg[0]_0 [0]),
        .O(size_ns0_in[10]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'h4E)) 
    \size_cs[11]_i_1 
       (.I0(Q[1]),
        .I1(scndry_vect_out[0]),
        .I2(\size_cs_reg[0]_0 [0]),
        .O(size_ns0_in[11]));
  LUT4 #(
    .INIT(16'hE44E)) 
    \size_cs[1]_i_1 
       (.I0(Q[1]),
        .I1(scndry_vect_out[10]),
        .I2(\size_cs_reg[0]_0 [10]),
        .I3(\size_cs[0]_i_5_n_0 ),
        .O(size_ns0_in[1]));
  LUT4 #(
    .INIT(16'hE44E)) 
    \size_cs[2]_i_1 
       (.I0(Q[1]),
        .I1(scndry_vect_out[9]),
        .I2(\size_cs_reg[0]_0 [9]),
        .I3(\size_cs[2]_i_2_n_0 ),
        .O(size_ns0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \size_cs[2]_i_2 
       (.I0(\size_cs_reg[0]_0 [7]),
        .I1(\size_cs[3]_i_2_n_0 ),
        .I2(\size_cs_reg[0]_0 [6]),
        .I3(\size_cs_reg[0]_0 [8]),
        .O(\size_cs[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFE0001FF0100)) 
    \size_cs[3]_i_1 
       (.I0(\size_cs_reg[0]_0 [6]),
        .I1(\size_cs[3]_i_2_n_0 ),
        .I2(\size_cs_reg[0]_0 [7]),
        .I3(Q[1]),
        .I4(scndry_vect_out[8]),
        .I5(\size_cs_reg[0]_0 [8]),
        .O(size_ns0_in[3]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \size_cs[3]_i_2 
       (.I0(\size_cs_reg[0]_0 [4]),
        .I1(\size_cs_reg[0]_0 [2]),
        .I2(\size_cs_reg[0]_0 [1]),
        .I3(\size_cs_reg[0]_0 [0]),
        .I4(\size_cs_reg[0]_0 [3]),
        .I5(\size_cs_reg[0]_0 [5]),
        .O(\size_cs[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'hE4E4E44E)) 
    \size_cs[4]_i_1 
       (.I0(Q[1]),
        .I1(scndry_vect_out[7]),
        .I2(\size_cs_reg[0]_0 [7]),
        .I3(\size_cs[3]_i_2_n_0 ),
        .I4(\size_cs_reg[0]_0 [6]),
        .O(size_ns0_in[4]));
  LUT4 #(
    .INIT(16'hE44E)) 
    \size_cs[5]_i_1 
       (.I0(Q[1]),
        .I1(scndry_vect_out[6]),
        .I2(\size_cs_reg[0]_0 [6]),
        .I3(\size_cs[3]_i_2_n_0 ),
        .O(size_ns0_in[5]));
  LUT4 #(
    .INIT(16'hE44E)) 
    \size_cs[6]_i_1 
       (.I0(Q[1]),
        .I1(scndry_vect_out[5]),
        .I2(\size_cs_reg[0]_0 [5]),
        .I3(\size_cs[6]_i_2_n_0 ),
        .O(size_ns0_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \size_cs[6]_i_2 
       (.I0(\size_cs_reg[0]_0 [3]),
        .I1(\size_cs_reg[0]_0 [0]),
        .I2(\size_cs_reg[0]_0 [1]),
        .I3(\size_cs_reg[0]_0 [2]),
        .I4(\size_cs_reg[0]_0 [4]),
        .O(\size_cs[6]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hE44E)) 
    \size_cs[7]_i_1 
       (.I0(Q[1]),
        .I1(scndry_vect_out[4]),
        .I2(\size_cs_reg[0]_0 [4]),
        .I3(\size_cs[7]_i_2_n_0 ),
        .O(size_ns0_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \size_cs[7]_i_2 
       (.I0(\size_cs_reg[0]_0 [2]),
        .I1(\size_cs_reg[0]_0 [1]),
        .I2(\size_cs_reg[0]_0 [0]),
        .I3(\size_cs_reg[0]_0 [3]),
        .O(\size_cs[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFEFFFE0001FF0100)) 
    \size_cs[8]_i_1 
       (.I0(\size_cs_reg[0]_0 [0]),
        .I1(\size_cs_reg[0]_0 [1]),
        .I2(\size_cs_reg[0]_0 [2]),
        .I3(Q[1]),
        .I4(scndry_vect_out[3]),
        .I5(\size_cs_reg[0]_0 [3]),
        .O(size_ns0_in[8]));
  LUT5 #(
    .INIT(32'hE4E4E44E)) 
    \size_cs[9]_i_1 
       (.I0(Q[1]),
        .I1(scndry_vect_out[2]),
        .I2(\size_cs_reg[0]_0 [2]),
        .I3(\size_cs_reg[0]_0 [1]),
        .I4(\size_cs_reg[0]_0 [0]),
        .O(size_ns0_in[9]));
  FDRE \size_cs_reg[0] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[0]),
        .Q(\size_cs_reg[0]_0 [11]),
        .R(scndry_out));
  FDRE \size_cs_reg[10] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[10]),
        .Q(\size_cs_reg[0]_0 [1]),
        .R(scndry_out));
  FDRE \size_cs_reg[11] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[11]),
        .Q(\size_cs_reg[0]_0 [0]),
        .R(scndry_out));
  FDRE \size_cs_reg[1] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[1]),
        .Q(\size_cs_reg[0]_0 [10]),
        .R(scndry_out));
  FDRE \size_cs_reg[2] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[2]),
        .Q(\size_cs_reg[0]_0 [9]),
        .R(scndry_out));
  FDRE \size_cs_reg[3] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[3]),
        .Q(\size_cs_reg[0]_0 [8]),
        .R(scndry_out));
  FDRE \size_cs_reg[4] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[4]),
        .Q(\size_cs_reg[0]_0 [7]),
        .R(scndry_out));
  FDRE \size_cs_reg[5] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[5]),
        .Q(\size_cs_reg[0]_0 [6]),
        .R(scndry_out));
  FDRE \size_cs_reg[6] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[6]),
        .Q(\size_cs_reg[0]_0 [5]),
        .R(scndry_out));
  FDRE \size_cs_reg[7] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[7]),
        .Q(\size_cs_reg[0]_0 [4]),
        .R(scndry_out));
  FDRE \size_cs_reg[8] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[8]),
        .Q(\size_cs_reg[0]_0 [3]),
        .R(scndry_out));
  FDRE \size_cs_reg[9] 
       (.C(s_axi_aclk),
        .CE(size_ns),
        .D(size_ns0_in[9]),
        .Q(\size_cs_reg[0]_0 [2]),
        .R(scndry_out));
  LUT6 #(
    .INIT(64'h0000000004045404)) 
    \xpm_fifo_instance.xpm_fifo_async_inst_i_3__0 
       (.I0(Q[3]),
        .I1(\xpm_fifo_instance.xpm_fifo_async_inst_i_4_n_0 ),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(empty),
        .O(rd_en));
  MUXF7 \xpm_fifo_instance.xpm_fifo_async_inst_i_4 
       (.I0(\xpm_fifo_instance.xpm_fifo_async_inst_i_3__0_0 ),
        .I1(\xpm_fifo_instance.xpm_fifo_async_inst_i_6_n_0 ),
        .O(\xpm_fifo_instance.xpm_fifo_async_inst_i_4_n_0 ),
        .S(Q[1]));
  LUT6 #(
    .INIT(64'h000D0000000DFFFF)) 
    \xpm_fifo_instance.xpm_fifo_async_inst_i_6 
       (.I0(abort_i_cs_reg_0),
        .I1(out),
        .I2(Wrfifo_empty_r1),
        .I3(Wrfifo_empty_r),
        .I4(Q[2]),
        .I5(empty),
        .O(\xpm_fifo_instance.xpm_fifo_async_inst_i_6_n_0 ));
endmodule

(* ORIG_REF_NAME = "icapmux" *) 
module semicap_icapmux
   (oIcapI,
    oHwIcapI,
    iSemIcapO,
    iHwIcapO,
    iEngSemSelect,
    iIcapO);
  output [31:0]oIcapI;
  output [31:0]oHwIcapI;
  input [31:0]iSemIcapO;
  input [31:0]iHwIcapO;
  input iEngSemSelect;
  input [31:0]iIcapO;

  wire iEngSemSelect;
  wire [31:0]iHwIcapO;
  wire [31:0]iIcapO;
  wire [31:0]iSemIcapO;
  wire [31:0]oHwIcapI;
  wire [31:0]oIcapI;

  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[0]_INST_0 
       (.I0(iIcapO[0]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[0]));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[10]_INST_0 
       (.I0(iIcapO[10]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[10]));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[11]_INST_0 
       (.I0(iIcapO[11]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[11]));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[12]_INST_0 
       (.I0(iIcapO[12]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[12]));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[13]_INST_0 
       (.I0(iIcapO[13]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[13]));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[14]_INST_0 
       (.I0(iIcapO[14]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[14]));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[15]_INST_0 
       (.I0(iIcapO[15]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[15]));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[16]_INST_0 
       (.I0(iIcapO[16]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[16]));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[17]_INST_0 
       (.I0(iIcapO[17]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[17]));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[18]_INST_0 
       (.I0(iIcapO[18]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[18]));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[19]_INST_0 
       (.I0(iIcapO[19]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[19]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[1]_INST_0 
       (.I0(iIcapO[1]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[1]));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[20]_INST_0 
       (.I0(iIcapO[20]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[20]));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[21]_INST_0 
       (.I0(iIcapO[21]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[21]));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[22]_INST_0 
       (.I0(iIcapO[22]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[22]));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[23]_INST_0 
       (.I0(iIcapO[23]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[23]));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[24]_INST_0 
       (.I0(iIcapO[24]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[24]));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[25]_INST_0 
       (.I0(iIcapO[25]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[25]));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[26]_INST_0 
       (.I0(iIcapO[26]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[26]));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[27]_INST_0 
       (.I0(iIcapO[27]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[27]));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[28]_INST_0 
       (.I0(iIcapO[28]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[28]));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[29]_INST_0 
       (.I0(iIcapO[29]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[29]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[2]_INST_0 
       (.I0(iIcapO[2]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[2]));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[30]_INST_0 
       (.I0(iIcapO[30]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[30]));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[31]_INST_0 
       (.I0(iIcapO[31]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[31]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[3]_INST_0 
       (.I0(iIcapO[3]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[3]));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[4]_INST_0 
       (.I0(iIcapO[4]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[4]));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[5]_INST_0 
       (.I0(iIcapO[5]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[5]));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[6]_INST_0 
       (.I0(iIcapO[6]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[6]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[7]_INST_0 
       (.I0(iIcapO[7]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[7]));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[8]_INST_0 
       (.I0(iIcapO[8]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[8]));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \oHwIcapI[9]_INST_0 
       (.I0(iIcapO[9]),
        .I1(iEngSemSelect),
        .O(oHwIcapI[9]));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[0]_INST_0 
       (.I0(iSemIcapO[0]),
        .I1(iHwIcapO[0]),
        .I2(iEngSemSelect),
        .O(oIcapI[0]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[10]_INST_0 
       (.I0(iSemIcapO[10]),
        .I1(iHwIcapO[10]),
        .I2(iEngSemSelect),
        .O(oIcapI[10]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[11]_INST_0 
       (.I0(iSemIcapO[11]),
        .I1(iHwIcapO[11]),
        .I2(iEngSemSelect),
        .O(oIcapI[11]));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[12]_INST_0 
       (.I0(iSemIcapO[12]),
        .I1(iHwIcapO[12]),
        .I2(iEngSemSelect),
        .O(oIcapI[12]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[13]_INST_0 
       (.I0(iSemIcapO[13]),
        .I1(iHwIcapO[13]),
        .I2(iEngSemSelect),
        .O(oIcapI[13]));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[14]_INST_0 
       (.I0(iSemIcapO[14]),
        .I1(iHwIcapO[14]),
        .I2(iEngSemSelect),
        .O(oIcapI[14]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[15]_INST_0 
       (.I0(iSemIcapO[15]),
        .I1(iHwIcapO[15]),
        .I2(iEngSemSelect),
        .O(oIcapI[15]));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[16]_INST_0 
       (.I0(iSemIcapO[16]),
        .I1(iHwIcapO[16]),
        .I2(iEngSemSelect),
        .O(oIcapI[16]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[17]_INST_0 
       (.I0(iSemIcapO[17]),
        .I1(iHwIcapO[17]),
        .I2(iEngSemSelect),
        .O(oIcapI[17]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[18]_INST_0 
       (.I0(iSemIcapO[18]),
        .I1(iHwIcapO[18]),
        .I2(iEngSemSelect),
        .O(oIcapI[18]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[19]_INST_0 
       (.I0(iSemIcapO[19]),
        .I1(iHwIcapO[19]),
        .I2(iEngSemSelect),
        .O(oIcapI[19]));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[1]_INST_0 
       (.I0(iSemIcapO[1]),
        .I1(iHwIcapO[1]),
        .I2(iEngSemSelect),
        .O(oIcapI[1]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[20]_INST_0 
       (.I0(iSemIcapO[20]),
        .I1(iHwIcapO[20]),
        .I2(iEngSemSelect),
        .O(oIcapI[20]));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[21]_INST_0 
       (.I0(iSemIcapO[21]),
        .I1(iHwIcapO[21]),
        .I2(iEngSemSelect),
        .O(oIcapI[21]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[22]_INST_0 
       (.I0(iSemIcapO[22]),
        .I1(iHwIcapO[22]),
        .I2(iEngSemSelect),
        .O(oIcapI[22]));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[23]_INST_0 
       (.I0(iSemIcapO[23]),
        .I1(iHwIcapO[23]),
        .I2(iEngSemSelect),
        .O(oIcapI[23]));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[24]_INST_0 
       (.I0(iSemIcapO[24]),
        .I1(iHwIcapO[24]),
        .I2(iEngSemSelect),
        .O(oIcapI[24]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[25]_INST_0 
       (.I0(iSemIcapO[25]),
        .I1(iHwIcapO[25]),
        .I2(iEngSemSelect),
        .O(oIcapI[25]));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[26]_INST_0 
       (.I0(iSemIcapO[26]),
        .I1(iHwIcapO[26]),
        .I2(iEngSemSelect),
        .O(oIcapI[26]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[27]_INST_0 
       (.I0(iSemIcapO[27]),
        .I1(iHwIcapO[27]),
        .I2(iEngSemSelect),
        .O(oIcapI[27]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[28]_INST_0 
       (.I0(iSemIcapO[28]),
        .I1(iHwIcapO[28]),
        .I2(iEngSemSelect),
        .O(oIcapI[28]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[29]_INST_0 
       (.I0(iSemIcapO[29]),
        .I1(iHwIcapO[29]),
        .I2(iEngSemSelect),
        .O(oIcapI[29]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[2]_INST_0 
       (.I0(iSemIcapO[2]),
        .I1(iHwIcapO[2]),
        .I2(iEngSemSelect),
        .O(oIcapI[2]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[30]_INST_0 
       (.I0(iSemIcapO[30]),
        .I1(iHwIcapO[30]),
        .I2(iEngSemSelect),
        .O(oIcapI[30]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[31]_INST_0 
       (.I0(iSemIcapO[31]),
        .I1(iHwIcapO[31]),
        .I2(iEngSemSelect),
        .O(oIcapI[31]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[3]_INST_0 
       (.I0(iSemIcapO[3]),
        .I1(iHwIcapO[3]),
        .I2(iEngSemSelect),
        .O(oIcapI[3]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[4]_INST_0 
       (.I0(iSemIcapO[4]),
        .I1(iHwIcapO[4]),
        .I2(iEngSemSelect),
        .O(oIcapI[4]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[5]_INST_0 
       (.I0(iSemIcapO[5]),
        .I1(iHwIcapO[5]),
        .I2(iEngSemSelect),
        .O(oIcapI[5]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[6]_INST_0 
       (.I0(iSemIcapO[6]),
        .I1(iHwIcapO[6]),
        .I2(iEngSemSelect),
        .O(oIcapI[6]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[7]_INST_0 
       (.I0(iSemIcapO[7]),
        .I1(iHwIcapO[7]),
        .I2(iEngSemSelect),
        .O(oIcapI[7]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[8]_INST_0 
       (.I0(iSemIcapO[8]),
        .I1(iHwIcapO[8]),
        .I2(iEngSemSelect),
        .O(oIcapI[8]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \oIcapI[9]_INST_0 
       (.I0(iSemIcapO[9]),
        .I1(iHwIcapO[9]),
        .I2(iEngSemSelect),
        .O(oIcapI[9]));
endmodule

(* ORIG_REF_NAME = "interrupt_control" *) 
module semicap_interrupt_control
   (irpt_wrack_d1,
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ,
    p_1_in5_in,
    p_1_in2_in,
    p_1_in,
    intr2bus_wrack,
    irpt_rdack_d1,
    intr2bus_rdack,
    ipif_glbl_irpt_enable_reg,
    ip2intc_irpt,
    D,
    intr_rst,
    irpt_wrack,
    s_axi_aclk,
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_1 ,
    \GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1]_0 ,
    \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2]_0 ,
    \GEN_IP_IRPT_STATUS_REG[3].GEN_REG_STATUS.ip_irpt_status_reg_reg[3]_0 ,
    interrupt_wrce_strb,
    irpt_rdack,
    intr2bus_rdack0,
    ipif_glbl_irpt_enable_reg_reg_0,
    \ip2bus_data_i_reg[28] ,
    p_16_in,
    p_14_in,
    E,
    s_axi_wdata);
  output irpt_wrack_d1;
  output \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ;
  output p_1_in5_in;
  output p_1_in2_in;
  output p_1_in;
  output intr2bus_wrack;
  output irpt_rdack_d1;
  output intr2bus_rdack;
  output ipif_glbl_irpt_enable_reg;
  output ip2intc_irpt;
  output [3:0]D;
  input intr_rst;
  input irpt_wrack;
  input s_axi_aclk;
  input \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_1 ;
  input \GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1]_0 ;
  input \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2]_0 ;
  input \GEN_IP_IRPT_STATUS_REG[3].GEN_REG_STATUS.ip_irpt_status_reg_reg[3]_0 ;
  input interrupt_wrce_strb;
  input irpt_rdack;
  input intr2bus_rdack0;
  input ipif_glbl_irpt_enable_reg_reg_0;
  input [3:0]\ip2bus_data_i_reg[28] ;
  input p_16_in;
  input p_14_in;
  input [0:0]E;
  input [3:0]s_axi_wdata;

  wire [3:0]D;
  wire [0:0]E;
  wire \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ;
  wire \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_1 ;
  wire \GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1]_0 ;
  wire \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2]_0 ;
  wire \GEN_IP_IRPT_STATUS_REG[3].GEN_REG_STATUS.ip_irpt_status_reg_reg[3]_0 ;
  wire interrupt_wrce_strb;
  wire intr2bus_rdack;
  wire intr2bus_rdack0;
  wire intr2bus_wrack;
  wire intr_rst;
  wire [3:0]\ip2bus_data_i_reg[28] ;
  wire ip2intc_irpt;
  wire ip2intc_irpt_INST_0_i_1_n_0;
  wire \ip_irpt_enable_reg_reg_n_0_[0] ;
  wire ipif_glbl_irpt_enable_reg;
  wire ipif_glbl_irpt_enable_reg_reg_0;
  wire irpt_rdack;
  wire irpt_rdack_d1;
  wire irpt_wrack;
  wire irpt_wrack_d1;
  wire p_0_in;
  wire p_0_in1_in;
  wire p_0_in4_in;
  wire p_14_in;
  wire p_16_in;
  wire p_1_in;
  wire p_1_in2_in;
  wire p_1_in5_in;
  wire s_axi_aclk;
  wire [3:0]s_axi_wdata;

  FDRE \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_1 ),
        .Q(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ),
        .R(intr_rst));
  FDRE \GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1]_0 ),
        .Q(p_1_in5_in),
        .R(intr_rst));
  FDRE \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2]_0 ),
        .Q(p_1_in2_in),
        .R(intr_rst));
  FDRE \GEN_IP_IRPT_STATUS_REG[3].GEN_REG_STATUS.ip_irpt_status_reg_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\GEN_IP_IRPT_STATUS_REG[3].GEN_REG_STATUS.ip_irpt_status_reg_reg[3]_0 ),
        .Q(p_1_in),
        .R(intr_rst));
  FDRE intr2bus_rdack_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(intr2bus_rdack0),
        .Q(intr2bus_rdack),
        .R(intr_rst));
  FDRE intr2bus_wrack_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(interrupt_wrce_strb),
        .Q(intr2bus_wrack),
        .R(intr_rst));
  LUT5 #(
    .INIT(32'hEEFAEEAA)) 
    \ip2bus_data_i[28]_i_1 
       (.I0(\ip2bus_data_i_reg[28] [3]),
        .I1(p_1_in),
        .I2(p_0_in4_in),
        .I3(p_16_in),
        .I4(p_14_in),
        .O(D[3]));
  LUT5 #(
    .INIT(32'hEEFAEEAA)) 
    \ip2bus_data_i[29]_i_1 
       (.I0(\ip2bus_data_i_reg[28] [2]),
        .I1(p_1_in2_in),
        .I2(p_0_in1_in),
        .I3(p_16_in),
        .I4(p_14_in),
        .O(D[2]));
  LUT5 #(
    .INIT(32'hEEFAEEAA)) 
    \ip2bus_data_i[30]_i_1 
       (.I0(\ip2bus_data_i_reg[28] [1]),
        .I1(p_1_in5_in),
        .I2(p_0_in),
        .I3(p_16_in),
        .I4(p_14_in),
        .O(D[1]));
  LUT5 #(
    .INIT(32'hEEFAEEAA)) 
    \ip2bus_data_i[31]_i_1 
       (.I0(\ip2bus_data_i_reg[28] [0]),
        .I1(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ),
        .I2(\ip_irpt_enable_reg_reg_n_0_[0] ),
        .I3(p_16_in),
        .I4(p_14_in),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hFFAAEAAAEAAAEAAA)) 
    ip2intc_irpt_INST_0
       (.I0(ip2intc_irpt_INST_0_i_1_n_0),
        .I1(p_1_in2_in),
        .I2(p_0_in1_in),
        .I3(ipif_glbl_irpt_enable_reg),
        .I4(p_0_in4_in),
        .I5(p_1_in),
        .O(ip2intc_irpt));
  LUT5 #(
    .INIT(32'hF0808080)) 
    ip2intc_irpt_INST_0_i_1
       (.I0(p_0_in),
        .I1(p_1_in5_in),
        .I2(ipif_glbl_irpt_enable_reg),
        .I3(\ip_irpt_enable_reg_reg_n_0_[0] ),
        .I4(\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 ),
        .O(ip2intc_irpt_INST_0_i_1_n_0));
  FDRE \ip_irpt_enable_reg_reg[0] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(s_axi_wdata[0]),
        .Q(\ip_irpt_enable_reg_reg_n_0_[0] ),
        .R(intr_rst));
  FDRE \ip_irpt_enable_reg_reg[1] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(s_axi_wdata[1]),
        .Q(p_0_in),
        .R(intr_rst));
  FDRE \ip_irpt_enable_reg_reg[2] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(s_axi_wdata[2]),
        .Q(p_0_in1_in),
        .R(intr_rst));
  FDRE \ip_irpt_enable_reg_reg[3] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(s_axi_wdata[3]),
        .Q(p_0_in4_in),
        .R(intr_rst));
  FDRE ipif_glbl_irpt_enable_reg_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(ipif_glbl_irpt_enable_reg_reg_0),
        .Q(ipif_glbl_irpt_enable_reg),
        .R(intr_rst));
  FDRE irpt_rdack_d1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(irpt_rdack),
        .Q(irpt_rdack_d1),
        .R(intr_rst));
  FDRE irpt_wrack_d1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(irpt_wrack),
        .Q(irpt_wrack_d1),
        .R(intr_rst));
endmodule

(* ORIG_REF_NAME = "ipic_if" *) 
module semicap_ipic_if
   (wr_data_count,
    D,
    empty,
    wr_en,
    dout,
    rd_data_count,
    SR,
    areset_n,
    \cr_i_reg[0]_0 ,
    ipbus_ack_fifo,
    ipbus_ack,
    busip_1,
    p_7_out,
    gate_icap_p,
    IP2Bus_RdAck_reg_0,
    \gwdc.wr_data_count_i_reg[10] ,
    \AXI_HW_wdata[1] ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ,
    \RD_FIFO.fifo_full_mask_reg_0 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_2 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_3 ,
    rnc,
    \gen_pf_ic_rc.ram_empty_i_reg ,
    \FSM_sequential_icap_nstate_cs_reg[1] ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_4 ,
    icap_req_d_reg,
    Send_done_ns8_in,
    icap_nstate_ns129_out__1,
    scndry_vect_out,
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_5 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_6 ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_7 ,
    \Size_counter_i3_reg[0]_0 ,
    \IP2Bus_Data_reg[0]_0 ,
    s_axi_aclk,
    s_axi_wdata,
    rd_en,
    Q,
    p_10_in,
    IP2Bus_RdAck0,
    p_11_in,
    IP2Bus_WrAck0,
    scndry_out,
    s_axi_aresetn,
    Bus_RNW_reg,
    p_7_in,
    p_8_in,
    intr2bus_rdack,
    \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ,
    \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ,
    p_1_in5_in,
    p_1_in2_in,
    p_1_in,
    cap_rel,
    cap_gnt,
    \FSM_sequential_icap_nstate_cs[2]_i_4 ,
    icap_ce_cs,
    icap_req_d,
    icap_rel_d2,
    prmry_in,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to ,
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ,
    icap_avail,
    \GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to ,
    bus2ip_wrce,
    \IP2Bus_Data_reg[0]_1 ,
    E,
    \sr_i_reg[0]_0 ,
    rdfifo_wren);
  output [10:0]wr_data_count;
  output [31:0]D;
  output empty;
  output wr_en;
  output [31:0]dout;
  output [8:0]rd_data_count;
  output [0:0]SR;
  output [0:0]areset_n;
  output [4:0]\cr_i_reg[0]_0 ;
  output ipbus_ack_fifo;
  output ipbus_ack;
  output busip_1;
  output p_7_out;
  output gate_icap_p;
  output IP2Bus_RdAck_reg_0;
  output \gwdc.wr_data_count_i_reg[10] ;
  output \AXI_HW_wdata[1] ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ;
  output \RD_FIFO.fifo_full_mask_reg_0 ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_2 ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_3 ;
  output [0:1]rnc;
  output \gen_pf_ic_rc.ram_empty_i_reg ;
  output \FSM_sequential_icap_nstate_cs_reg[1] ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_4 ;
  output icap_req_d_reg;
  output Send_done_ns8_in;
  output icap_nstate_ns129_out__1;
  output [11:0]scndry_vect_out;
  output [31:0]\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_5 ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_6 ;
  output \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_7 ;
  output [11:0]\Size_counter_i3_reg[0]_0 ;
  output [31:0]\IP2Bus_Data_reg[0]_0 ;
  input s_axi_aclk;
  input [31:0]s_axi_wdata;
  input rd_en;
  input [31:0]Q;
  input p_10_in;
  input IP2Bus_RdAck0;
  input p_11_in;
  input IP2Bus_WrAck0;
  input scndry_out;
  input s_axi_aresetn;
  input Bus_RNW_reg;
  input p_7_in;
  input p_8_in;
  input intr2bus_rdack;
  input \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ;
  input \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ;
  input p_1_in5_in;
  input p_1_in2_in;
  input p_1_in;
  input cap_rel;
  input cap_gnt;
  input [3:0]\FSM_sequential_icap_nstate_cs[2]_i_4 ;
  input icap_ce_cs;
  input icap_req_d;
  input icap_rel_d2;
  input prmry_in;
  input \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to ;
  input \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  input icap_avail;
  input [11:0]\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to ;
  input [1:0]bus2ip_wrce;
  input [31:0]\IP2Bus_Data_reg[0]_1 ;
  input [0:0]E;
  input [31:0]\sr_i_reg[0]_0 ;
  input rdfifo_wren;

  wire \AXI_HW_wdata[1] ;
  wire Bus_RNW_reg;
  wire [31:0]D;
  wire [0:0]E;
  wire [3:0]\FSM_sequential_icap_nstate_cs[2]_i_4 ;
  wire \FSM_sequential_icap_nstate_cs_reg[1] ;
  wire [31:0]\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 ;
  wire [11:0]\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_2 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_3 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_4 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_5 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_6 ;
  wire \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_7 ;
  wire \GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ;
  wire \GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ;
  wire ICAP2PLB_SYNCH2_n_1;
  wire [31:0]\IP2Bus_Data_reg[0]_0 ;
  wire [31:0]\IP2Bus_Data_reg[0]_1 ;
  wire IP2Bus_RdAck0;
  wire IP2Bus_RdAck_reg_0;
  wire IP2Bus_WrAck0;
  wire [31:0]Q;
  wire \RD_FIFO.RDDATA_FIFO_I_n_42 ;
  wire \RD_FIFO.RDDATA_FIFO_I_n_43 ;
  wire \RD_FIFO.RDFULL_SYNCH_n_0 ;
  wire \RD_FIFO.fifo_full_mask_reg_0 ;
  wire [0:0]SR;
  wire Send_done_ns8_in;
  wire [0:11]Size_counter_i2;
  wire [11:0]\Size_counter_i3_reg[0]_0 ;
  wire \WRFIFO.WRDATA_FIFO_I_n_48 ;
  wire abort_onreset;
  wire abort_onreset0;
  wire [0:0]areset_n;
  wire [1:0]bus2ip_wrce;
  wire busip_1;
  wire cap_gnt;
  wire cap_rel;
  wire [4:0]\cr_i_reg[0]_0 ;
  wire [31:0]dout;
  wire empty;
  wire fifo_clear;
  wire fifo_clear_del;
  wire fifo_clear_for_iclk;
  wire fifo_clear_iclk;
  wire fifo_clear_rd;
  wire fifo_clear_to_iclk;
  wire fifo_clear_to_iclk2;
  wire fifo_clear_to_iclk_i_1_n_0;
  wire fifo_full_mask;
  wire fifo_rst;
  wire gate_icap_p;
  wire \gen_pf_ic_rc.ram_empty_i_reg ;
  wire \gwdc.wr_data_count_i_reg[10] ;
  wire icap_avail;
  wire icap_ce_cs;
  wire icap_nstate_ns129_out__1;
  wire icap_rel_d2;
  wire icap_req_d;
  wire icap_req_d_reg;
  wire \icap_statemachine_I1/icap_req_d11__0 ;
  wire intr2bus_rdack;
  wire ipbus_1;
  wire ipbus_2;
  wire ipbus_ack;
  wire ipbus_ack_fifo;
  wire p_10_in;
  wire p_11_in;
  wire p_1_in;
  wire p_1_in2_in;
  wire p_1_in5_in;
  wire p_7_in;
  wire p_7_out;
  wire p_8_in;
  wire p_8_out;
  wire prmry_in;
  wire [8:0]rd_data_count;
  wire rd_en;
  wire rdfifo_full_d1;
  wire rdfifo_full_ip2bus;
  wire rdfifo_wren;
  wire [0:1]rnc;
  wire s_axi_aclk;
  wire s_axi_aresetn;
  wire [31:0]s_axi_wdata;
  wire scndry_out;
  wire [11:0]scndry_vect_out;
  wire [0:31]sr_i;
  wire [31:0]\sr_i_reg[0]_0 ;
  wire [0:11]sz_i;
  wire \sz_i[0]_i_1_n_0 ;
  wire [10:0]wr_data_count;
  wire wr_en;

  semicap_cdc_sync BUS2ICAP_SIZE_REGISTER_PROCESS
       (.Q({sz_i[0],sz_i[1],sz_i[2],sz_i[3],sz_i[4],sz_i[5],sz_i[6],sz_i[7],sz_i[8],sz_i[9],sz_i[10],sz_i[11]}),
        .s_axi_aclk(s_axi_aclk),
        .scndry_vect_out(scndry_vect_out));
  semicap_cdc_sync__parameterized3 FIFO_RST_CDC_PROCESS
       (.fifo_clear_for_iclk(fifo_clear_for_iclk),
        .prmry_in(fifo_clear_to_iclk2),
        .rst(fifo_clear_rd),
        .s_axi_aclk(s_axi_aclk),
        .scndry_out(fifo_clear_iclk));
  LUT1 #(
    .INIT(2'h1)) 
    \GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_i_1 
       (.I0(s_axi_aresetn),
        .O(areset_n));
  LUT5 #(
    .INIT(32'hF88FF8F8)) 
    \GEN_IP_IRPT_STATUS_REG[3].GEN_REG_STATUS.ip_irpt_status_reg[3]_i_1 
       (.I0(fifo_full_mask),
        .I1(rdfifo_full_d1),
        .I2(p_1_in),
        .I3(\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ),
        .I4(s_axi_wdata[3]),
        .O(\RD_FIFO.fifo_full_mask_reg_0 ));
  semicap_cdc_sync__parameterized0 ICAP2BUS_STATUS_REGISTER_PROCESS
       (.\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4_0 (\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_CROSS_PLEVEL_IN2SCNDRY_bus_d4[31].CROSS2_PLEVEL_IN2SCNDRY_s_level_out_bus_d4 ),
        .Q({sr_i[0],sr_i[1],sr_i[2],sr_i[3],sr_i[4],sr_i[5],sr_i[6],sr_i[7],sr_i[8],sr_i[9],sr_i[10],sr_i[11],sr_i[12],sr_i[13],sr_i[14],sr_i[15],sr_i[16],sr_i[17],sr_i[18],sr_i[19],sr_i[20],sr_i[21],sr_i[22],sr_i[23],sr_i[24],sr_i[25],sr_i[26],sr_i[27],sr_i[28],sr_i[29],sr_i[30],sr_i[31]}),
        .s_axi_aclk(s_axi_aclk));
  semicap_cdc_sync__parameterized1_13 ICAP2PLB_SYNCH1
       (.\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_5 ),
        .prmry_in(prmry_in),
        .s_axi_aclk(s_axi_aclk));
  semicap_cdc_sync__parameterized1_14 ICAP2PLB_SYNCH2
       (.\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to ),
        .SR(ICAP2PLB_SYNCH2_n_1),
        .abort_onreset0(abort_onreset0),
        .abort_onreset_reg(\cr_i_reg[0]_0 [4]),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_aresetn(s_axi_aresetn));
  semicap_cdc_sync__parameterized1_15 ICAP2PLB_SYNCH3
       (.\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 ),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_6 ),
        .s_axi_aclk(s_axi_aclk));
  semicap_cdc_sync__parameterized1_16 ICAP2PLB_SYNCH4
       (.\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_7 ),
        .icap_avail(icap_avail),
        .s_axi_aclk(s_axi_aclk));
  semicap_cdc_sync_17 ICAP2PLB_SYNCH5
       (.\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to_0 (\GENERATE_LEVEL_P_S_CDC.MULTI_BIT.FOR_IN_cdc_to[11].CROSS2_PLEVEL_IN2SCNDRY_IN_cdc_to ),
        .s_axi_aclk(s_axi_aclk),
        .scndry_vect_out({Size_counter_i2[0],Size_counter_i2[1],Size_counter_i2[2],Size_counter_i2[3],Size_counter_i2[4],Size_counter_i2[5],Size_counter_i2[6],Size_counter_i2[7],Size_counter_i2[8],Size_counter_i2[9],Size_counter_i2[10],Size_counter_i2[11]}));
  FDRE \IP2Bus_Data_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [31]),
        .Q(\IP2Bus_Data_reg[0]_0 [31]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [21]),
        .Q(\IP2Bus_Data_reg[0]_0 [21]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [20]),
        .Q(\IP2Bus_Data_reg[0]_0 [20]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[12] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [19]),
        .Q(\IP2Bus_Data_reg[0]_0 [19]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[13] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [18]),
        .Q(\IP2Bus_Data_reg[0]_0 [18]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[14] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [17]),
        .Q(\IP2Bus_Data_reg[0]_0 [17]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[15] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [16]),
        .Q(\IP2Bus_Data_reg[0]_0 [16]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[16] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [15]),
        .Q(\IP2Bus_Data_reg[0]_0 [15]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[17] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [14]),
        .Q(\IP2Bus_Data_reg[0]_0 [14]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[18] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [13]),
        .Q(\IP2Bus_Data_reg[0]_0 [13]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[19] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [12]),
        .Q(\IP2Bus_Data_reg[0]_0 [12]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [30]),
        .Q(\IP2Bus_Data_reg[0]_0 [30]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[20] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [11]),
        .Q(\IP2Bus_Data_reg[0]_0 [11]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[21] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [10]),
        .Q(\IP2Bus_Data_reg[0]_0 [10]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[22] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [9]),
        .Q(\IP2Bus_Data_reg[0]_0 [9]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[23] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [8]),
        .Q(\IP2Bus_Data_reg[0]_0 [8]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[24] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [7]),
        .Q(\IP2Bus_Data_reg[0]_0 [7]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[25] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [6]),
        .Q(\IP2Bus_Data_reg[0]_0 [6]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[26] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [5]),
        .Q(\IP2Bus_Data_reg[0]_0 [5]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[27] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [4]),
        .Q(\IP2Bus_Data_reg[0]_0 [4]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[28] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [3]),
        .Q(\IP2Bus_Data_reg[0]_0 [3]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[29] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [2]),
        .Q(\IP2Bus_Data_reg[0]_0 [2]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [29]),
        .Q(\IP2Bus_Data_reg[0]_0 [29]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[30] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [1]),
        .Q(\IP2Bus_Data_reg[0]_0 [1]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[31] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [0]),
        .Q(\IP2Bus_Data_reg[0]_0 [0]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [28]),
        .Q(\IP2Bus_Data_reg[0]_0 [28]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [27]),
        .Q(\IP2Bus_Data_reg[0]_0 [27]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [26]),
        .Q(\IP2Bus_Data_reg[0]_0 [26]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [25]),
        .Q(\IP2Bus_Data_reg[0]_0 [25]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [24]),
        .Q(\IP2Bus_Data_reg[0]_0 [24]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [23]),
        .Q(\IP2Bus_Data_reg[0]_0 [23]),
        .R(SR));
  FDRE \IP2Bus_Data_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\IP2Bus_Data_reg[0]_1 [22]),
        .Q(\IP2Bus_Data_reg[0]_0 [22]),
        .R(SR));
  FDRE IP2Bus_RdAck_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(IP2Bus_RdAck0),
        .Q(p_8_out),
        .R(SR));
  FDRE IP2Bus_WrAck_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(IP2Bus_WrAck0),
        .Q(p_7_out),
        .R(SR));
  semicap_cdc_sync__parameterized1_18 PLB2ICAP_SYNCH1
       (.\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 (\cr_i_reg[0]_0 [4]),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_2 ),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_3 ),
        .cap_gnt(cap_gnt),
        .cap_rel(cap_rel),
        .icap_ce_cs(icap_ce_cs),
        .icap_req_d(icap_req_d),
        .icap_req_d_reg(icap_req_d_reg),
        .icap_req_d_reg_0(\WRFIFO.WRDATA_FIFO_I_n_48 ),
        .s_axi_aclk(s_axi_aclk),
        .scndry_out(\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ),
        .\size_cs_reg[11] (gate_icap_p),
        .\size_cs_reg[11]_0 (rnc[0]),
        .\size_cs_reg[11]_1 (rnc[1]));
  semicap_cdc_sync__parameterized1_19 PLB2ICAP_SYNCH2
       (.\FSM_sequential_icap_nstate_cs[0]_i_4 (gate_icap_p),
        .\FSM_sequential_icap_nstate_cs[0]_i_4_0 (rnc[1]),
        .\FSM_sequential_icap_nstate_cs[2]_i_4 (\FSM_sequential_icap_nstate_cs[2]_i_4 ),
        .\FSM_sequential_icap_nstate_cs[2]_i_4_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ),
        .\FSM_sequential_icap_nstate_cs_reg[1] (\FSM_sequential_icap_nstate_cs_reg[1] ),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 (\cr_i_reg[0]_0 [1]),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_4 ),
        .cap_gnt(cap_gnt),
        .cap_rel(cap_rel),
        .icap_nstate_ns129_out__1(icap_nstate_ns129_out__1),
        .s_axi_aclk(s_axi_aclk),
        .scndry_out(rnc[0]));
  semicap_cdc_sync__parameterized1_20 PLB2ICAP_SYNCH3
       (.\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_IN_cdc_to_0 (\cr_i_reg[0]_0 [0]),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 ),
        .cap_gnt(cap_gnt),
        .cap_rel(cap_rel),
        .prmry_in(empty),
        .s_axi_aclk(s_axi_aclk),
        .scndry_out(rnc[1]),
        .\xpm_fifo_instance.xpm_fifo_async_inst_i_4 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_1 ),
        .\xpm_fifo_instance.xpm_fifo_async_inst_i_4_0 (\FSM_sequential_icap_nstate_cs[2]_i_4 [2]),
        .\xpm_fifo_instance.xpm_fifo_async_inst_i_5_0 (rnc[0]));
  semicap_async_fifo_fg__parameterized0 \RD_FIFO.RDDATA_FIFO_I 
       (.\AXI_HW_wdata[1] (\AXI_HW_wdata[1] ),
        .Bus_RNW_reg(Bus_RNW_reg),
        .\GEN_IP_IRPT_STATUS_REG[1].GEN_REG_STATUS.ip_irpt_status_reg_reg[1] (\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ),
        .Q(Q),
        .dout(dout),
        .gate_signal_p_reg(gate_icap_p),
        .\gwdc.wr_data_count_i_reg[8] (\RD_FIFO.RDDATA_FIFO_I_n_42 ),
        .ipbus_1(ipbus_1),
        .ipbus_2(ipbus_2),
        .p_1_in5_in(p_1_in5_in),
        .p_7_in(p_7_in),
        .prmry_in(\RD_FIFO.RDDATA_FIFO_I_n_43 ),
        .rd_data_count(rd_data_count),
        .rdfifo_wren(rdfifo_wren),
        .rst(fifo_clear_rd),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_wdata(s_axi_wdata[1]));
  semicap_cdc_sync__parameterized2 \RD_FIFO.RDFULL_SYNCH 
       (.\RD_FIFO.fifo_full_mask_reg (\RD_FIFO.RDFULL_SYNCH_n_0 ),
        .\RD_FIFO.fifo_full_mask_reg_0 (SR),
        .abort_onreset(abort_onreset),
        .fifo_full_mask(fifo_full_mask),
        .fifo_rst(fifo_rst),
        .prmry_in(\RD_FIFO.RDDATA_FIFO_I_n_43 ),
        .rdfifo_full_d1(rdfifo_full_d1),
        .s_axi_aclk(s_axi_aclk),
        .scndry_out(rdfifo_full_ip2bus));
  FDRE \RD_FIFO.fifo_full_mask_reg 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\RD_FIFO.RDFULL_SYNCH_n_0 ),
        .Q(fifo_full_mask),
        .R(1'b0));
  FDRE \RD_FIFO.rdfifo_full_d1_reg 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(rdfifo_full_ip2bus),
        .Q(rdfifo_full_d1),
        .R(1'b0));
  FDRE \Size_counter_i3_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[0]),
        .Q(\Size_counter_i3_reg[0]_0 [11]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[10]),
        .Q(\Size_counter_i3_reg[0]_0 [1]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[11]),
        .Q(\Size_counter_i3_reg[0]_0 [0]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[1]),
        .Q(\Size_counter_i3_reg[0]_0 [10]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[2]),
        .Q(\Size_counter_i3_reg[0]_0 [9]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[3]),
        .Q(\Size_counter_i3_reg[0]_0 [8]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[4]),
        .Q(\Size_counter_i3_reg[0]_0 [7]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[5]),
        .Q(\Size_counter_i3_reg[0]_0 [6]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[6]),
        .Q(\Size_counter_i3_reg[0]_0 [5]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[7]),
        .Q(\Size_counter_i3_reg[0]_0 [4]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[8]),
        .Q(\Size_counter_i3_reg[0]_0 [3]),
        .R(areset_n));
  FDRE \Size_counter_i3_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Size_counter_i2[9]),
        .Q(\Size_counter_i3_reg[0]_0 [2]),
        .R(areset_n));
  semicap_async_fifo_fg \WRFIFO.WRDATA_FIFO_I 
       (.Bus_RNW_reg(Bus_RNW_reg),
        .D(D),
        .\FSM_sequential_icap_nstate_cs[1]_i_5 (rnc[0]),
        .\FSM_sequential_icap_nstate_cs[1]_i_5_0 (gate_icap_p),
        .\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 (\WRFIFO.WRDATA_FIFO_I_n_48 ),
        .\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] (\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0] ),
        .\GEN_IP_IRPT_STATUS_REG[0].GEN_REG_STATUS.ip_irpt_status_reg_reg[0]_0 (\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ),
        .Send_done_ns8_in(Send_done_ns8_in),
        .abort_onreset(abort_onreset),
        .busip_1(busip_1),
        .cap_gnt(cap_gnt),
        .cap_rel(cap_rel),
        .fifo_clear_del_reg(SR),
        .fifo_rst(fifo_rst),
        .\gen_pf_ic_rc.ram_empty_i_reg (\gen_pf_ic_rc.ram_empty_i_reg ),
        .\gwdc.wr_data_count_i_reg[10] (\gwdc.wr_data_count_i_reg[10] ),
        .icap_rel_d2(icap_rel_d2),
        .icap_req_d11__0(\icap_statemachine_I1/icap_req_d11__0 ),
        .p_8_in(p_8_in),
        .prmry_in(empty),
        .rd_en(rd_en),
        .rst(fifo_clear),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_wdata(s_axi_wdata),
        .scndry_out(rnc[1]),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en));
  semicap_cdc_sync__parameterized1_21 \WRFIFO.WREMPTY_SYNCH 
       (.\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4_0 (\GENERATE_LEVEL_P_S_CDC.SINGLE_BIT.CROSS_PLEVEL_IN2SCNDRY_s_level_out_d4 ),
        .\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] (\GEN_IP_IRPT_STATUS_REG[2].GEN_REG_STATUS.ip_irpt_status_reg_reg[2] ),
        .empty(empty),
        .p_1_in2_in(p_1_in2_in),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_wdata(s_axi_wdata[2]));
  FDSE #(
    .INIT(1'b0)) 
    abort_onreset_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(abort_onreset0),
        .Q(abort_onreset),
        .S(areset_n));
  FDRE busip_1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_11_in),
        .Q(busip_1),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h04)) 
    cap_req_INST_0_i_4
       (.I0(cap_rel),
        .I1(cap_gnt),
        .I2(gate_icap_p),
        .O(\icap_statemachine_I1/icap_req_d11__0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cr_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[0]),
        .D(s_axi_wdata[4]),
        .Q(\cr_i_reg[0]_0 [4]),
        .R(ICAP2PLB_SYNCH2_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \cr_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[0]),
        .D(s_axi_wdata[3]),
        .Q(\cr_i_reg[0]_0 [3]),
        .R(ICAP2PLB_SYNCH2_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \cr_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[0]),
        .D(s_axi_wdata[2]),
        .Q(\cr_i_reg[0]_0 [2]),
        .R(ICAP2PLB_SYNCH2_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \cr_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[0]),
        .D(s_axi_wdata[1]),
        .Q(\cr_i_reg[0]_0 [1]),
        .R(ICAP2PLB_SYNCH2_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \cr_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[0]),
        .D(s_axi_wdata[0]),
        .Q(\cr_i_reg[0]_0 [0]),
        .R(ICAP2PLB_SYNCH2_n_1));
  FDRE #(
    .INIT(1'b0)) 
    fifo_clear_del_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(fifo_clear),
        .Q(fifo_clear_del),
        .R(areset_n));
  FDRE fifo_clear_for_iclk_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(fifo_clear_iclk),
        .Q(fifo_clear_for_iclk),
        .R(1'b0));
  FDRE fifo_clear_to_iclk2_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(fifo_clear_to_iclk),
        .Q(fifo_clear_to_iclk2),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hAAAB5554)) 
    fifo_clear_to_iclk_i_1
       (.I0(fifo_clear_del),
        .I1(SR),
        .I2(abort_onreset),
        .I3(fifo_rst),
        .I4(fifo_clear_to_iclk),
        .O(fifo_clear_to_iclk_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    fifo_clear_to_iclk_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(fifo_clear_to_iclk_i_1_n_0),
        .Q(fifo_clear_to_iclk),
        .R(areset_n));
  FDSE #(
    .INIT(1'b0)) 
    fifo_rst_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\cr_i_reg[0]_0 [2]),
        .Q(fifo_rst),
        .S(areset_n));
  FDRE gate_signal_p_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\RD_FIFO.RDDATA_FIFO_I_n_42 ),
        .Q(gate_icap_p),
        .R(scndry_out));
  LUT3 #(
    .INIT(8'hE0)) 
    ip2bus_rdack_i_i_2
       (.I0(p_8_out),
        .I1(intr2bus_rdack),
        .I2(s_axi_aresetn),
        .O(IP2Bus_RdAck_reg_0));
  FDRE ipbus_1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_10_in),
        .Q(ipbus_1),
        .R(1'b0));
  FDRE ipbus_2_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(ipbus_1),
        .Q(ipbus_2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    ipbus_ack_fifo_i_1
       (.I0(ipbus_1),
        .I1(ipbus_2),
        .O(ipbus_ack));
  FDRE ipbus_ack_fifo_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(ipbus_ack),
        .Q(ipbus_ack_fifo),
        .R(1'b0));
  FDRE \sr_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [31]),
        .Q(sr_i[0]),
        .R(scndry_out));
  FDRE \sr_i_reg[10] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [21]),
        .Q(sr_i[10]),
        .R(scndry_out));
  FDRE \sr_i_reg[11] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [20]),
        .Q(sr_i[11]),
        .R(scndry_out));
  FDRE \sr_i_reg[12] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [19]),
        .Q(sr_i[12]),
        .R(scndry_out));
  FDRE \sr_i_reg[13] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [18]),
        .Q(sr_i[13]),
        .R(scndry_out));
  FDRE \sr_i_reg[14] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [17]),
        .Q(sr_i[14]),
        .R(scndry_out));
  FDRE \sr_i_reg[15] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [16]),
        .Q(sr_i[15]),
        .R(scndry_out));
  FDRE \sr_i_reg[16] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [15]),
        .Q(sr_i[16]),
        .R(scndry_out));
  FDRE \sr_i_reg[17] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [14]),
        .Q(sr_i[17]),
        .R(scndry_out));
  FDRE \sr_i_reg[18] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [13]),
        .Q(sr_i[18]),
        .R(scndry_out));
  FDRE \sr_i_reg[19] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [12]),
        .Q(sr_i[19]),
        .R(scndry_out));
  FDRE \sr_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [30]),
        .Q(sr_i[1]),
        .R(scndry_out));
  FDRE \sr_i_reg[20] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [11]),
        .Q(sr_i[20]),
        .R(scndry_out));
  FDRE \sr_i_reg[21] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [10]),
        .Q(sr_i[21]),
        .R(scndry_out));
  FDRE \sr_i_reg[22] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [9]),
        .Q(sr_i[22]),
        .R(scndry_out));
  FDRE \sr_i_reg[23] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [8]),
        .Q(sr_i[23]),
        .R(scndry_out));
  FDRE \sr_i_reg[24] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [7]),
        .Q(sr_i[24]),
        .R(scndry_out));
  FDRE \sr_i_reg[25] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [6]),
        .Q(sr_i[25]),
        .R(scndry_out));
  FDRE \sr_i_reg[26] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [5]),
        .Q(sr_i[26]),
        .R(scndry_out));
  FDRE \sr_i_reg[27] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [4]),
        .Q(sr_i[27]),
        .R(scndry_out));
  FDRE \sr_i_reg[28] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [3]),
        .Q(sr_i[28]),
        .R(scndry_out));
  FDRE \sr_i_reg[29] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [2]),
        .Q(sr_i[29]),
        .R(scndry_out));
  FDRE \sr_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [29]),
        .Q(sr_i[2]),
        .R(scndry_out));
  FDRE \sr_i_reg[30] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [1]),
        .Q(sr_i[30]),
        .R(scndry_out));
  FDRE \sr_i_reg[31] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [0]),
        .Q(sr_i[31]),
        .R(scndry_out));
  FDRE \sr_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [28]),
        .Q(sr_i[3]),
        .R(scndry_out));
  FDRE \sr_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [27]),
        .Q(sr_i[4]),
        .R(scndry_out));
  FDRE \sr_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [26]),
        .Q(sr_i[5]),
        .R(scndry_out));
  FDRE \sr_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [25]),
        .Q(sr_i[6]),
        .R(scndry_out));
  FDRE \sr_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [24]),
        .Q(sr_i[7]),
        .R(scndry_out));
  FDRE \sr_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [23]),
        .Q(sr_i[8]),
        .R(scndry_out));
  FDRE \sr_i_reg[9] 
       (.C(s_axi_aclk),
        .CE(E),
        .D(\sr_i_reg[0]_0 [22]),
        .Q(sr_i[9]),
        .R(scndry_out));
  FDSE #(
    .INIT(1'b0)) 
    sw_reset_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\cr_i_reg[0]_0 [3]),
        .Q(SR),
        .S(areset_n));
  LUT2 #(
    .INIT(4'hB)) 
    \sz_i[0]_i_1 
       (.I0(SR),
        .I1(s_axi_aresetn),
        .O(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[11]),
        .Q(sz_i[0]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[10] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[1]),
        .Q(sz_i[10]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[11] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[0]),
        .Q(sz_i[11]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[10]),
        .Q(sz_i[1]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[9]),
        .Q(sz_i[2]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[8]),
        .Q(sz_i[3]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[7]),
        .Q(sz_i[4]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[6]),
        .Q(sz_i[5]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[5]),
        .Q(sz_i[6]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[4]),
        .Q(sz_i[7]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[3]),
        .Q(sz_i[8]),
        .R(\sz_i[0]_i_1_n_0 ));
  FDRE \sz_i_reg[9] 
       (.C(s_axi_aclk),
        .CE(bus2ip_wrce[1]),
        .D(s_axi_wdata[2]),
        .Q(sz_i[9]),
        .R(\sz_i[0]_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "minority_voter_status_latch" *) 
module semicap_minority_voter_status_latch
   (Q,
    iMinVoterRegClearStrobe,
    iRst_n,
    iRpMinVoter,
    iClk);
  output [3:0]Q;
  input iMinVoterRegClearStrobe;
  input iRst_n;
  input [3:0]iRpMinVoter;
  input iClk;

  wire \MinVoterStatus[0]_i_1_n_0 ;
  wire \MinVoterStatus[1]_i_1_n_0 ;
  wire \MinVoterStatus[2]_i_1_n_0 ;
  wire \MinVoterStatus[3]_i_1_n_0 ;
  wire \MinVoterStatus[3]_i_2_n_0 ;
  wire [3:0]Q;
  wire iClk;
  wire iMinVoterRegClearStrobe;
  wire [3:0]iRpMinVoter;
  wire iRst_n;

  LUT2 #(
    .INIT(4'hE)) 
    \MinVoterStatus[0]_i_1 
       (.I0(Q[0]),
        .I1(iRpMinVoter[0]),
        .O(\MinVoterStatus[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \MinVoterStatus[1]_i_1 
       (.I0(Q[1]),
        .I1(iRpMinVoter[1]),
        .O(\MinVoterStatus[1]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \MinVoterStatus[2]_i_1 
       (.I0(Q[2]),
        .I1(iRpMinVoter[2]),
        .O(\MinVoterStatus[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \MinVoterStatus[3]_i_1 
       (.I0(iMinVoterRegClearStrobe),
        .I1(iRst_n),
        .O(\MinVoterStatus[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \MinVoterStatus[3]_i_2 
       (.I0(Q[3]),
        .I1(iRpMinVoter[3]),
        .O(\MinVoterStatus[3]_i_2_n_0 ));
  FDRE \MinVoterStatus_reg[0] 
       (.C(iClk),
        .CE(1'b1),
        .D(\MinVoterStatus[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(\MinVoterStatus[3]_i_1_n_0 ));
  FDRE \MinVoterStatus_reg[1] 
       (.C(iClk),
        .CE(1'b1),
        .D(\MinVoterStatus[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(\MinVoterStatus[3]_i_1_n_0 ));
  FDRE \MinVoterStatus_reg[2] 
       (.C(iClk),
        .CE(1'b1),
        .D(\MinVoterStatus[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(\MinVoterStatus[3]_i_1_n_0 ));
  FDRE \MinVoterStatus_reg[3] 
       (.C(iClk),
        .CE(1'b1),
        .D(\MinVoterStatus[3]_i_2_n_0 ),
        .Q(Q[3]),
        .R(\MinVoterStatus[3]_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "sem_ultra_0_spi" *) 
module semicap_sem_ultra_0_spi
   (spi_d,
    spi_c,
    spi_s_n,
    fetch_rxdata,
    fetch_rxempty,
    fetch_txfull,
    fetch_rxread,
    icap_clk,
    spi_q,
    fetch_txwrite,
    fetch_txdata);
  output spi_d;
  output spi_c;
  output spi_s_n;
  output [7:0]fetch_rxdata;
  output fetch_rxempty;
  output fetch_txfull;
  input fetch_rxread;
  input icap_clk;
  input spi_q;
  input fetch_txwrite;
  input [7:0]fetch_txdata;

  wire D0;
  wire \_inferred__0/i___0_carry_n_0 ;
  wire \_inferred__0/i___0_carry_n_1 ;
  wire \_inferred__0/i___0_carry_n_2 ;
  wire \_inferred__0/i___0_carry_n_3 ;
  wire \_inferred__0/i___0_carry_n_4 ;
  wire \_inferred__0/i___0_carry_n_5 ;
  wire \_inferred__0/i___0_carry_n_6 ;
  wire \_inferred__0/i___0_carry_n_7 ;
  wire \dat_len[0]_i_2_n_0 ;
  wire \dat_len[1]_i_2_n_0 ;
  wire \dat_len[2]_i_2_n_0 ;
  wire \dat_len[3]_i_2_n_0 ;
  wire \dat_len[4]_i_2_n_0 ;
  wire \dat_len[4]_i_3_n_0 ;
  wire \dat_len[4]_i_4_n_0 ;
  wire \dat_len[4]_i_5_n_0 ;
  wire \dat_len[5]_i_2_n_0 ;
  wire \dat_len[6]_i_2_n_0 ;
  wire \dat_len[7]_i_2_n_0 ;
  wire \dat_len[7]_i_3_n_0 ;
  wire \dat_len[7]_i_4_n_0 ;
  wire \dat_len[8]_i_1_n_0 ;
  wire \dat_len[8]_i_2_n_0 ;
  wire \dat_len[8]_i_3_n_0 ;
  wire \dat_len_reg_n_0_[0] ;
  wire \dat_len_reg_n_0_[1] ;
  wire \dat_len_reg_n_0_[2] ;
  wire \dat_len_reg_n_0_[3] ;
  wire \dat_len_reg_n_0_[4] ;
  wire \dat_len_reg_n_0_[5] ;
  wire \dat_len_reg_n_0_[6] ;
  wire \dat_len_reg_n_0_[7] ;
  wire \dat_len_reg_n_0_[8] ;
  wire [0:0]data12;
  wire example_spi_byte_n_11;
  wire example_spi_byte_n_12;
  wire example_spi_byte_n_26;
  wire example_spi_byte_n_27;
  wire [7:0]fetch_rxdata;
  wire fetch_rxempty;
  wire fetch_rxread;
  wire [7:0]fetch_txdata;
  wire fetch_txfull;
  wire fetch_txwrite;
  wire g0_b0_n_0;
  wire g0_b8_n_0;
  wire i___0_carry__0_i_1_n_0;
  wire i___0_carry_i_10_n_0;
  wire i___0_carry_i_11_n_0;
  wire i___0_carry_i_12_n_0;
  wire i___0_carry_i_13_n_0;
  wire i___0_carry_i_14_n_0;
  wire i___0_carry_i_1_n_0;
  wire i___0_carry_i_2_n_0;
  wire i___0_carry_i_3_n_0;
  wire i___0_carry_i_4_n_0;
  wire i___0_carry_i_5_n_0;
  wire i___0_carry_i_6_n_0;
  wire i___0_carry_i_9_n_0;
  wire icap_clk;
  wire [7:0]ns_dat_len;
  wire ns_rxprocessed;
  wire ns_sel_n;
  wire ns_start;
  (* DONT_TOUCH *) wire [4:0]ns_state;
  wire [4:0]ns_state__0;
  wire ns_state_inferred__0_i_18_n_0;
  wire ns_state_inferred__0_i_7_n_0;
  wire ns_txprocessed;
  wire [8:0]p_0_in1_in;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire q_sync_g;
  wire q_sync_h;
  wire reset;
  wire [7:1]rx;
  wire [0:0]rx_0;
  wire rx_mbox_dst_full;
  wire rx_mbox_dst_full_i_1_n_0;
  wire rx_mbox_dst_irq;
  wire rx_mbox_dst_irq_i_1_n_0;
  wire rx_mbox_dst_read;
  wire [7:0]rx_mbox_src_data;
  wire rx_mbox_src_irq;
  wire rx_mbox_src_read;
  wire rx_mbox_src_write;
  wire rxv;
  wire rxvd;
  wire sel_n;
  wire spi_c;
  wire spi_d;
  wire spi_q;
  wire spi_s_n;
  wire spi_s_ofd_i_2_n_0;
  wire spi_s_ofd_i_3_n_0;
  wire spi_s_ofd_i_4_n_0;
  wire start;
  (* DONT_TOUCH *) wire [4:0]state;
  wire \state[0]_i_5_n_0 ;
  wire \state[2]_i_2_n_0 ;
  wire \state[2]_i_4_n_0 ;
  wire \state[4]_i_2_n_0 ;
  wire \state[4]_i_4_n_0 ;
  (* DONT_TOUCH *) wire [4:0]state__0;
  wire [7:0]tx_mbox_dst_data;
  wire tx_mbox_dst_full_i_1_n_0;
  wire tx_mbox_dst_read;
  wire [7:0]tx_mbox_src_data;
  wire tx_mbox_src_full_i_1_n_0;
  wire tx_mbox_src_write;
  wire [7:0]\NLW__inferred__0/i___0_carry__0_CO_UNCONNECTED ;
  wire [7:1]\NLW__inferred__0/i___0_carry__0_O_UNCONNECTED ;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \_inferred__0/i___0_carry 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\_inferred__0/i___0_carry_n_0 ,\_inferred__0/i___0_carry_n_1 ,\_inferred__0/i___0_carry_n_2 ,\_inferred__0/i___0_carry_n_3 ,\_inferred__0/i___0_carry_n_4 ,\_inferred__0/i___0_carry_n_5 ,\_inferred__0/i___0_carry_n_6 ,\_inferred__0/i___0_carry_n_7 }),
        .DI({i___0_carry_i_1_n_0,i___0_carry_i_2_n_0,i___0_carry_i_3_n_0,i___0_carry_i_4_n_0,i___0_carry_i_5_n_0,i___0_carry_i_6_n_0,example_spi_byte_n_11,example_spi_byte_n_12}),
        .O(p_0_in1_in[7:0]),
        .S({i___0_carry_i_9_n_0,i___0_carry_i_10_n_0,i___0_carry_i_11_n_0,i___0_carry_i_12_n_0,i___0_carry_i_13_n_0,i___0_carry_i_14_n_0,example_spi_byte_n_26,example_spi_byte_n_27}));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \_inferred__0/i___0_carry__0 
       (.CI(\_inferred__0/i___0_carry_n_0 ),
        .CI_TOP(1'b0),
        .CO(\NLW__inferred__0/i___0_carry__0_CO_UNCONNECTED [7:0]),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW__inferred__0/i___0_carry__0_O_UNCONNECTED [7:1],p_0_in1_in[8]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,i___0_carry__0_i_1_n_0}));
  LUT6 #(
    .INIT(64'hB8B8FFFFFF00B8B8)) 
    \dat_len[0]_i_1 
       (.I0(tx_mbox_dst_data[0]),
        .I1(\dat_len[4]_i_3_n_0 ),
        .I2(p_0_in1_in[0]),
        .I3(\dat_len[0]_i_2_n_0 ),
        .I4(\dat_len[4]_i_2_n_0 ),
        .I5(state[0]),
        .O(ns_dat_len[0]));
  LUT5 #(
    .INIT(32'hCA0FFFAF)) 
    \dat_len[0]_i_2 
       (.I0(tx_mbox_dst_data[0]),
        .I1(p_0_in1_in[0]),
        .I2(state[1]),
        .I3(state[2]),
        .I4(state[4]),
        .O(\dat_len[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2F2F2F2220202022)) 
    \dat_len[1]_i_1 
       (.I0(p_0_in1_in[1]),
        .I1(\dat_len[7]_i_2_n_0 ),
        .I2(\dat_len[7]_i_3_n_0 ),
        .I3(tx_mbox_dst_data[1]),
        .I4(state[4]),
        .I5(\dat_len[1]_i_2_n_0 ),
        .O(ns_dat_len[1]));
  LUT5 #(
    .INIT(32'hEFEAF500)) 
    \dat_len[1]_i_2 
       (.I0(state[3]),
        .I1(p_0_in1_in[1]),
        .I2(state[1]),
        .I3(tx_mbox_dst_data[1]),
        .I4(state[2]),
        .O(\dat_len[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2F2F2F2220202022)) 
    \dat_len[2]_i_1 
       (.I0(p_0_in1_in[2]),
        .I1(\dat_len[7]_i_2_n_0 ),
        .I2(\dat_len[7]_i_3_n_0 ),
        .I3(tx_mbox_dst_data[2]),
        .I4(state[4]),
        .I5(\dat_len[2]_i_2_n_0 ),
        .O(ns_dat_len[2]));
  LUT5 #(
    .INIT(32'hEFEAF500)) 
    \dat_len[2]_i_2 
       (.I0(state[3]),
        .I1(p_0_in1_in[2]),
        .I2(state[1]),
        .I3(tx_mbox_dst_data[2]),
        .I4(state[2]),
        .O(\dat_len[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2F2F2F2220202022)) 
    \dat_len[3]_i_1 
       (.I0(p_0_in1_in[3]),
        .I1(\dat_len[7]_i_2_n_0 ),
        .I2(\dat_len[7]_i_3_n_0 ),
        .I3(tx_mbox_dst_data[3]),
        .I4(state[4]),
        .I5(\dat_len[3]_i_2_n_0 ),
        .O(ns_dat_len[3]));
  LUT5 #(
    .INIT(32'hEFEAF500)) 
    \dat_len[3]_i_2 
       (.I0(state[3]),
        .I1(p_0_in1_in[3]),
        .I2(state[1]),
        .I3(tx_mbox_dst_data[3]),
        .I4(state[2]),
        .O(\dat_len[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000F6FFF666)) 
    \dat_len[4]_i_1 
       (.I0(state[0]),
        .I1(\dat_len[4]_i_2_n_0 ),
        .I2(tx_mbox_dst_data[4]),
        .I3(\dat_len[4]_i_3_n_0 ),
        .I4(p_0_in1_in[4]),
        .I5(\dat_len[4]_i_4_n_0 ),
        .O(ns_dat_len[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \dat_len[4]_i_2 
       (.I0(state[3]),
        .I1(state[2]),
        .O(\dat_len[4]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \dat_len[4]_i_3 
       (.I0(state[4]),
        .I1(state[2]),
        .I2(state[3]),
        .O(\dat_len[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00C04040D0D00000)) 
    \dat_len[4]_i_4 
       (.I0(tx_mbox_dst_data[4]),
        .I1(state[4]),
        .I2(\dat_len[4]_i_5_n_0 ),
        .I3(p_0_in1_in[4]),
        .I4(state[1]),
        .I5(state[2]),
        .O(\dat_len[4]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h06)) 
    \dat_len[4]_i_5 
       (.I0(state[2]),
        .I1(state[3]),
        .I2(state[0]),
        .O(\dat_len[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h2F2F2F2220202022)) 
    \dat_len[5]_i_1 
       (.I0(p_0_in1_in[5]),
        .I1(\dat_len[7]_i_2_n_0 ),
        .I2(\dat_len[7]_i_3_n_0 ),
        .I3(tx_mbox_dst_data[5]),
        .I4(state[4]),
        .I5(\dat_len[5]_i_2_n_0 ),
        .O(ns_dat_len[5]));
  LUT5 #(
    .INIT(32'hEFEAF500)) 
    \dat_len[5]_i_2 
       (.I0(state[3]),
        .I1(p_0_in1_in[5]),
        .I2(state[1]),
        .I3(tx_mbox_dst_data[5]),
        .I4(state[2]),
        .O(\dat_len[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2F2F2F2220202022)) 
    \dat_len[6]_i_1 
       (.I0(p_0_in1_in[6]),
        .I1(\dat_len[7]_i_2_n_0 ),
        .I2(\dat_len[7]_i_3_n_0 ),
        .I3(tx_mbox_dst_data[6]),
        .I4(state[4]),
        .I5(\dat_len[6]_i_2_n_0 ),
        .O(ns_dat_len[6]));
  LUT5 #(
    .INIT(32'hEFEAF500)) 
    \dat_len[6]_i_2 
       (.I0(state[3]),
        .I1(p_0_in1_in[6]),
        .I2(state[1]),
        .I3(tx_mbox_dst_data[6]),
        .I4(state[2]),
        .O(\dat_len[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2F2F2F2220202022)) 
    \dat_len[7]_i_1 
       (.I0(p_0_in1_in[7]),
        .I1(\dat_len[7]_i_2_n_0 ),
        .I2(\dat_len[7]_i_3_n_0 ),
        .I3(tx_mbox_dst_data[7]),
        .I4(state[4]),
        .I5(\dat_len[7]_i_4_n_0 ),
        .O(ns_dat_len[7]));
  LUT3 #(
    .INIT(8'h56)) 
    \dat_len[7]_i_2 
       (.I0(state[0]),
        .I1(state[2]),
        .I2(state[3]),
        .O(\dat_len[7]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hAB)) 
    \dat_len[7]_i_3 
       (.I0(state[0]),
        .I1(state[3]),
        .I2(state[4]),
        .O(\dat_len[7]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hEFEAF500)) 
    \dat_len[7]_i_4 
       (.I0(state[3]),
        .I1(p_0_in1_in[7]),
        .I2(state[1]),
        .I3(tx_mbox_dst_data[7]),
        .I4(state[2]),
        .O(\dat_len[7]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFF01FFFFFF010000)) 
    \dat_len[8]_i_1 
       (.I0(\dat_len[8]_i_2_n_0 ),
        .I1(state[3]),
        .I2(state[2]),
        .I3(\dat_len[8]_i_3_n_0 ),
        .I4(g0_b8_n_0),
        .I5(\dat_len_reg_n_0_[8] ),
        .O(\dat_len[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF1DFFFF)) 
    \dat_len[8]_i_2 
       (.I0(p_0_in1_in[8]),
        .I1(state[4]),
        .I2(tx_mbox_dst_data[0]),
        .I3(state[0]),
        .I4(state[1]),
        .O(\dat_len[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAA880080)) 
    \dat_len[8]_i_3 
       (.I0(p_0_in1_in[8]),
        .I1(state[2]),
        .I2(state[4]),
        .I3(state[3]),
        .I4(state[0]),
        .O(\dat_len[8]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \dat_len_reg[0] 
       (.C(icap_clk),
        .CE(g0_b0_n_0),
        .D(ns_dat_len[0]),
        .Q(\dat_len_reg_n_0_[0] ),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \dat_len_reg[1] 
       (.C(icap_clk),
        .CE(g0_b0_n_0),
        .D(ns_dat_len[1]),
        .Q(\dat_len_reg_n_0_[1] ),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \dat_len_reg[2] 
       (.C(icap_clk),
        .CE(g0_b0_n_0),
        .D(ns_dat_len[2]),
        .Q(\dat_len_reg_n_0_[2] ),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \dat_len_reg[3] 
       (.C(icap_clk),
        .CE(g0_b0_n_0),
        .D(ns_dat_len[3]),
        .Q(\dat_len_reg_n_0_[3] ),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \dat_len_reg[4] 
       (.C(icap_clk),
        .CE(g0_b0_n_0),
        .D(ns_dat_len[4]),
        .Q(\dat_len_reg_n_0_[4] ),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \dat_len_reg[5] 
       (.C(icap_clk),
        .CE(g0_b0_n_0),
        .D(ns_dat_len[5]),
        .Q(\dat_len_reg_n_0_[5] ),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \dat_len_reg[6] 
       (.C(icap_clk),
        .CE(g0_b0_n_0),
        .D(ns_dat_len[6]),
        .Q(\dat_len_reg_n_0_[6] ),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \dat_len_reg[7] 
       (.C(icap_clk),
        .CE(g0_b0_n_0),
        .D(ns_dat_len[7]),
        .Q(\dat_len_reg_n_0_[7] ),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \dat_len_reg[8] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\dat_len[8]_i_1_n_0 ),
        .Q(\dat_len_reg_n_0_[8] ),
        .R(reset));
  semicap_sem_ultra_0_spi_byte example_spi_byte
       (.D({rx,rx_0}),
        .DI({example_spi_byte_n_11,example_spi_byte_n_12}),
        .Q({\dat_len_reg_n_0_[7] ,\dat_len_reg_n_0_[6] ,\dat_len_reg_n_0_[5] ,\dat_len_reg_n_0_[4] ,\dat_len_reg_n_0_[3] ,\dat_len_reg_n_0_[2] ,\dat_len_reg_n_0_[1] ,\dat_len_reg_n_0_[0] }),
        .S({example_spi_byte_n_26,example_spi_byte_n_27}),
        .SR(reset),
        .data12(data12),
        .icap_clk(icap_clk),
        .in0(ns_state),
        .ns_rxprocessed(ns_rxprocessed),
        .ns_start(ns_start),
        .ns_state_inferred__0_i_1_0(ns_state_inferred__0_i_7_n_0),
        .ns_state_inferred__0_i_5_0(ns_state_inferred__0_i_18_n_0),
        .ns_txprocessed(ns_txprocessed),
        .out(state),
        .rx_mbox_src_read(rx_mbox_src_read),
        .rxv(rxv),
        .spi_c(spi_c),
        .spi_d(spi_d),
        .spi_q(spi_q),
        .start(start),
        .\state_reg[0]_0 (state__0),
        .\state_reg[0]_1 (\state[0]_i_5_n_0 ),
        .\state_reg[1]_0 (ns_state__0),
        .\state_reg[2]_0 (\state[2]_i_2_n_0 ),
        .\state_reg[2]_1 (\state[2]_i_4_n_0 ),
        .\state_reg[4]_0 (\state[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT1 #(
    .INIT(2'h1)) 
    fetch_rxempty_INST_0
       (.I0(rx_mbox_dst_full),
        .O(fetch_rxempty));
  LUT5 #(
    .INIT(32'h005157FE)) 
    g0_b0
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .O(g0_b0_n_0));
  LUT5 #(
    .INIT(32'h004557FE)) 
    g0_b8
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .O(g0_b8_n_0));
  LUT4 #(
    .INIT(16'h5955)) 
    i___0_carry__0_i_1
       (.I0(\dat_len_reg_n_0_[8] ),
        .I1(\dat_len_reg_n_0_[7] ),
        .I2(state[0]),
        .I3(state[4]),
        .O(i___0_carry__0_i_1_n_0));
  LUT3 #(
    .INIT(8'hFB)) 
    i___0_carry_i_1
       (.I0(\dat_len_reg_n_0_[6] ),
        .I1(state[4]),
        .I2(state[0]),
        .O(i___0_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h20DF)) 
    i___0_carry_i_10
       (.I0(\dat_len_reg_n_0_[5] ),
        .I1(state[0]),
        .I2(state[4]),
        .I3(\dat_len_reg_n_0_[6] ),
        .O(i___0_carry_i_10_n_0));
  LUT4 #(
    .INIT(16'h20DF)) 
    i___0_carry_i_11
       (.I0(\dat_len_reg_n_0_[4] ),
        .I1(state[0]),
        .I2(state[4]),
        .I3(\dat_len_reg_n_0_[5] ),
        .O(i___0_carry_i_11_n_0));
  LUT4 #(
    .INIT(16'h20DF)) 
    i___0_carry_i_12
       (.I0(\dat_len_reg_n_0_[3] ),
        .I1(state[0]),
        .I2(state[4]),
        .I3(\dat_len_reg_n_0_[4] ),
        .O(i___0_carry_i_12_n_0));
  LUT4 #(
    .INIT(16'h20DF)) 
    i___0_carry_i_13
       (.I0(\dat_len_reg_n_0_[2] ),
        .I1(state[0]),
        .I2(state[4]),
        .I3(\dat_len_reg_n_0_[3] ),
        .O(i___0_carry_i_13_n_0));
  LUT4 #(
    .INIT(16'h40BF)) 
    i___0_carry_i_14
       (.I0(\dat_len_reg_n_0_[1] ),
        .I1(state[0]),
        .I2(state[4]),
        .I3(\dat_len_reg_n_0_[2] ),
        .O(i___0_carry_i_14_n_0));
  LUT3 #(
    .INIT(8'hFB)) 
    i___0_carry_i_2
       (.I0(\dat_len_reg_n_0_[5] ),
        .I1(state[4]),
        .I2(state[0]),
        .O(i___0_carry_i_2_n_0));
  LUT3 #(
    .INIT(8'hFB)) 
    i___0_carry_i_3
       (.I0(\dat_len_reg_n_0_[4] ),
        .I1(state[4]),
        .I2(state[0]),
        .O(i___0_carry_i_3_n_0));
  LUT3 #(
    .INIT(8'hFB)) 
    i___0_carry_i_4
       (.I0(\dat_len_reg_n_0_[3] ),
        .I1(state[4]),
        .I2(state[0]),
        .O(i___0_carry_i_4_n_0));
  LUT3 #(
    .INIT(8'hFB)) 
    i___0_carry_i_5
       (.I0(\dat_len_reg_n_0_[2] ),
        .I1(state[4]),
        .I2(state[0]),
        .O(i___0_carry_i_5_n_0));
  LUT3 #(
    .INIT(8'h8F)) 
    i___0_carry_i_6
       (.I0(\dat_len_reg_n_0_[1] ),
        .I1(state[0]),
        .I2(state[4]),
        .O(i___0_carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h20DF)) 
    i___0_carry_i_9
       (.I0(\dat_len_reg_n_0_[6] ),
        .I1(state[0]),
        .I2(state[4]),
        .I3(\dat_len_reg_n_0_[7] ),
        .O(i___0_carry_i_9_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    ns_state_inferred__0_i_18
       (.I0(state[3]),
        .I1(state[2]),
        .O(ns_state_inferred__0_i_18_n_0));
  LUT4 #(
    .INIT(16'hFF7F)) 
    ns_state_inferred__0_i_7
       (.I0(state[2]),
        .I1(state[1]),
        .I2(rx_mbox_src_read),
        .I3(\state[4]_i_2_n_0 ),
        .O(ns_state_inferred__0_i_7_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_dst_data_reg[0] 
       (.C(icap_clk),
        .CE(rx_mbox_src_write),
        .D(rx_mbox_src_data[0]),
        .Q(fetch_rxdata[0]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_dst_data_reg[1] 
       (.C(icap_clk),
        .CE(rx_mbox_src_write),
        .D(rx_mbox_src_data[1]),
        .Q(fetch_rxdata[1]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_dst_data_reg[2] 
       (.C(icap_clk),
        .CE(rx_mbox_src_write),
        .D(rx_mbox_src_data[2]),
        .Q(fetch_rxdata[2]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_dst_data_reg[3] 
       (.C(icap_clk),
        .CE(rx_mbox_src_write),
        .D(rx_mbox_src_data[3]),
        .Q(fetch_rxdata[3]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_dst_data_reg[4] 
       (.C(icap_clk),
        .CE(rx_mbox_src_write),
        .D(rx_mbox_src_data[4]),
        .Q(fetch_rxdata[4]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_dst_data_reg[5] 
       (.C(icap_clk),
        .CE(rx_mbox_src_write),
        .D(rx_mbox_src_data[5]),
        .Q(fetch_rxdata[5]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_dst_data_reg[6] 
       (.C(icap_clk),
        .CE(rx_mbox_src_write),
        .D(rx_mbox_src_data[6]),
        .Q(fetch_rxdata[6]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_dst_data_reg[7] 
       (.C(icap_clk),
        .CE(rx_mbox_src_write),
        .D(rx_mbox_src_data[7]),
        .Q(fetch_rxdata[7]),
        .R(reset));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    rx_mbox_dst_full_i_1
       (.I0(rx_mbox_src_write),
        .I1(fetch_rxread),
        .I2(rx_mbox_dst_full),
        .O(rx_mbox_dst_full_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rx_mbox_dst_full_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx_mbox_dst_full_i_1_n_0),
        .Q(rx_mbox_dst_full),
        .R(reset));
  LUT2 #(
    .INIT(4'h2)) 
    rx_mbox_dst_irq_i_1
       (.I0(fetch_rxread),
        .I1(rx_mbox_dst_full),
        .O(rx_mbox_dst_irq_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rx_mbox_dst_irq_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx_mbox_dst_irq_i_1_n_0),
        .Q(rx_mbox_dst_irq),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    rx_mbox_dst_read_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_rxread),
        .Q(rx_mbox_dst_read),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_src_data_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx_0),
        .Q(rx_mbox_src_data[0]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_src_data_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx[1]),
        .Q(rx_mbox_src_data[1]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_src_data_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx[2]),
        .Q(rx_mbox_src_data[2]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_src_data_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx[3]),
        .Q(rx_mbox_src_data[3]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_src_data_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx[4]),
        .Q(rx_mbox_src_data[4]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_src_data_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx[5]),
        .Q(rx_mbox_src_data[5]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_src_data_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx[6]),
        .Q(rx_mbox_src_data[6]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \rx_mbox_src_data_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx[7]),
        .Q(rx_mbox_src_data[7]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    rx_mbox_src_irq_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx_mbox_dst_irq),
        .Q(rx_mbox_src_irq),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    rx_mbox_src_read_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(rx_mbox_dst_read),
        .Q(rx_mbox_src_read),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    rx_mbox_src_write_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_rxprocessed),
        .Q(rx_mbox_src_write),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    rxvd_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(rxv),
        .Q(rxvd),
        .R(1'b0));
  FDSE #(
    .INIT(1'b1)) 
    sel_n_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_sel_n),
        .Q(sel_n),
        .S(reset));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    spi_s_ofd
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_sel_n),
        .Q(spi_s_n),
        .S(reset));
  LUT6 #(
    .INIT(64'hAFAFABAAAAAAAAAA)) 
    spi_s_ofd_i_1
       (.I0(spi_s_ofd_i_2_n_0),
        .I1(\dat_len_reg_n_0_[4] ),
        .I2(spi_s_ofd_i_3_n_0),
        .I3(state[0]),
        .I4(state[4]),
        .I5(spi_s_ofd_i_4_n_0),
        .O(ns_sel_n));
  LUT6 #(
    .INIT(64'h0000000100011001)) 
    spi_s_ofd_i_2
       (.I0(state[2]),
        .I1(state[4]),
        .I2(state[0]),
        .I3(state[3]),
        .I4(\dat_len_reg_n_0_[4] ),
        .I5(state[1]),
        .O(spi_s_ofd_i_2_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    spi_s_ofd_i_3
       (.I0(state[3]),
        .I1(state[2]),
        .O(spi_s_ofd_i_3_n_0));
  LUT5 #(
    .INIT(32'h00E0FFFF)) 
    spi_s_ofd_i_4
       (.I0(rxvd),
        .I1(sel_n),
        .I2(state[1]),
        .I3(\state[4]_i_2_n_0 ),
        .I4(state[4]),
        .O(spi_s_ofd_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    start_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_start),
        .Q(start),
        .R(reset));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000000)) 
    \state[0]_i_5 
       (.I0(\dat_len_reg_n_0_[5] ),
        .I1(\dat_len_reg_n_0_[4] ),
        .I2(\dat_len_reg_n_0_[7] ),
        .I3(\dat_len_reg_n_0_[6] ),
        .I4(\state[4]_i_4_n_0 ),
        .I5(rx_mbox_src_read),
        .O(\state[0]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \state[2]_i_2 
       (.I0(state__0[1]),
        .I1(state__0[0]),
        .I2(\state[4]_i_2_n_0 ),
        .O(\state[2]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \state[2]_i_4 
       (.I0(state__0[1]),
        .I1(rx_mbox_src_read),
        .I2(\state[4]_i_2_n_0 ),
        .O(\state[2]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \state[4]_i_2 
       (.I0(\state[4]_i_4_n_0 ),
        .I1(\dat_len_reg_n_0_[6] ),
        .I2(\dat_len_reg_n_0_[7] ),
        .I3(\dat_len_reg_n_0_[4] ),
        .I4(\dat_len_reg_n_0_[5] ),
        .O(\state[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \state[4]_i_4 
       (.I0(\dat_len_reg_n_0_[1] ),
        .I1(\dat_len_reg_n_0_[8] ),
        .I2(\dat_len_reg_n_0_[2] ),
        .I3(\dat_len_reg_n_0_[3] ),
        .I4(\dat_len_reg_n_0_[0] ),
        .O(\state[4]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h2)) 
    state_inst
       (.I0(state__0[4]),
        .O(state[4]));
  LUT1 #(
    .INIT(2'h2)) 
    state_inst__0
       (.I0(state__0[3]),
        .O(state[3]));
  LUT1 #(
    .INIT(2'h2)) 
    state_inst__1
       (.I0(state__0[2]),
        .O(state[2]));
  LUT1 #(
    .INIT(2'h2)) 
    state_inst__2
       (.I0(state__0[1]),
        .O(state[1]));
  LUT1 #(
    .INIT(2'h2)) 
    state_inst__3
       (.I0(state__0[0]),
        .O(state[0]));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_ARBIDL:00000,S_MOVEW1:00001,S_PADSW1:00010,S_MOVEWV:00011,S_MOVECR:00100,S_PADSCR:00101,S_MOVEW2:00110,S_PADSW2:00111,S_MOVEEN:01000,S_PADSEN:01001,S_MOVEFR:01010,S_MOVEA3:01011,S_WAITA2:01100,S_MOVEA2:01101,S_WAITA1:01110,S_MOVEA1:01111,S_WAITA0:10000,S_MOVEA0:10001,S_WAITL1:10010,S_MOVEDM:10011,S_WAITL0:10100,S_MOVERX:10101,S_PICKUP:10110" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_state__0[0]),
        .Q(state__0[0]),
        .R(reset));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_ARBIDL:00000,S_MOVEW1:00001,S_PADSW1:00010,S_MOVEWV:00011,S_MOVECR:00100,S_PADSCR:00101,S_MOVEW2:00110,S_PADSW2:00111,S_MOVEEN:01000,S_PADSEN:01001,S_MOVEFR:01010,S_MOVEA3:01011,S_WAITA2:01100,S_MOVEA2:01101,S_WAITA1:01110,S_MOVEA1:01111,S_WAITA0:10000,S_MOVEA0:10001,S_WAITL1:10010,S_MOVEDM:10011,S_WAITL0:10100,S_MOVERX:10101,S_PICKUP:10110" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_state__0[1]),
        .Q(state__0[1]),
        .R(reset));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_ARBIDL:00000,S_MOVEW1:00001,S_PADSW1:00010,S_MOVEWV:00011,S_MOVECR:00100,S_PADSCR:00101,S_MOVEW2:00110,S_PADSW2:00111,S_MOVEEN:01000,S_PADSEN:01001,S_MOVEFR:01010,S_MOVEA3:01011,S_WAITA2:01100,S_MOVEA2:01101,S_WAITA1:01110,S_MOVEA1:01111,S_WAITA0:10000,S_MOVEA0:10001,S_WAITL1:10010,S_MOVEDM:10011,S_WAITL0:10100,S_MOVERX:10101,S_PICKUP:10110" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_state__0[2]),
        .Q(state__0[2]),
        .R(reset));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_ARBIDL:00000,S_MOVEW1:00001,S_PADSW1:00010,S_MOVEWV:00011,S_MOVECR:00100,S_PADSCR:00101,S_MOVEW2:00110,S_PADSW2:00111,S_MOVEEN:01000,S_PADSEN:01001,S_MOVEFR:01010,S_MOVEA3:01011,S_WAITA2:01100,S_MOVEA2:01101,S_WAITA1:01110,S_MOVEA1:01111,S_WAITA0:10000,S_MOVEA0:10001,S_WAITL1:10010,S_MOVEDM:10011,S_WAITL0:10100,S_MOVERX:10101,S_PICKUP:10110" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_state__0[3]),
        .Q(state__0[3]),
        .R(reset));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_ARBIDL:00000,S_MOVEW1:00001,S_PADSW1:00010,S_MOVEWV:00011,S_MOVECR:00100,S_PADSCR:00101,S_MOVEW2:00110,S_PADSW2:00111,S_MOVEEN:01000,S_PADSEN:01001,S_MOVEFR:01010,S_MOVEA3:01011,S_WAITA2:01100,S_MOVEA2:01101,S_WAITA1:01110,S_MOVEA1:01111,S_WAITA0:10000,S_MOVEA0:10001,S_WAITL1:10010,S_MOVEDM:10011,S_WAITL0:10100,S_MOVERX:10101,S_PICKUP:10110" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_state__0[4]),
        .Q(state__0[4]),
        .R(reset));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(q_sync_g),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    sync_h
       (.C(icap_clk),
        .CE(1'b1),
        .D(D0),
        .Q(q_sync_h),
        .S(rx_mbox_src_irq));
  LUT1 #(
    .INIT(2'h1)) 
    sync_h_i_1
       (.I0(q_sync_g),
        .O(D0));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    sync_i
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_h),
        .Q(reset),
        .S(rx_mbox_src_irq));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_dst_data_reg[0] 
       (.C(icap_clk),
        .CE(tx_mbox_src_write),
        .D(tx_mbox_src_data[0]),
        .Q(tx_mbox_dst_data[0]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_dst_data_reg[1] 
       (.C(icap_clk),
        .CE(tx_mbox_src_write),
        .D(tx_mbox_src_data[1]),
        .Q(tx_mbox_dst_data[1]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_dst_data_reg[2] 
       (.C(icap_clk),
        .CE(tx_mbox_src_write),
        .D(tx_mbox_src_data[2]),
        .Q(tx_mbox_dst_data[2]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_dst_data_reg[3] 
       (.C(icap_clk),
        .CE(tx_mbox_src_write),
        .D(tx_mbox_src_data[3]),
        .Q(tx_mbox_dst_data[3]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_dst_data_reg[4] 
       (.C(icap_clk),
        .CE(tx_mbox_src_write),
        .D(tx_mbox_src_data[4]),
        .Q(tx_mbox_dst_data[4]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_dst_data_reg[5] 
       (.C(icap_clk),
        .CE(tx_mbox_src_write),
        .D(tx_mbox_src_data[5]),
        .Q(tx_mbox_dst_data[5]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_dst_data_reg[6] 
       (.C(icap_clk),
        .CE(tx_mbox_src_write),
        .D(tx_mbox_src_data[6]),
        .Q(tx_mbox_dst_data[6]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_dst_data_reg[7] 
       (.C(icap_clk),
        .CE(tx_mbox_src_write),
        .D(tx_mbox_src_data[7]),
        .Q(tx_mbox_dst_data[7]),
        .R(reset));
  LUT3 #(
    .INIT(8'hDC)) 
    tx_mbox_dst_full_i_1
       (.I0(ns_txprocessed),
        .I1(tx_mbox_src_write),
        .I2(data12),
        .O(tx_mbox_dst_full_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    tx_mbox_dst_full_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(tx_mbox_dst_full_i_1_n_0),
        .Q(data12),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    tx_mbox_dst_read_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_txprocessed),
        .Q(tx_mbox_dst_read),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_src_data_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_txdata[0]),
        .Q(tx_mbox_src_data[0]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_src_data_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_txdata[1]),
        .Q(tx_mbox_src_data[1]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_src_data_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_txdata[2]),
        .Q(tx_mbox_src_data[2]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_src_data_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_txdata[3]),
        .Q(tx_mbox_src_data[3]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_src_data_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_txdata[4]),
        .Q(tx_mbox_src_data[4]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_src_data_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_txdata[5]),
        .Q(tx_mbox_src_data[5]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_src_data_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_txdata[6]),
        .Q(tx_mbox_src_data[6]),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    \tx_mbox_src_data_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_txdata[7]),
        .Q(tx_mbox_src_data[7]),
        .R(reset));
  LUT3 #(
    .INIT(8'hBA)) 
    tx_mbox_src_full_i_1
       (.I0(fetch_txwrite),
        .I1(tx_mbox_dst_read),
        .I2(fetch_txfull),
        .O(tx_mbox_src_full_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    tx_mbox_src_full_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(tx_mbox_src_full_i_1_n_0),
        .Q(fetch_txfull),
        .R(reset));
  FDRE #(
    .INIT(1'b0)) 
    tx_mbox_src_write_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(fetch_txwrite),
        .Q(tx_mbox_src_write),
        .R(reset));
endmodule

(* ORIG_REF_NAME = "sem_ultra_0_spi_byte" *) 
module semicap_sem_ultra_0_spi_byte
   (spi_d,
    spi_c,
    D,
    rxv,
    DI,
    ns_start,
    ns_rxprocessed,
    ns_txprocessed,
    in0,
    \state_reg[1]_0 ,
    S,
    SR,
    icap_clk,
    spi_q,
    out,
    rx_mbox_src_read,
    \state_reg[4]_0 ,
    \state_reg[0]_0 ,
    Q,
    ns_state_inferred__0_i_1_0,
    data12,
    \state_reg[0]_1 ,
    ns_state_inferred__0_i_5_0,
    \state_reg[2]_0 ,
    \state_reg[2]_1 ,
    start);
  output spi_d;
  output spi_c;
  output [7:0]D;
  output rxv;
  output [1:0]DI;
  output ns_start;
  output ns_rxprocessed;
  output ns_txprocessed;
  output [4:0]in0;
  output [4:0]\state_reg[1]_0 ;
  output [1:0]S;
  input [0:0]SR;
  input icap_clk;
  input spi_q;
  input [4:0]out;
  input rx_mbox_src_read;
  input \state_reg[4]_0 ;
  input [4:0]\state_reg[0]_0 ;
  input [7:0]Q;
  input ns_state_inferred__0_i_1_0;
  input [0:0]data12;
  input \state_reg[0]_1 ;
  input ns_state_inferred__0_i_5_0;
  input \state_reg[2]_0 ;
  input \state_reg[2]_1 ;
  input start;

  wire [7:0]D;
  wire [1:0]DI;
  wire [7:0]Q;
  wire [1:0]S;
  wire [0:0]SR;
  wire [0:0]data12;
  wire icap_clk;
  wire [4:0]in0;
  (* DONT_TOUCH *) wire [4:0]next_state;
  wire [4:0]next_state__0;
  wire ns_d_ofd;
  wire ns_rxprocessed;
  wire ns_start;
  wire ns_state_inferred__0_i_10_n_0;
  wire ns_state_inferred__0_i_11_n_0;
  wire ns_state_inferred__0_i_12_n_0;
  wire ns_state_inferred__0_i_13_n_0;
  wire ns_state_inferred__0_i_14_n_0;
  wire ns_state_inferred__0_i_15_n_0;
  wire ns_state_inferred__0_i_16_n_0;
  wire ns_state_inferred__0_i_17_n_0;
  wire ns_state_inferred__0_i_1_0;
  wire ns_state_inferred__0_i_5_0;
  wire ns_state_inferred__0_i_6_n_0;
  wire ns_state_inferred__0_i_8_n_0;
  wire ns_state_inferred__0_i_9_n_0;
  wire ns_txprocessed;
  wire [4:0]out;
  wire rx_mbox_src_read;
  wire rxv;
  wire spi_c;
  wire spi_d;
  wire spi_d_ofd_i_10_n_0;
  wire spi_d_ofd_i_11_n_0;
  wire spi_d_ofd_i_12_n_0;
  wire spi_d_ofd_i_13_n_0;
  wire spi_d_ofd_i_14_n_0;
  wire spi_d_ofd_i_15_n_0;
  wire spi_d_ofd_i_16_n_0;
  wire spi_d_ofd_i_17_n_0;
  wire spi_d_ofd_i_18_n_0;
  wire spi_d_ofd_i_19_n_0;
  wire spi_d_ofd_i_20_n_0;
  wire spi_d_ofd_i_21_n_0;
  wire spi_d_ofd_i_2_n_0;
  wire spi_d_ofd_i_3_n_0;
  wire spi_d_ofd_i_4_n_0;
  wire spi_d_ofd_i_5_n_0;
  wire spi_d_ofd_i_6_n_0;
  wire spi_d_ofd_i_7_n_0;
  wire spi_d_ofd_i_8_n_0;
  wire spi_d_ofd_i_9_n_0;
  wire spi_q;
  wire start;
  wire start_i_2_n_0;
  (* DONT_TOUCH *) wire [4:0]state;
  wire \state[0]_i_2_n_0 ;
  wire \state[0]_i_3_n_0 ;
  wire \state[0]_i_4_n_0 ;
  wire \state[1]_i_2_n_0 ;
  wire \state[1]_i_3_n_0 ;
  wire \state[2]_i_3_n_0 ;
  wire \state[4]_i_3_n_0 ;
  wire [4:0]\state_reg[0]_0 ;
  wire \state_reg[0]_1 ;
  wire [4:0]\state_reg[1]_0 ;
  wire \state_reg[2]_0 ;
  wire \state_reg[2]_1 ;
  wire \state_reg[4]_0 ;
  wire stp_a0;
  wire tx_mbox_dst_read_i_2_n_0;

  LUT4 #(
    .INIT(16'h965A)) 
    i___0_carry_i_15
       (.I0(DI[1]),
        .I1(out[4]),
        .I2(Q[1]),
        .I3(out[0]),
        .O(S[1]));
  (* HLUTNM = "lutpair0" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    i___0_carry_i_16
       (.I0(Q[0]),
        .I1(rxv),
        .I2(out[4]),
        .O(S[0]));
  (* HLUTNM = "lutpair0" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    i___0_carry_i_7
       (.I0(Q[0]),
        .I1(rxv),
        .I2(out[4]),
        .O(DI[1]));
  LUT3 #(
    .INIT(8'h59)) 
    i___0_carry_i_8
       (.I0(Q[0]),
        .I1(out[4]),
        .I2(rxv),
        .O(DI[0]));
  LUT6 #(
    .INIT(64'hBFFFFFFFAAAAAAAA)) 
    next_state_inferred__0_i_1
       (.I0(start),
        .I1(state[3]),
        .I2(state[1]),
        .I3(state[2]),
        .I4(state[0]),
        .I5(state[4]),
        .O(next_state[4]));
  LUT4 #(
    .INIT(16'h6AAA)) 
    next_state_inferred__0_i_2
       (.I0(state[3]),
        .I1(state[2]),
        .I2(state[0]),
        .I3(state[1]),
        .O(next_state[3]));
  LUT3 #(
    .INIT(8'h6A)) 
    next_state_inferred__0_i_3
       (.I0(state[2]),
        .I1(state[0]),
        .I2(state[1]),
        .O(next_state[2]));
  LUT2 #(
    .INIT(4'h6)) 
    next_state_inferred__0_i_4
       (.I0(state[1]),
        .I1(state[0]),
        .O(next_state[1]));
  LUT2 #(
    .INIT(4'h2)) 
    next_state_inferred__0_i_5
       (.I0(state[4]),
        .I1(state[0]),
        .O(next_state[0]));
  MUXF7 ns_state_inferred__0_i_1
       (.I0(ns_state_inferred__0_i_6_n_0),
        .I1(ns_state_inferred__0_i_1_0),
        .O(in0[4]),
        .S(out[4]));
  LUT6 #(
    .INIT(64'hAEAAAEAA04AAAEAA)) 
    ns_state_inferred__0_i_10
       (.I0(out[2]),
        .I1(out[0]),
        .I2(start_i_2_n_0),
        .I3(out[1]),
        .I4(rx_mbox_src_read),
        .I5(\state_reg[4]_0 ),
        .O(ns_state_inferred__0_i_10_n_0));
  LUT6 #(
    .INIT(64'hEF12FF0040B7FF00)) 
    ns_state_inferred__0_i_11
       (.I0(out[3]),
        .I1(\state_reg[4]_0 ),
        .I2(out[2]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(start_i_2_n_0),
        .O(ns_state_inferred__0_i_11_n_0));
  LUT5 #(
    .INIT(32'h4344CBCC)) 
    ns_state_inferred__0_i_12
       (.I0(out[2]),
        .I1(out[1]),
        .I2(start_i_2_n_0),
        .I3(out[0]),
        .I4(rx_mbox_src_read),
        .O(ns_state_inferred__0_i_12_n_0));
  LUT6 #(
    .INIT(64'h0000E20000000000)) 
    ns_state_inferred__0_i_13
       (.I0(\state_reg[4]_0 ),
        .I1(out[1]),
        .I2(start_i_2_n_0),
        .I3(out[0]),
        .I4(out[2]),
        .I5(out[3]),
        .O(ns_state_inferred__0_i_13_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF08000B30)) 
    ns_state_inferred__0_i_14
       (.I0(\state_reg[4]_0 ),
        .I1(out[0]),
        .I2(out[3]),
        .I3(out[2]),
        .I4(start_i_2_n_0),
        .I5(out[4]),
        .O(ns_state_inferred__0_i_14_n_0));
  LUT5 #(
    .INIT(32'h88800080)) 
    ns_state_inferred__0_i_15
       (.I0(out[2]),
        .I1(out[3]),
        .I2(data12),
        .I3(out[0]),
        .I4(start_i_2_n_0),
        .O(ns_state_inferred__0_i_15_n_0));
  LUT6 #(
    .INIT(64'hCC440044CCC000C0)) 
    ns_state_inferred__0_i_16
       (.I0(\state_reg[4]_0 ),
        .I1(ns_state_inferred__0_i_5_0),
        .I2(data12),
        .I3(out[0]),
        .I4(start_i_2_n_0),
        .I5(out[1]),
        .O(ns_state_inferred__0_i_16_n_0));
  LUT6 #(
    .INIT(64'h070700778F8F88FF)) 
    ns_state_inferred__0_i_17
       (.I0(out[2]),
        .I1(out[1]),
        .I2(start_i_2_n_0),
        .I3(data12),
        .I4(out[0]),
        .I5(\state_reg[0]_1 ),
        .O(ns_state_inferred__0_i_17_n_0));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT2 #(
    .INIT(4'h4)) 
    ns_state_inferred__0_i_2
       (.I0(out[4]),
        .I1(ns_state_inferred__0_i_8_n_0),
        .O(in0[3]));
  MUXF7 ns_state_inferred__0_i_3
       (.I0(ns_state_inferred__0_i_9_n_0),
        .I1(ns_state_inferred__0_i_10_n_0),
        .O(in0[2]),
        .S(out[4]));
  MUXF7 ns_state_inferred__0_i_4
       (.I0(ns_state_inferred__0_i_11_n_0),
        .I1(ns_state_inferred__0_i_12_n_0),
        .O(in0[1]),
        .S(out[4]));
  LUT6 #(
    .INIT(64'h0000FFFEFFFEFFFE)) 
    ns_state_inferred__0_i_5
       (.I0(ns_state_inferred__0_i_13_n_0),
        .I1(ns_state_inferred__0_i_14_n_0),
        .I2(ns_state_inferred__0_i_15_n_0),
        .I3(ns_state_inferred__0_i_16_n_0),
        .I4(out[4]),
        .I5(ns_state_inferred__0_i_17_n_0),
        .O(in0[0]));
  LUT5 #(
    .INIT(32'h08000000)) 
    ns_state_inferred__0_i_6
       (.I0(out[3]),
        .I1(out[1]),
        .I2(start_i_2_n_0),
        .I3(out[0]),
        .I4(out[2]),
        .O(ns_state_inferred__0_i_6_n_0));
  LUT6 #(
    .INIT(64'h8CCCBCCCCCCCCCCC)) 
    ns_state_inferred__0_i_8
       (.I0(start_i_2_n_0),
        .I1(out[3]),
        .I2(out[2]),
        .I3(out[0]),
        .I4(\state_reg[4]_0 ),
        .I5(out[1]),
        .O(ns_state_inferred__0_i_8_n_0));
  LUT6 #(
    .INIT(64'hE0F04FF0F0F0F0F0)) 
    ns_state_inferred__0_i_9
       (.I0(out[3]),
        .I1(\state_reg[4]_0 ),
        .I2(out[2]),
        .I3(out[1]),
        .I4(start_i_2_n_0),
        .I5(out[0]),
        .O(ns_state_inferred__0_i_9_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \q_del_reg[1] 
       (.C(icap_clk),
        .CE(state[0]),
        .D(D[0]),
        .Q(D[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \q_del_reg[2] 
       (.C(icap_clk),
        .CE(state[0]),
        .D(D[1]),
        .Q(D[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \q_del_reg[3] 
       (.C(icap_clk),
        .CE(state[0]),
        .D(D[2]),
        .Q(D[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \q_del_reg[4] 
       (.C(icap_clk),
        .CE(state[0]),
        .D(D[3]),
        .Q(D[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \q_del_reg[5] 
       (.C(icap_clk),
        .CE(state[0]),
        .D(D[4]),
        .Q(D[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \q_del_reg[6] 
       (.C(icap_clk),
        .CE(state[0]),
        .D(D[5]),
        .Q(D[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \q_del_reg[7] 
       (.C(icap_clk),
        .CE(state[0]),
        .D(D[6]),
        .Q(D[7]),
        .R(SR));
  LUT5 #(
    .INIT(32'h80000000)) 
    q_vld_i_1
       (.I0(state[4]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .I4(state[3]),
        .O(stp_a0));
  FDRE #(
    .INIT(1'b0)) 
    q_vld_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(stp_a0),
        .Q(rxv),
        .R(SR));
  LUT5 #(
    .INIT(32'h00800000)) 
    rx_mbox_src_write_i_1
       (.I0(out[1]),
        .I1(out[2]),
        .I2(out[4]),
        .I3(rx_mbox_src_read),
        .I4(rxv),
        .O(ns_rxprocessed));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    spi_c_ofd
       (.C(icap_clk),
        .CE(1'b1),
        .D(next_state[0]),
        .Q(spi_c),
        .R(SR));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    spi_d_ofd
       (.C(icap_clk),
        .CE(1'b1),
        .D(ns_d_ofd),
        .Q(spi_d),
        .R(SR));
  LUT6 #(
    .INIT(64'h0202A202A2A2A2A2)) 
    spi_d_ofd_i_1
       (.I0(next_state[4]),
        .I1(spi_d_ofd_i_2_n_0),
        .I2(next_state[3]),
        .I3(spi_d_ofd_i_3_n_0),
        .I4(spi_d_ofd_i_4_n_0),
        .I5(spi_d_ofd_i_5_n_0),
        .O(ns_d_ofd));
  LUT6 #(
    .INIT(64'hAAAAA02AAAA80A8A)) 
    spi_d_ofd_i_10
       (.I0(Q[3]),
        .I1(out[4]),
        .I2(out[0]),
        .I3(out[1]),
        .I4(out[3]),
        .I5(out[2]),
        .O(spi_d_ofd_i_10_n_0));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT5 #(
    .INIT(32'h01000010)) 
    spi_d_ofd_i_11
       (.I0(out[0]),
        .I1(out[4]),
        .I2(out[2]),
        .I3(out[3]),
        .I4(out[1]),
        .O(spi_d_ofd_i_11_n_0));
  LUT3 #(
    .INIT(8'hE7)) 
    spi_d_ofd_i_12
       (.I0(out[1]),
        .I1(out[2]),
        .I2(out[3]),
        .O(spi_d_ofd_i_12_n_0));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT2 #(
    .INIT(4'hE)) 
    spi_d_ofd_i_13
       (.I0(out[4]),
        .I1(out[0]),
        .O(spi_d_ofd_i_13_n_0));
  LUT6 #(
    .INIT(64'h0000110100000000)) 
    spi_d_ofd_i_14
       (.I0(out[3]),
        .I1(out[4]),
        .I2(out[2]),
        .I3(Q[2]),
        .I4(out[1]),
        .I5(out[0]),
        .O(spi_d_ofd_i_14_n_0));
  LUT6 #(
    .INIT(64'h333333773FF37733)) 
    spi_d_ofd_i_15
       (.I0(out[4]),
        .I1(Q[2]),
        .I2(out[1]),
        .I3(out[2]),
        .I4(out[0]),
        .I5(out[3]),
        .O(spi_d_ofd_i_15_n_0));
  LUT6 #(
    .INIT(64'h00000612FFFFFFFF)) 
    spi_d_ofd_i_16
       (.I0(out[3]),
        .I1(out[0]),
        .I2(out[2]),
        .I3(out[1]),
        .I4(out[4]),
        .I5(next_state[1]),
        .O(spi_d_ofd_i_16_n_0));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT5 #(
    .INIT(32'h0000483C)) 
    spi_d_ofd_i_17
       (.I0(out[1]),
        .I1(out[0]),
        .I2(out[2]),
        .I3(out[4]),
        .I4(out[3]),
        .O(spi_d_ofd_i_17_n_0));
  LUT6 #(
    .INIT(64'h00600020FFFFFFFF)) 
    spi_d_ofd_i_18
       (.I0(out[1]),
        .I1(out[2]),
        .I2(out[0]),
        .I3(out[3]),
        .I4(out[4]),
        .I5(Q[1]),
        .O(spi_d_ofd_i_18_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF0000013C)) 
    spi_d_ofd_i_19
       (.I0(out[1]),
        .I1(out[2]),
        .I2(out[3]),
        .I3(out[0]),
        .I4(out[4]),
        .I5(next_state[1]),
        .O(spi_d_ofd_i_19_n_0));
  LUT6 #(
    .INIT(64'hFFFF000044F444F4)) 
    spi_d_ofd_i_2
       (.I0(spi_d_ofd_i_6_n_0),
        .I1(spi_d_ofd_i_7_n_0),
        .I2(next_state[1]),
        .I3(spi_d_ofd_i_8_n_0),
        .I4(spi_d_ofd_i_9_n_0),
        .I5(next_state[2]),
        .O(spi_d_ofd_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    spi_d_ofd_i_20
       (.I0(out[3]),
        .I1(out[2]),
        .I2(out[0]),
        .I3(out[4]),
        .O(spi_d_ofd_i_20_n_0));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT5 #(
    .INIT(32'h0600033C)) 
    spi_d_ofd_i_21
       (.I0(out[1]),
        .I1(out[2]),
        .I2(out[3]),
        .I3(out[0]),
        .I4(out[4]),
        .O(spi_d_ofd_i_21_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFEFEEEEEE)) 
    spi_d_ofd_i_3
       (.I0(spi_d_ofd_i_10_n_0),
        .I1(next_state[1]),
        .I2(out[0]),
        .I3(out[4]),
        .I4(Q[3]),
        .I5(spi_d_ofd_i_11_n_0),
        .O(spi_d_ofd_i_3_n_0));
  LUT6 #(
    .INIT(64'hAAAAFEAAAAAAAAAA)) 
    spi_d_ofd_i_4
       (.I0(next_state[2]),
        .I1(spi_d_ofd_i_12_n_0),
        .I2(spi_d_ofd_i_13_n_0),
        .I3(next_state[1]),
        .I4(spi_d_ofd_i_14_n_0),
        .I5(spi_d_ofd_i_15_n_0),
        .O(spi_d_ofd_i_4_n_0));
  LUT6 #(
    .INIT(64'h45FF45FFFFFF45FF)) 
    spi_d_ofd_i_5
       (.I0(spi_d_ofd_i_16_n_0),
        .I1(spi_d_ofd_i_17_n_0),
        .I2(Q[0]),
        .I3(next_state[2]),
        .I4(spi_d_ofd_i_18_n_0),
        .I5(spi_d_ofd_i_19_n_0),
        .O(spi_d_ofd_i_5_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00100104)) 
    spi_d_ofd_i_6
       (.I0(out[4]),
        .I1(out[3]),
        .I2(out[0]),
        .I3(out[2]),
        .I4(out[1]),
        .I5(next_state[1]),
        .O(spi_d_ofd_i_6_n_0));
  LUT6 #(
    .INIT(64'h1200033CFFFFFFFF)) 
    spi_d_ofd_i_7
       (.I0(out[1]),
        .I1(out[3]),
        .I2(out[2]),
        .I3(out[0]),
        .I4(out[4]),
        .I5(Q[7]),
        .O(spi_d_ofd_i_7_n_0));
  LUT6 #(
    .INIT(64'hAAA8A80AAA28A88A)) 
    spi_d_ofd_i_8
       (.I0(Q[6]),
        .I1(out[4]),
        .I2(out[0]),
        .I3(out[3]),
        .I4(out[2]),
        .I5(out[1]),
        .O(spi_d_ofd_i_8_n_0));
  LUT6 #(
    .INIT(64'hE0EEE0E0E0EEEEEE)) 
    spi_d_ofd_i_9
       (.I0(spi_d_ofd_i_20_n_0),
        .I1(out[1]),
        .I2(spi_d_ofd_i_21_n_0),
        .I3(Q[4]),
        .I4(next_state[1]),
        .I5(Q[5]),
        .O(spi_d_ofd_i_9_n_0));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    spi_q_ifd
       (.C(icap_clk),
        .CE(state[0]),
        .D(spi_q),
        .Q(D[0]),
        .R(SR));
  LUT6 #(
    .INIT(64'hAA00A228AA008228)) 
    start_i_1
       (.I0(start_i_2_n_0),
        .I1(out[2]),
        .I2(out[3]),
        .I3(out[0]),
        .I4(out[4]),
        .I5(out[1]),
        .O(ns_start));
  LUT5 #(
    .INIT(32'hFF7FFFFF)) 
    start_i_2
       (.I0(state[3]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[4]),
        .O(start_i_2_n_0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \state[0]_i_1 
       (.I0(\state[0]_i_2_n_0 ),
        .I1(\state_reg[0]_0 [4]),
        .I2(\state[0]_i_3_n_0 ),
        .I3(\state_reg[0]_0 [3]),
        .I4(\state[0]_i_4_n_0 ),
        .O(\state_reg[1]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \state[0]_i_1__0 
       (.I0(state[4]),
        .I1(state[0]),
        .O(next_state__0[0]));
  LUT6 #(
    .INIT(64'hF7F780F7F7808080)) 
    \state[0]_i_2 
       (.I0(\state_reg[0]_0 [2]),
        .I1(\state_reg[0]_0 [1]),
        .I2(\state_reg[0]_1 ),
        .I3(\state_reg[0]_0 [0]),
        .I4(start_i_2_n_0),
        .I5(data12),
        .O(\state[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFC88880300BBBB)) 
    \state[0]_i_3 
       (.I0(data12),
        .I1(\state_reg[0]_0 [2]),
        .I2(\state_reg[0]_0 [1]),
        .I3(\state_reg[4]_0 ),
        .I4(\state_reg[0]_0 [0]),
        .I5(start_i_2_n_0),
        .O(\state[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDD8815BFDD8810BA)) 
    \state[0]_i_4 
       (.I0(\state_reg[0]_0 [2]),
        .I1(\state_reg[4]_0 ),
        .I2(\state_reg[0]_0 [1]),
        .I3(start_i_2_n_0),
        .I4(\state_reg[0]_0 [0]),
        .I5(data12),
        .O(\state[0]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \state[1]_i_1 
       (.I0(state[1]),
        .I1(state[0]),
        .O(next_state__0[1]));
  LUT6 #(
    .INIT(64'hEF12FF0040B7FF00)) 
    \state[1]_i_2 
       (.I0(\state_reg[0]_0 [3]),
        .I1(\state_reg[4]_0 ),
        .I2(\state_reg[0]_0 [2]),
        .I3(\state_reg[0]_0 [1]),
        .I4(\state_reg[0]_0 [0]),
        .I5(start_i_2_n_0),
        .O(\state[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h4C4C3B4C)) 
    \state[1]_i_3 
       (.I0(\state_reg[0]_0 [2]),
        .I1(\state_reg[0]_0 [1]),
        .I2(rx_mbox_src_read),
        .I3(\state_reg[0]_0 [0]),
        .I4(start_i_2_n_0),
        .O(\state[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00F0FFF01DF01DF0)) 
    \state[2]_i_1 
       (.I0(\state_reg[2]_0 ),
        .I1(\state_reg[0]_0 [3]),
        .I2(\state[2]_i_3_n_0 ),
        .I3(\state_reg[0]_0 [2]),
        .I4(\state_reg[2]_1 ),
        .I5(\state_reg[0]_0 [4]),
        .O(\state_reg[1]_0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \state[2]_i_1__0 
       (.I0(state[2]),
        .I1(state[0]),
        .I2(state[1]),
        .O(next_state__0[2]));
  LUT3 #(
    .INIT(8'h08)) 
    \state[2]_i_3 
       (.I0(\state_reg[0]_0 [1]),
        .I1(\state_reg[0]_0 [0]),
        .I2(start_i_2_n_0),
        .O(\state[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA20000000)) 
    \state[3]_i_1 
       (.I0(\state[4]_i_3_n_0 ),
        .I1(\state_reg[4]_0 ),
        .I2(\state_reg[0]_0 [0]),
        .I3(\state_reg[0]_0 [1]),
        .I4(\state_reg[0]_0 [2]),
        .I5(\state_reg[0]_0 [3]),
        .O(\state_reg[1]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \state[3]_i_1__0 
       (.I0(state[3]),
        .I1(state[1]),
        .I2(state[0]),
        .I3(state[2]),
        .O(next_state__0[3]));
  LUT6 #(
    .INIT(64'h00000000F7FFFFFF)) 
    \state[4]_i_1 
       (.I0(\state_reg[0]_0 [1]),
        .I1(rx_mbox_src_read),
        .I2(\state_reg[4]_0 ),
        .I3(\state_reg[0]_0 [4]),
        .I4(\state_reg[0]_0 [2]),
        .I5(\state[4]_i_3_n_0 ),
        .O(\state_reg[1]_0 [4]));
  LUT6 #(
    .INIT(64'hBFFFFFFFAAAAAAAA)) 
    \state[4]_i_1__0 
       (.I0(start),
        .I1(state[3]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(state[2]),
        .I5(state[4]),
        .O(next_state__0[4]));
  LUT6 #(
    .INIT(64'h5555555515555555)) 
    \state[4]_i_3 
       (.I0(\state_reg[0]_0 [4]),
        .I1(\state_reg[0]_0 [3]),
        .I2(\state_reg[0]_0 [2]),
        .I3(\state_reg[0]_0 [1]),
        .I4(\state_reg[0]_0 [0]),
        .I5(start_i_2_n_0),
        .O(\state[4]_i_3_n_0 ));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_RST_CL:00000,S_TX7_CL:10000,S_TX7_CH:10001,S_TX6_CL:10010,S_TX6_CH:10011,S_TX5_CL:10100,S_TX5_CH:10101,S_TX4_CL:10110,S_TX4_CH:10111,S_TX3_CL:11000,S_TX3_CH:11001,S_TX2_CL:11010,S_TX2_CH:11011,S_TX1_CL:11100,S_TX1_CH:11101,S_TX0_CL:11110,S_TX0_CH:11111" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(next_state__0[0]),
        .Q(state[0]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_RST_CL:00000,S_TX7_CL:10000,S_TX7_CH:10001,S_TX6_CL:10010,S_TX6_CH:10011,S_TX5_CL:10100,S_TX5_CH:10101,S_TX4_CL:10110,S_TX4_CH:10111,S_TX3_CL:11000,S_TX3_CH:11001,S_TX2_CL:11010,S_TX2_CH:11011,S_TX1_CL:11100,S_TX1_CH:11101,S_TX0_CL:11110,S_TX0_CH:11111" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(next_state__0[1]),
        .Q(state[1]),
        .R(SR));
  MUXF7 \state_reg[1]_i_1 
       (.I0(\state[1]_i_2_n_0 ),
        .I1(\state[1]_i_3_n_0 ),
        .O(\state_reg[1]_0 [1]),
        .S(\state_reg[0]_0 [4]));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_RST_CL:00000,S_TX7_CL:10000,S_TX7_CH:10001,S_TX6_CL:10010,S_TX6_CH:10011,S_TX5_CL:10100,S_TX5_CH:10101,S_TX4_CL:10110,S_TX4_CH:10111,S_TX3_CL:11000,S_TX3_CH:11001,S_TX2_CL:11010,S_TX2_CH:11011,S_TX1_CL:11100,S_TX1_CH:11101,S_TX0_CL:11110,S_TX0_CH:11111" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(next_state__0[2]),
        .Q(state[2]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_RST_CL:00000,S_TX7_CL:10000,S_TX7_CH:10001,S_TX6_CL:10010,S_TX6_CH:10011,S_TX5_CL:10100,S_TX5_CH:10101,S_TX4_CL:10110,S_TX4_CH:10111,S_TX3_CL:11000,S_TX3_CH:11001,S_TX2_CL:11010,S_TX2_CH:11011,S_TX1_CL:11100,S_TX1_CH:11101,S_TX0_CL:11110,S_TX0_CH:11111" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(next_state__0[3]),
        .Q(state[3]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* FSM_ENCODED_STATES = "S_RST_CL:00000,S_TX7_CL:10000,S_TX7_CH:10001,S_TX6_CL:10010,S_TX6_CH:10011,S_TX5_CL:10100,S_TX5_CH:10101,S_TX4_CL:10110,S_TX4_CH:10111,S_TX3_CL:11000,S_TX3_CH:11001,S_TX2_CL:11010,S_TX2_CH:11011,S_TX1_CL:11100,S_TX1_CH:11101,S_TX0_CL:11110,S_TX0_CH:11111" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(next_state__0[4]),
        .Q(state[4]),
        .R(SR));
  LUT6 #(
    .INIT(64'h000000000000CEE2)) 
    tx_mbox_dst_read_i_1
       (.I0(out[4]),
        .I1(out[3]),
        .I2(out[2]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(tx_mbox_dst_read_i_2_n_0),
        .O(ns_txprocessed));
  LUT6 #(
    .INIT(64'h5755555554555555)) 
    tx_mbox_dst_read_i_2
       (.I0(data12),
        .I1(out[2]),
        .I2(out[0]),
        .I3(out[1]),
        .I4(out[3]),
        .I5(start_i_2_n_0),
        .O(tx_mbox_dst_read_i_2_n_0));
endmodule

(* CHECK_LICENSE_TYPE = "semicap_axi_hwicap_0,axi_hwicap,{}" *) (* ORIG_REF_NAME = "semicap_axi_hwicap_0" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* x_core_info = "axi_hwicap,Vivado 2019.1.1" *) 
module semicap_semicap_axi_hwicap_0
   (icap_clk,
    eos_in,
    s_axi_aclk,
    s_axi_aresetn,
    s_axi_awaddr,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_araddr,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rvalid,
    s_axi_rready,
    ip2intc_irpt,
    icap_csib,
    icap_rdwrb,
    cap_req,
    icap_i,
    icap_o,
    cap_gnt,
    icap_avail,
    cap_rel);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 ICAP_CLK CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME ICAP_CLK, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN semicap_clk_100MHz, INSERT_VIP 0" *) input icap_clk;
  input eos_in;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 S_AXI_ACLK CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME S_AXI_ACLK, ASSOCIATED_BUSIF S_AXI_LITE, ASSOCIATED_RESET s_axi_aresetn, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN semicap_clk_100MHz, INSERT_VIP 0" *) input s_axi_aclk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 S_AXI_ARESETN RST" *) (* x_interface_parameter = "XIL_INTERFACENAME S_AXI_ARESETN, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input s_axi_aresetn;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE AWADDR" *) (* x_interface_parameter = "XIL_INTERFACENAME S_AXI_LITE, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 9, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.000, CLK_DOMAIN semicap_clk_100MHz, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input [8:0]s_axi_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE AWVALID" *) input s_axi_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE AWREADY" *) output s_axi_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE WDATA" *) input [31:0]s_axi_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE WSTRB" *) input [3:0]s_axi_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE WVALID" *) input s_axi_wvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE WREADY" *) output s_axi_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE BRESP" *) output [1:0]s_axi_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE BVALID" *) output s_axi_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE BREADY" *) input s_axi_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE ARADDR" *) input [8:0]s_axi_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE ARVALID" *) input s_axi_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE ARREADY" *) output s_axi_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE RDATA" *) output [31:0]s_axi_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE RRESP" *) output [1:0]s_axi_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE RVALID" *) output s_axi_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S_AXI_LITE RREADY" *) input s_axi_rready;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 IP2INTC_IRPT INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME IP2INTC_IRPT, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output ip2intc_irpt;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 ICAP csib" *) output icap_csib;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 ICAP rdwrb" *) output icap_rdwrb;
  (* x_interface_info = "xilinx.com:interface:cap:1.0 ICAP_ARBITER REQ" *) output cap_req;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 ICAP o" *) input [31:0]icap_i;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 ICAP i" *) output [31:0]icap_o;
  (* x_interface_info = "xilinx.com:interface:cap:1.0 ICAP_ARBITER GNT" *) input cap_gnt;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 ICAP avail" *) input icap_avail;
  (* x_interface_info = "xilinx.com:interface:cap:1.0 ICAP_ARBITER REL" *) input cap_rel;

  wire cap_gnt;
  wire cap_rel;
  wire cap_req;
  wire eos_in;
  wire icap_avail;
  wire icap_clk;
  wire icap_csib;
  wire [31:0]icap_i;
  wire [31:0]icap_o;
  wire icap_rdwrb;
  wire ip2intc_irpt;
  wire s_axi_aclk;
  wire [8:0]s_axi_araddr;
  wire s_axi_aresetn;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire [8:0]s_axi_awaddr;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [31:0]s_axi_rdata;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire NLW_U0_cfgclk_UNCONNECTED;
  wire NLW_U0_cfgmclk_UNCONNECTED;
  wire NLW_U0_preq_UNCONNECTED;

  (* C_BRAM_SRL_FIFO_TYPE = "1" *) 
  (* C_DEVICE_ID = "69353619" *) 
  (* C_ENABLE_ASYNC = "0" *) 
  (* C_FAMILY = "kintexu" *) 
  (* C_ICAP_EXTERNAL = "1" *) 
  (* C_ICAP_WIDTH_S = "X32" *) 
  (* C_INCLUDE_STARTUP = "0" *) 
  (* C_MODE = "0" *) 
  (* C_NOREAD = "0" *) 
  (* C_OPERATION = "1" *) 
  (* C_READ_FIFO_DEPTH = "256" *) 
  (* C_SHARED_STARTUP = "0" *) 
  (* C_SIMULATION = "2" *) 
  (* C_S_AXI_ADDR_WIDTH = "9" *) 
  (* C_S_AXI_DATA_WIDTH = "32" *) 
  (* C_WRITE_FIFO_DEPTH = "1024" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  semicap_axi_hwicap U0
       (.cap_gnt(cap_gnt),
        .cap_rel(cap_rel),
        .cap_req(cap_req),
        .cfgclk(NLW_U0_cfgclk_UNCONNECTED),
        .cfgmclk(NLW_U0_cfgmclk_UNCONNECTED),
        .clk(1'b0),
        .eos_in(eos_in),
        .gsr(1'b0),
        .gts(1'b0),
        .icap_avail(icap_avail),
        .icap_clk(icap_clk),
        .icap_csib(icap_csib),
        .icap_i(icap_i),
        .icap_o(icap_o),
        .icap_rdwrb(icap_rdwrb),
        .ip2intc_irpt(ip2intc_irpt),
        .keyclearb(1'b0),
        .pack(1'b0),
        .preq(NLW_U0_preq_UNCONNECTED),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr(s_axi_awaddr),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .usrcclko(1'b0),
        .usrcclkts(1'b0),
        .usrdoneo(1'b0),
        .usrdonets(1'b0));
endmodule

(* ORIG_REF_NAME = "semicap_axi_v1_0" *) 
module semicap_semicap_axi_v1_0
   (S_AXI_WREADY,
    S_AXI_AWREADY,
    oMinVoterRegClearStrobe,
    oMonitorRegByte,
    oMonitorRegPutByte,
    oMonitorRegWriteStrobe,
    oResetsReg,
    oConfigRegIrqMask,
    oConfigRegSemEn,
    oTblAddReg,
    S_AXI_ARREADY,
    s00_axi_rdata,
    s00_axi_rvalid,
    oMonitorRegGetByte,
    s00_axi_bvalid,
    s00_axi_aresetn,
    s00_axi_wvalid,
    s00_axi_awvalid,
    s00_axi_aclk,
    s00_axi_awaddr,
    s00_axi_wdata,
    s00_axi_wstrb,
    s00_axi_araddr,
    iMinVoterRegTmrStat,
    iStatusRegState,
    iMonitorRegByte,
    iConfigRegIrqMask,
    iTblAddReg,
    iDevInfoId,
    iMinVoterRegCmpStat,
    iStatusRegFifoCmdFull,
    iDevInfoVersionMinor,
    iStatusRegFifoStatFull,
    iStatusRegMonEmpty,
    iDevInfoVersionMajor,
    iConfigRegSemEn,
    s00_axi_arvalid,
    s00_axi_bready,
    s00_axi_rready);
  output S_AXI_WREADY;
  output S_AXI_AWREADY;
  output oMinVoterRegClearStrobe;
  output [7:0]oMonitorRegByte;
  output oMonitorRegPutByte;
  output oMonitorRegWriteStrobe;
  output [2:0]oResetsReg;
  output [2:0]oConfigRegIrqMask;
  output oConfigRegSemEn;
  output [31:0]oTblAddReg;
  output S_AXI_ARREADY;
  output [31:0]s00_axi_rdata;
  output s00_axi_rvalid;
  output oMonitorRegGetByte;
  output s00_axi_bvalid;
  input s00_axi_aresetn;
  input s00_axi_wvalid;
  input s00_axi_awvalid;
  input s00_axi_aclk;
  input [2:0]s00_axi_awaddr;
  input [31:0]s00_axi_wdata;
  input [3:0]s00_axi_wstrb;
  input [2:0]s00_axi_araddr;
  input [2:0]iMinVoterRegTmrStat;
  input [3:0]iStatusRegState;
  input [7:0]iMonitorRegByte;
  input [2:0]iConfigRegIrqMask;
  input [31:0]iTblAddReg;
  input [7:0]iDevInfoId;
  input iMinVoterRegCmpStat;
  input iStatusRegFifoCmdFull;
  input [7:0]iDevInfoVersionMinor;
  input iStatusRegFifoStatFull;
  input iStatusRegMonEmpty;
  input [7:0]iDevInfoVersionMajor;
  input iConfigRegSemEn;
  input s00_axi_arvalid;
  input s00_axi_bready;
  input s00_axi_rready;

  wire S_AXI_ARREADY;
  wire S_AXI_AWREADY;
  wire S_AXI_WREADY;
  wire [2:0]iConfigRegIrqMask;
  wire iConfigRegSemEn;
  wire [7:0]iDevInfoId;
  wire [7:0]iDevInfoVersionMajor;
  wire [7:0]iDevInfoVersionMinor;
  wire iMinVoterRegCmpStat;
  wire [2:0]iMinVoterRegTmrStat;
  wire [7:0]iMonitorRegByte;
  wire iStatusRegFifoCmdFull;
  wire iStatusRegFifoStatFull;
  wire iStatusRegMonEmpty;
  wire [3:0]iStatusRegState;
  wire [31:0]iTblAddReg;
  wire [2:0]oConfigRegIrqMask;
  wire oConfigRegSemEn;
  wire oMinVoterRegClearStrobe;
  wire [7:0]oMonitorRegByte;
  wire oMonitorRegGetByte;
  wire oMonitorRegPutByte;
  wire oMonitorRegWriteStrobe;
  wire [2:0]oResetsReg;
  wire [31:0]oTblAddReg;
  wire s00_axi_aclk;
  wire [2:0]s00_axi_araddr;
  wire s00_axi_aresetn;
  wire s00_axi_arvalid;
  wire [2:0]s00_axi_awaddr;
  wire s00_axi_awvalid;
  wire s00_axi_bready;
  wire s00_axi_bvalid;
  wire [31:0]s00_axi_rdata;
  wire s00_axi_rready;
  wire s00_axi_rvalid;
  wire [31:0]s00_axi_wdata;
  wire [3:0]s00_axi_wstrb;
  wire s00_axi_wvalid;

  semicap_semicap_axi_v1_0_S00_AXI semicap_axi_v1_0_S00_AXI_inst
       (.S_AXI_ARREADY(S_AXI_ARREADY),
        .S_AXI_AWREADY(S_AXI_AWREADY),
        .S_AXI_WREADY(S_AXI_WREADY),
        .iConfigRegIrqMask(iConfigRegIrqMask),
        .iConfigRegSemEn(iConfigRegSemEn),
        .iDevInfoId(iDevInfoId),
        .iDevInfoVersionMajor(iDevInfoVersionMajor),
        .iDevInfoVersionMinor(iDevInfoVersionMinor),
        .iMinVoterRegCmpStat(iMinVoterRegCmpStat),
        .iMinVoterRegTmrStat(iMinVoterRegTmrStat),
        .iMonitorRegByte(iMonitorRegByte),
        .iStatusRegFifoCmdFull(iStatusRegFifoCmdFull),
        .iStatusRegFifoStatFull(iStatusRegFifoStatFull),
        .iStatusRegMonEmpty(iStatusRegMonEmpty),
        .iStatusRegState(iStatusRegState),
        .iTblAddReg(iTblAddReg),
        .oConfigRegIrqMask(oConfigRegIrqMask),
        .oConfigRegSemEn(oConfigRegSemEn),
        .oMinVoterRegClearStrobe(oMinVoterRegClearStrobe),
        .oMonitorRegByte(oMonitorRegByte),
        .oMonitorRegGetByte(oMonitorRegGetByte),
        .oMonitorRegPutByte(oMonitorRegPutByte),
        .oMonitorRegWriteStrobe(oMonitorRegWriteStrobe),
        .oResetsReg(oResetsReg),
        .oTblAddReg(oTblAddReg),
        .s00_axi_aclk(s00_axi_aclk),
        .s00_axi_araddr(s00_axi_araddr),
        .s00_axi_aresetn(s00_axi_aresetn),
        .s00_axi_arvalid(s00_axi_arvalid),
        .s00_axi_awaddr(s00_axi_awaddr),
        .s00_axi_awvalid(s00_axi_awvalid),
        .s00_axi_bready(s00_axi_bready),
        .s00_axi_bvalid(s00_axi_bvalid),
        .s00_axi_rdata(s00_axi_rdata),
        .s00_axi_rready(s00_axi_rready),
        .s00_axi_rvalid(s00_axi_rvalid),
        .s00_axi_wdata(s00_axi_wdata),
        .s00_axi_wstrb(s00_axi_wstrb),
        .s00_axi_wvalid(s00_axi_wvalid));
endmodule

(* ORIG_REF_NAME = "semicap_axi_v1_0_S00_AXI" *) 
module semicap_semicap_axi_v1_0_S00_AXI
   (S_AXI_WREADY,
    S_AXI_AWREADY,
    oMinVoterRegClearStrobe,
    oMonitorRegByte,
    oMonitorRegPutByte,
    oMonitorRegWriteStrobe,
    oResetsReg,
    oConfigRegIrqMask,
    oConfigRegSemEn,
    oTblAddReg,
    S_AXI_ARREADY,
    s00_axi_rdata,
    s00_axi_rvalid,
    oMonitorRegGetByte,
    s00_axi_bvalid,
    s00_axi_aresetn,
    s00_axi_wvalid,
    s00_axi_awvalid,
    s00_axi_aclk,
    s00_axi_awaddr,
    s00_axi_wdata,
    s00_axi_wstrb,
    s00_axi_araddr,
    iMinVoterRegTmrStat,
    iStatusRegState,
    iMonitorRegByte,
    iConfigRegIrqMask,
    iTblAddReg,
    iDevInfoId,
    iMinVoterRegCmpStat,
    iStatusRegFifoCmdFull,
    iDevInfoVersionMinor,
    iStatusRegFifoStatFull,
    iStatusRegMonEmpty,
    iDevInfoVersionMajor,
    iConfigRegSemEn,
    s00_axi_arvalid,
    s00_axi_bready,
    s00_axi_rready);
  output S_AXI_WREADY;
  output S_AXI_AWREADY;
  output oMinVoterRegClearStrobe;
  output [7:0]oMonitorRegByte;
  output oMonitorRegPutByte;
  output oMonitorRegWriteStrobe;
  output [2:0]oResetsReg;
  output [2:0]oConfigRegIrqMask;
  output oConfigRegSemEn;
  output [31:0]oTblAddReg;
  output S_AXI_ARREADY;
  output [31:0]s00_axi_rdata;
  output s00_axi_rvalid;
  output oMonitorRegGetByte;
  output s00_axi_bvalid;
  input s00_axi_aresetn;
  input s00_axi_wvalid;
  input s00_axi_awvalid;
  input s00_axi_aclk;
  input [2:0]s00_axi_awaddr;
  input [31:0]s00_axi_wdata;
  input [3:0]s00_axi_wstrb;
  input [2:0]s00_axi_araddr;
  input [2:0]iMinVoterRegTmrStat;
  input [3:0]iStatusRegState;
  input [7:0]iMonitorRegByte;
  input [2:0]iConfigRegIrqMask;
  input [31:0]iTblAddReg;
  input [7:0]iDevInfoId;
  input iMinVoterRegCmpStat;
  input iStatusRegFifoCmdFull;
  input [7:0]iDevInfoVersionMinor;
  input iStatusRegFifoStatFull;
  input iStatusRegMonEmpty;
  input [7:0]iDevInfoVersionMajor;
  input iConfigRegSemEn;
  input s00_axi_arvalid;
  input s00_axi_bready;
  input s00_axi_rready;

  wire \ConfigReg[2]_i_1_n_0 ;
  wire \ConfigReg[31]_i_1_n_0 ;
  wire \ConfigReg[31]_i_2_n_0 ;
  wire \ConfigReg[8]_i_1_n_0 ;
  wire [31:0]DebugReg;
  wire \DebugReg[15]_i_1_n_0 ;
  wire \DebugReg[23]_i_1_n_0 ;
  wire \DebugReg[31]_i_1_n_0 ;
  wire \DebugReg[7]_i_1_n_0 ;
  wire \MonitorReg[8]_i_2_n_0 ;
  wire \MonitorReg[8]_i_4_n_0 ;
  wire \RpResetReg[2]_i_1_n_0 ;
  wire S_AXI_ARREADY;
  wire S_AXI_AWREADY;
  wire S_AXI_WREADY;
  wire \SemTblAddrReg[15]_i_1_n_0 ;
  wire \SemTblAddrReg[23]_i_1_n_0 ;
  wire \SemTblAddrReg[31]_i_1_n_0 ;
  wire \SemTblAddrReg[7]_i_1_n_0 ;
  wire aw_en_i_1_n_0;
  wire aw_en_reg_n_0;
  wire axi_arready0;
  wire axi_awready0;
  wire axi_bvalid_i_1_n_0;
  wire \axi_rdata[0]_i_2_n_0 ;
  wire \axi_rdata[0]_i_3_n_0 ;
  wire \axi_rdata[10]_i_2_n_0 ;
  wire \axi_rdata[1]_i_2_n_0 ;
  wire \axi_rdata[1]_i_3_n_0 ;
  wire \axi_rdata[2]_i_2_n_0 ;
  wire \axi_rdata[2]_i_3_n_0 ;
  wire \axi_rdata[3]_i_2_n_0 ;
  wire \axi_rdata[3]_i_3_n_0 ;
  wire \axi_rdata[4]_i_2_n_0 ;
  wire \axi_rdata[5]_i_2_n_0 ;
  wire \axi_rdata[6]_i_2_n_0 ;
  wire \axi_rdata[7]_i_2_n_0 ;
  wire \axi_rdata[8]_i_2_n_0 ;
  wire \axi_rdata[9]_i_2_n_0 ;
  wire axi_rvalid_i_1_n_0;
  wire axi_wready0;
  wire [8:8]data1;
  wire [2:0]iConfigRegIrqMask;
  wire iConfigRegSemEn;
  wire [7:0]iDevInfoId;
  wire [7:0]iDevInfoVersionMajor;
  wire [7:0]iDevInfoVersionMinor;
  wire iMinVoterRegCmpStat;
  wire [2:0]iMinVoterRegTmrStat;
  wire [7:0]iMonitorRegByte;
  wire iStatusRegFifoCmdFull;
  wire iStatusRegFifoStatFull;
  wire iStatusRegMonEmpty;
  wire [3:0]iStatusRegState;
  wire [31:0]iTblAddReg;
  wire [2:0]oConfigRegIrqMask;
  wire oConfigRegSemEn;
  wire oMinVoterRegClearStrobe;
  wire oMinVoterRegClearStrobe_i_1_n_0;
  wire oMinVoterRegClearStrobe_i_2_n_0;
  wire oMinVoterRegClearStrobe_i_3_n_0;
  wire [7:0]oMonitorRegByte;
  wire oMonitorRegGetByte;
  wire oMonitorRegPutByte;
  wire oMonitorRegWriteStrobe;
  wire oMonitorRegWriteStrobe_i_1_n_0;
  wire [2:0]oResetsReg;
  wire [31:0]oTblAddReg;
  wire p_0_in;
  wire [2:0]p_0_in_0;
  wire [7:7]p_1_in;
  wire [31:0]reg_data_out;
  wire s00_axi_aclk;
  wire [2:0]s00_axi_araddr;
  wire s00_axi_aresetn;
  wire s00_axi_arvalid;
  wire [2:0]s00_axi_awaddr;
  wire s00_axi_awvalid;
  wire s00_axi_bready;
  wire s00_axi_bvalid;
  wire [31:0]s00_axi_rdata;
  wire s00_axi_rready;
  wire s00_axi_rvalid;
  wire [31:0]s00_axi_wdata;
  wire [3:0]s00_axi_wstrb;
  wire s00_axi_wvalid;
  wire [2:0]sel0;
  wire slv_reg_rden;
  wire slv_reg_wren__2;

  LUT5 #(
    .INIT(32'h00020000)) 
    \ConfigReg[2]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(s00_axi_wstrb[0]),
        .O(\ConfigReg[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFBFFFF00080000)) 
    \ConfigReg[31]_i_1 
       (.I0(s00_axi_wdata[31]),
        .I1(slv_reg_wren__2),
        .I2(\ConfigReg[31]_i_2_n_0 ),
        .I3(p_0_in_0[2]),
        .I4(s00_axi_wstrb[3]),
        .I5(oConfigRegSemEn),
        .O(\ConfigReg[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ConfigReg[31]_i_2 
       (.I0(p_0_in_0[1]),
        .I1(p_0_in_0[0]),
        .O(\ConfigReg[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFBFFFF00080000)) 
    \ConfigReg[8]_i_1 
       (.I0(s00_axi_wdata[8]),
        .I1(slv_reg_wren__2),
        .I2(\ConfigReg[31]_i_2_n_0 ),
        .I3(p_0_in_0[2]),
        .I4(s00_axi_wstrb[1]),
        .I5(data1),
        .O(\ConfigReg[8]_i_1_n_0 ));
  FDRE \ConfigReg_reg[0] 
       (.C(s00_axi_aclk),
        .CE(\ConfigReg[2]_i_1_n_0 ),
        .D(s00_axi_wdata[0]),
        .Q(oConfigRegIrqMask[0]),
        .R(p_0_in));
  FDRE \ConfigReg_reg[1] 
       (.C(s00_axi_aclk),
        .CE(\ConfigReg[2]_i_1_n_0 ),
        .D(s00_axi_wdata[1]),
        .Q(oConfigRegIrqMask[1]),
        .R(p_0_in));
  FDRE \ConfigReg_reg[2] 
       (.C(s00_axi_aclk),
        .CE(\ConfigReg[2]_i_1_n_0 ),
        .D(s00_axi_wdata[2]),
        .Q(oConfigRegIrqMask[2]),
        .R(p_0_in));
  FDRE \ConfigReg_reg[31] 
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(\ConfigReg[31]_i_1_n_0 ),
        .Q(oConfigRegSemEn),
        .R(p_0_in));
  FDRE \ConfigReg_reg[8] 
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(\ConfigReg[8]_i_1_n_0 ),
        .Q(data1),
        .R(p_0_in));
  LUT5 #(
    .INIT(32'h80000000)) 
    \DebugReg[15]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(s00_axi_wstrb[1]),
        .O(\DebugReg[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \DebugReg[23]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(s00_axi_wstrb[2]),
        .O(\DebugReg[23]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \DebugReg[31]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(s00_axi_wstrb[3]),
        .O(\DebugReg[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \DebugReg[7]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(s00_axi_wstrb[0]),
        .O(\DebugReg[7]_i_1_n_0 ));
  FDRE \DebugReg_reg[0] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[0]),
        .Q(DebugReg[0]),
        .R(p_0_in));
  FDRE \DebugReg_reg[10] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[10]),
        .Q(DebugReg[10]),
        .R(p_0_in));
  FDRE \DebugReg_reg[11] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[11]),
        .Q(DebugReg[11]),
        .R(p_0_in));
  FDRE \DebugReg_reg[12] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[12]),
        .Q(DebugReg[12]),
        .R(p_0_in));
  FDRE \DebugReg_reg[13] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[13]),
        .Q(DebugReg[13]),
        .R(p_0_in));
  FDRE \DebugReg_reg[14] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[14]),
        .Q(DebugReg[14]),
        .R(p_0_in));
  FDRE \DebugReg_reg[15] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[15]),
        .Q(DebugReg[15]),
        .R(p_0_in));
  FDRE \DebugReg_reg[16] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[16]),
        .Q(DebugReg[16]),
        .R(p_0_in));
  FDRE \DebugReg_reg[17] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[17]),
        .Q(DebugReg[17]),
        .R(p_0_in));
  FDRE \DebugReg_reg[18] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[18]),
        .Q(DebugReg[18]),
        .R(p_0_in));
  FDRE \DebugReg_reg[19] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[19]),
        .Q(DebugReg[19]),
        .R(p_0_in));
  FDRE \DebugReg_reg[1] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[1]),
        .Q(DebugReg[1]),
        .R(p_0_in));
  FDRE \DebugReg_reg[20] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[20]),
        .Q(DebugReg[20]),
        .R(p_0_in));
  FDRE \DebugReg_reg[21] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[21]),
        .Q(DebugReg[21]),
        .R(p_0_in));
  FDRE \DebugReg_reg[22] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[22]),
        .Q(DebugReg[22]),
        .R(p_0_in));
  FDRE \DebugReg_reg[23] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[23]),
        .Q(DebugReg[23]),
        .R(p_0_in));
  FDRE \DebugReg_reg[24] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[24]),
        .Q(DebugReg[24]),
        .R(p_0_in));
  FDRE \DebugReg_reg[25] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[25]),
        .Q(DebugReg[25]),
        .R(p_0_in));
  FDRE \DebugReg_reg[26] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[26]),
        .Q(DebugReg[26]),
        .R(p_0_in));
  FDRE \DebugReg_reg[27] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[27]),
        .Q(DebugReg[27]),
        .R(p_0_in));
  FDRE \DebugReg_reg[28] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[28]),
        .Q(DebugReg[28]),
        .R(p_0_in));
  FDRE \DebugReg_reg[29] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[29]),
        .Q(DebugReg[29]),
        .R(p_0_in));
  FDRE \DebugReg_reg[2] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[2]),
        .Q(DebugReg[2]),
        .R(p_0_in));
  FDRE \DebugReg_reg[30] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[30]),
        .Q(DebugReg[30]),
        .R(p_0_in));
  FDRE \DebugReg_reg[31] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[31]),
        .Q(DebugReg[31]),
        .R(p_0_in));
  FDRE \DebugReg_reg[3] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[3]),
        .Q(DebugReg[3]),
        .R(p_0_in));
  FDRE \DebugReg_reg[4] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[4]),
        .Q(DebugReg[4]),
        .R(p_0_in));
  FDRE \DebugReg_reg[5] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[5]),
        .Q(DebugReg[5]),
        .R(p_0_in));
  FDRE \DebugReg_reg[6] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[6]),
        .Q(DebugReg[6]),
        .R(p_0_in));
  FDRE \DebugReg_reg[7] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[7]),
        .Q(DebugReg[7]),
        .R(p_0_in));
  FDRE \DebugReg_reg[8] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[8]),
        .Q(DebugReg[8]),
        .R(p_0_in));
  FDRE \DebugReg_reg[9] 
       (.C(s00_axi_aclk),
        .CE(\DebugReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[9]),
        .Q(DebugReg[9]),
        .R(p_0_in));
  LUT5 #(
    .INIT(32'h02000000)) 
    \MonitorReg[7]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[2]),
        .I2(p_0_in_0[1]),
        .I3(s00_axi_wstrb[0]),
        .I4(p_0_in_0[0]),
        .O(p_1_in));
  LUT1 #(
    .INIT(2'h1)) 
    \MonitorReg[8]_i_1 
       (.I0(s00_axi_aresetn),
        .O(p_0_in));
  LUT6 #(
    .INIT(64'hFBFFFFFF08000000)) 
    \MonitorReg[8]_i_2 
       (.I0(s00_axi_wdata[8]),
        .I1(slv_reg_wren__2),
        .I2(\MonitorReg[8]_i_4_n_0 ),
        .I3(s00_axi_wstrb[1]),
        .I4(p_0_in_0[0]),
        .I5(oMonitorRegPutByte),
        .O(\MonitorReg[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \MonitorReg[8]_i_3 
       (.I0(s00_axi_awvalid),
        .I1(S_AXI_AWREADY),
        .I2(S_AXI_WREADY),
        .I3(s00_axi_wvalid),
        .O(slv_reg_wren__2));
  LUT2 #(
    .INIT(4'hE)) 
    \MonitorReg[8]_i_4 
       (.I0(p_0_in_0[2]),
        .I1(p_0_in_0[1]),
        .O(\MonitorReg[8]_i_4_n_0 ));
  FDRE \MonitorReg_reg[0] 
       (.C(s00_axi_aclk),
        .CE(p_1_in),
        .D(s00_axi_wdata[0]),
        .Q(oMonitorRegByte[0]),
        .R(p_0_in));
  FDRE \MonitorReg_reg[1] 
       (.C(s00_axi_aclk),
        .CE(p_1_in),
        .D(s00_axi_wdata[1]),
        .Q(oMonitorRegByte[1]),
        .R(p_0_in));
  FDRE \MonitorReg_reg[2] 
       (.C(s00_axi_aclk),
        .CE(p_1_in),
        .D(s00_axi_wdata[2]),
        .Q(oMonitorRegByte[2]),
        .R(p_0_in));
  FDRE \MonitorReg_reg[3] 
       (.C(s00_axi_aclk),
        .CE(p_1_in),
        .D(s00_axi_wdata[3]),
        .Q(oMonitorRegByte[3]),
        .R(p_0_in));
  FDRE \MonitorReg_reg[4] 
       (.C(s00_axi_aclk),
        .CE(p_1_in),
        .D(s00_axi_wdata[4]),
        .Q(oMonitorRegByte[4]),
        .R(p_0_in));
  FDRE \MonitorReg_reg[5] 
       (.C(s00_axi_aclk),
        .CE(p_1_in),
        .D(s00_axi_wdata[5]),
        .Q(oMonitorRegByte[5]),
        .R(p_0_in));
  FDRE \MonitorReg_reg[6] 
       (.C(s00_axi_aclk),
        .CE(p_1_in),
        .D(s00_axi_wdata[6]),
        .Q(oMonitorRegByte[6]),
        .R(p_0_in));
  FDRE \MonitorReg_reg[7] 
       (.C(s00_axi_aclk),
        .CE(p_1_in),
        .D(s00_axi_wdata[7]),
        .Q(oMonitorRegByte[7]),
        .R(p_0_in));
  FDRE \MonitorReg_reg[8] 
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(\MonitorReg[8]_i_2_n_0 ),
        .Q(oMonitorRegPutByte),
        .R(p_0_in));
  LUT5 #(
    .INIT(32'h20000000)) 
    \RpResetReg[2]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[1]),
        .I2(s00_axi_wstrb[0]),
        .I3(p_0_in_0[0]),
        .I4(p_0_in_0[2]),
        .O(\RpResetReg[2]_i_1_n_0 ));
  FDRE \RpResetReg_reg[0] 
       (.C(s00_axi_aclk),
        .CE(\RpResetReg[2]_i_1_n_0 ),
        .D(s00_axi_wdata[0]),
        .Q(oResetsReg[0]),
        .R(p_0_in));
  FDRE \RpResetReg_reg[1] 
       (.C(s00_axi_aclk),
        .CE(\RpResetReg[2]_i_1_n_0 ),
        .D(s00_axi_wdata[1]),
        .Q(oResetsReg[1]),
        .R(p_0_in));
  FDRE \RpResetReg_reg[2] 
       (.C(s00_axi_aclk),
        .CE(\RpResetReg[2]_i_1_n_0 ),
        .D(s00_axi_wdata[2]),
        .Q(oResetsReg[2]),
        .R(p_0_in));
  LUT5 #(
    .INIT(32'h20000000)) 
    \SemTblAddrReg[15]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[1]),
        .I3(s00_axi_wstrb[1]),
        .I4(p_0_in_0[2]),
        .O(\SemTblAddrReg[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h20000000)) 
    \SemTblAddrReg[23]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[1]),
        .I3(s00_axi_wstrb[2]),
        .I4(p_0_in_0[2]),
        .O(\SemTblAddrReg[23]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h20000000)) 
    \SemTblAddrReg[31]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[1]),
        .I3(s00_axi_wstrb[3]),
        .I4(p_0_in_0[2]),
        .O(\SemTblAddrReg[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h20000000)) 
    \SemTblAddrReg[7]_i_1 
       (.I0(slv_reg_wren__2),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[1]),
        .I3(s00_axi_wstrb[0]),
        .I4(p_0_in_0[2]),
        .O(\SemTblAddrReg[7]_i_1_n_0 ));
  FDRE \SemTblAddrReg_reg[0] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[0]),
        .Q(oTblAddReg[0]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[10] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[10]),
        .Q(oTblAddReg[10]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[11] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[11]),
        .Q(oTblAddReg[11]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[12] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[12]),
        .Q(oTblAddReg[12]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[13] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[13]),
        .Q(oTblAddReg[13]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[14] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[14]),
        .Q(oTblAddReg[14]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[15] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[15]),
        .Q(oTblAddReg[15]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[16] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[16]),
        .Q(oTblAddReg[16]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[17] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[17]),
        .Q(oTblAddReg[17]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[18] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[18]),
        .Q(oTblAddReg[18]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[19] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[19]),
        .Q(oTblAddReg[19]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[1] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[1]),
        .Q(oTblAddReg[1]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[20] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[20]),
        .Q(oTblAddReg[20]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[21] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[21]),
        .Q(oTblAddReg[21]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[22] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[22]),
        .Q(oTblAddReg[22]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[23] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[23]_i_1_n_0 ),
        .D(s00_axi_wdata[23]),
        .Q(oTblAddReg[23]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[24] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[24]),
        .Q(oTblAddReg[24]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[25] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[25]),
        .Q(oTblAddReg[25]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[26] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[26]),
        .Q(oTblAddReg[26]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[27] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[27]),
        .Q(oTblAddReg[27]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[28] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[28]),
        .Q(oTblAddReg[28]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[29] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[29]),
        .Q(oTblAddReg[29]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[2] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[2]),
        .Q(oTblAddReg[2]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[30] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[30]),
        .Q(oTblAddReg[30]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[31] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[31]_i_1_n_0 ),
        .D(s00_axi_wdata[31]),
        .Q(oTblAddReg[31]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[3] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[3]),
        .Q(oTblAddReg[3]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[4] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[4]),
        .Q(oTblAddReg[4]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[5] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[5]),
        .Q(oTblAddReg[5]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[6] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[6]),
        .Q(oTblAddReg[6]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[7] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[7]_i_1_n_0 ),
        .D(s00_axi_wdata[7]),
        .Q(oTblAddReg[7]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[8] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[8]),
        .Q(oTblAddReg[8]),
        .R(p_0_in));
  FDRE \SemTblAddrReg_reg[9] 
       (.C(s00_axi_aclk),
        .CE(\SemTblAddrReg[15]_i_1_n_0 ),
        .D(s00_axi_wdata[9]),
        .Q(oTblAddReg[9]),
        .R(p_0_in));
  LUT6 #(
    .INIT(64'hBFFFBF00BF00BF00)) 
    aw_en_i_1
       (.I0(S_AXI_AWREADY),
        .I1(s00_axi_awvalid),
        .I2(s00_axi_wvalid),
        .I3(aw_en_reg_n_0),
        .I4(s00_axi_bready),
        .I5(s00_axi_bvalid),
        .O(aw_en_i_1_n_0));
  FDSE aw_en_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(aw_en_i_1_n_0),
        .Q(aw_en_reg_n_0),
        .S(p_0_in));
  FDSE \axi_araddr_reg[2] 
       (.C(s00_axi_aclk),
        .CE(axi_arready0),
        .D(s00_axi_araddr[0]),
        .Q(sel0[0]),
        .S(p_0_in));
  FDSE \axi_araddr_reg[3] 
       (.C(s00_axi_aclk),
        .CE(axi_arready0),
        .D(s00_axi_araddr[1]),
        .Q(sel0[1]),
        .S(p_0_in));
  FDSE \axi_araddr_reg[4] 
       (.C(s00_axi_aclk),
        .CE(axi_arready0),
        .D(s00_axi_araddr[2]),
        .Q(sel0[2]),
        .S(p_0_in));
  LUT2 #(
    .INIT(4'h2)) 
    axi_arready_i_1
       (.I0(s00_axi_arvalid),
        .I1(S_AXI_ARREADY),
        .O(axi_arready0));
  FDRE axi_arready_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_arready0),
        .Q(S_AXI_ARREADY),
        .R(p_0_in));
  FDRE \axi_awaddr_reg[2] 
       (.C(s00_axi_aclk),
        .CE(axi_awready0),
        .D(s00_axi_awaddr[0]),
        .Q(p_0_in_0[0]),
        .R(p_0_in));
  FDRE \axi_awaddr_reg[3] 
       (.C(s00_axi_aclk),
        .CE(axi_awready0),
        .D(s00_axi_awaddr[1]),
        .Q(p_0_in_0[1]),
        .R(p_0_in));
  FDRE \axi_awaddr_reg[4] 
       (.C(s00_axi_aclk),
        .CE(axi_awready0),
        .D(s00_axi_awaddr[2]),
        .Q(p_0_in_0[2]),
        .R(p_0_in));
  LUT4 #(
    .INIT(16'h0080)) 
    axi_awready_i_1
       (.I0(aw_en_reg_n_0),
        .I1(s00_axi_wvalid),
        .I2(s00_axi_awvalid),
        .I3(S_AXI_AWREADY),
        .O(axi_awready0));
  FDRE axi_awready_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_awready0),
        .Q(S_AXI_AWREADY),
        .R(p_0_in));
  LUT6 #(
    .INIT(64'h0000FFFF80008000)) 
    axi_bvalid_i_1
       (.I0(s00_axi_awvalid),
        .I1(S_AXI_AWREADY),
        .I2(S_AXI_WREADY),
        .I3(s00_axi_wvalid),
        .I4(s00_axi_bready),
        .I5(s00_axi_bvalid),
        .O(axi_bvalid_i_1_n_0));
  FDRE axi_bvalid_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_bvalid_i_1_n_0),
        .Q(s00_axi_bvalid),
        .R(p_0_in));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \axi_rdata[0]_i_2 
       (.I0(iMinVoterRegTmrStat[0]),
        .I1(iStatusRegState[0]),
        .I2(sel0[1]),
        .I3(iMonitorRegByte[0]),
        .I4(sel0[0]),
        .I5(iConfigRegIrqMask[0]),
        .O(\axi_rdata[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \axi_rdata[0]_i_3 
       (.I0(DebugReg[0]),
        .I1(iTblAddReg[0]),
        .I2(sel0[1]),
        .I3(oResetsReg[0]),
        .I4(sel0[0]),
        .I5(iDevInfoId[0]),
        .O(\axi_rdata[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \axi_rdata[10]_i_1 
       (.I0(\axi_rdata[10]_i_2_n_0 ),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(iStatusRegMonEmpty),
        .O(reg_data_out[10]));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \axi_rdata[10]_i_2 
       (.I0(DebugReg[10]),
        .I1(iTblAddReg[10]),
        .I2(sel0[1]),
        .I3(iDevInfoVersionMinor[2]),
        .I4(sel0[0]),
        .O(\axi_rdata[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[11]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMinor[3]),
        .I3(sel0[1]),
        .I4(iTblAddReg[11]),
        .I5(DebugReg[11]),
        .O(reg_data_out[11]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[12]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMinor[4]),
        .I3(sel0[1]),
        .I4(iTblAddReg[12]),
        .I5(DebugReg[12]),
        .O(reg_data_out[12]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[13]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMinor[5]),
        .I3(sel0[1]),
        .I4(iTblAddReg[13]),
        .I5(DebugReg[13]),
        .O(reg_data_out[13]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[14]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMinor[6]),
        .I3(sel0[1]),
        .I4(iTblAddReg[14]),
        .I5(DebugReg[14]),
        .O(reg_data_out[14]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[15]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMinor[7]),
        .I3(sel0[1]),
        .I4(iTblAddReg[15]),
        .I5(DebugReg[15]),
        .O(reg_data_out[15]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[16]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMajor[0]),
        .I3(sel0[1]),
        .I4(iTblAddReg[16]),
        .I5(DebugReg[16]),
        .O(reg_data_out[16]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[17]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMajor[1]),
        .I3(sel0[1]),
        .I4(iTblAddReg[17]),
        .I5(DebugReg[17]),
        .O(reg_data_out[17]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[18]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMajor[2]),
        .I3(sel0[1]),
        .I4(iTblAddReg[18]),
        .I5(DebugReg[18]),
        .O(reg_data_out[18]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[19]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMajor[3]),
        .I3(sel0[1]),
        .I4(iTblAddReg[19]),
        .I5(DebugReg[19]),
        .O(reg_data_out[19]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \axi_rdata[1]_i_2 
       (.I0(iMinVoterRegTmrStat[1]),
        .I1(iStatusRegState[1]),
        .I2(sel0[1]),
        .I3(iMonitorRegByte[1]),
        .I4(sel0[0]),
        .I5(iConfigRegIrqMask[1]),
        .O(\axi_rdata[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \axi_rdata[1]_i_3 
       (.I0(DebugReg[1]),
        .I1(iTblAddReg[1]),
        .I2(sel0[1]),
        .I3(oResetsReg[1]),
        .I4(sel0[0]),
        .I5(iDevInfoId[1]),
        .O(\axi_rdata[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[20]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMajor[4]),
        .I3(sel0[1]),
        .I4(iTblAddReg[20]),
        .I5(DebugReg[20]),
        .O(reg_data_out[20]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[21]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMajor[5]),
        .I3(sel0[1]),
        .I4(iTblAddReg[21]),
        .I5(DebugReg[21]),
        .O(reg_data_out[21]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[22]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMajor[6]),
        .I3(sel0[1]),
        .I4(iTblAddReg[22]),
        .I5(DebugReg[22]),
        .O(reg_data_out[22]));
  LUT6 #(
    .INIT(64'hAA20882022200020)) 
    \axi_rdata[23]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(iDevInfoVersionMajor[7]),
        .I3(sel0[1]),
        .I4(iTblAddReg[23]),
        .I5(DebugReg[23]),
        .O(reg_data_out[23]));
  LUT5 #(
    .INIT(32'h8A800000)) 
    \axi_rdata[24]_i_1 
       (.I0(sel0[2]),
        .I1(DebugReg[24]),
        .I2(sel0[0]),
        .I3(iTblAddReg[24]),
        .I4(sel0[1]),
        .O(reg_data_out[24]));
  LUT5 #(
    .INIT(32'h8A800000)) 
    \axi_rdata[25]_i_1 
       (.I0(sel0[2]),
        .I1(DebugReg[25]),
        .I2(sel0[0]),
        .I3(iTblAddReg[25]),
        .I4(sel0[1]),
        .O(reg_data_out[25]));
  LUT5 #(
    .INIT(32'h8A800000)) 
    \axi_rdata[26]_i_1 
       (.I0(sel0[2]),
        .I1(DebugReg[26]),
        .I2(sel0[0]),
        .I3(iTblAddReg[26]),
        .I4(sel0[1]),
        .O(reg_data_out[26]));
  LUT5 #(
    .INIT(32'h8A800000)) 
    \axi_rdata[27]_i_1 
       (.I0(sel0[2]),
        .I1(DebugReg[27]),
        .I2(sel0[0]),
        .I3(iTblAddReg[27]),
        .I4(sel0[1]),
        .O(reg_data_out[27]));
  LUT5 #(
    .INIT(32'h8A800000)) 
    \axi_rdata[28]_i_1 
       (.I0(sel0[2]),
        .I1(DebugReg[28]),
        .I2(sel0[0]),
        .I3(iTblAddReg[28]),
        .I4(sel0[1]),
        .O(reg_data_out[28]));
  LUT5 #(
    .INIT(32'h8A800000)) 
    \axi_rdata[29]_i_1 
       (.I0(sel0[2]),
        .I1(DebugReg[29]),
        .I2(sel0[0]),
        .I3(iTblAddReg[29]),
        .I4(sel0[1]),
        .O(reg_data_out[29]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \axi_rdata[2]_i_2 
       (.I0(iMinVoterRegTmrStat[2]),
        .I1(iStatusRegState[2]),
        .I2(sel0[1]),
        .I3(iMonitorRegByte[2]),
        .I4(sel0[0]),
        .I5(iConfigRegIrqMask[2]),
        .O(\axi_rdata[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \axi_rdata[2]_i_3 
       (.I0(DebugReg[2]),
        .I1(iTblAddReg[2]),
        .I2(sel0[1]),
        .I3(oResetsReg[2]),
        .I4(sel0[0]),
        .I5(iDevInfoId[2]),
        .O(\axi_rdata[2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h8A800000)) 
    \axi_rdata[30]_i_1 
       (.I0(sel0[2]),
        .I1(DebugReg[30]),
        .I2(sel0[0]),
        .I3(iTblAddReg[30]),
        .I4(sel0[1]),
        .O(reg_data_out[30]));
  LUT3 #(
    .INIT(8'h08)) 
    \axi_rdata[31]_i_1 
       (.I0(S_AXI_ARREADY),
        .I1(s00_axi_arvalid),
        .I2(s00_axi_rvalid),
        .O(slv_reg_rden));
  LUT6 #(
    .INIT(64'hC0A0C0A0000F0000)) 
    \axi_rdata[31]_i_2 
       (.I0(iTblAddReg[31]),
        .I1(DebugReg[31]),
        .I2(sel0[2]),
        .I3(sel0[0]),
        .I4(iConfigRegSemEn),
        .I5(sel0[1]),
        .O(reg_data_out[31]));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \axi_rdata[3]_i_2 
       (.I0(iMinVoterRegCmpStat),
        .I1(iStatusRegState[3]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(iMonitorRegByte[3]),
        .O(\axi_rdata[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \axi_rdata[3]_i_3 
       (.I0(DebugReg[3]),
        .I1(iTblAddReg[3]),
        .I2(sel0[1]),
        .I3(iDevInfoId[3]),
        .I4(sel0[0]),
        .O(\axi_rdata[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h8888B888)) 
    \axi_rdata[4]_i_1 
       (.I0(\axi_rdata[4]_i_2_n_0 ),
        .I1(sel0[2]),
        .I2(iMonitorRegByte[4]),
        .I3(sel0[0]),
        .I4(sel0[1]),
        .O(reg_data_out[4]));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \axi_rdata[4]_i_2 
       (.I0(DebugReg[4]),
        .I1(iTblAddReg[4]),
        .I2(sel0[1]),
        .I3(iDevInfoId[4]),
        .I4(sel0[0]),
        .O(\axi_rdata[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h8888B888)) 
    \axi_rdata[5]_i_1 
       (.I0(\axi_rdata[5]_i_2_n_0 ),
        .I1(sel0[2]),
        .I2(iMonitorRegByte[5]),
        .I3(sel0[0]),
        .I4(sel0[1]),
        .O(reg_data_out[5]));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \axi_rdata[5]_i_2 
       (.I0(DebugReg[5]),
        .I1(iTblAddReg[5]),
        .I2(sel0[1]),
        .I3(iDevInfoId[5]),
        .I4(sel0[0]),
        .O(\axi_rdata[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h8888B888)) 
    \axi_rdata[6]_i_1 
       (.I0(\axi_rdata[6]_i_2_n_0 ),
        .I1(sel0[2]),
        .I2(iMonitorRegByte[6]),
        .I3(sel0[0]),
        .I4(sel0[1]),
        .O(reg_data_out[6]));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \axi_rdata[6]_i_2 
       (.I0(DebugReg[6]),
        .I1(iTblAddReg[6]),
        .I2(sel0[1]),
        .I3(iDevInfoId[6]),
        .I4(sel0[0]),
        .O(\axi_rdata[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h8888B888)) 
    \axi_rdata[7]_i_1 
       (.I0(\axi_rdata[7]_i_2_n_0 ),
        .I1(sel0[2]),
        .I2(iMonitorRegByte[7]),
        .I3(sel0[0]),
        .I4(sel0[1]),
        .O(reg_data_out[7]));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \axi_rdata[7]_i_2 
       (.I0(DebugReg[7]),
        .I1(iTblAddReg[7]),
        .I2(sel0[1]),
        .I3(iDevInfoId[7]),
        .I4(sel0[0]),
        .O(\axi_rdata[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h88BBB8888888B888)) 
    \axi_rdata[8]_i_1 
       (.I0(\axi_rdata[8]_i_2_n_0 ),
        .I1(sel0[2]),
        .I2(iStatusRegFifoCmdFull),
        .I3(sel0[1]),
        .I4(sel0[0]),
        .I5(data1),
        .O(reg_data_out[8]));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \axi_rdata[8]_i_2 
       (.I0(DebugReg[8]),
        .I1(iTblAddReg[8]),
        .I2(sel0[1]),
        .I3(iDevInfoVersionMinor[0]),
        .I4(sel0[0]),
        .O(\axi_rdata[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \axi_rdata[9]_i_1 
       (.I0(\axi_rdata[9]_i_2_n_0 ),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(iStatusRegFifoStatFull),
        .O(reg_data_out[9]));
  LUT5 #(
    .INIT(32'hA0A0CFC0)) 
    \axi_rdata[9]_i_2 
       (.I0(DebugReg[9]),
        .I1(iTblAddReg[9]),
        .I2(sel0[1]),
        .I3(iDevInfoVersionMinor[1]),
        .I4(sel0[0]),
        .O(\axi_rdata[9]_i_2_n_0 ));
  FDRE \axi_rdata_reg[0] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[0]),
        .Q(s00_axi_rdata[0]),
        .R(p_0_in));
  MUXF7 \axi_rdata_reg[0]_i_1 
       (.I0(\axi_rdata[0]_i_2_n_0 ),
        .I1(\axi_rdata[0]_i_3_n_0 ),
        .O(reg_data_out[0]),
        .S(sel0[2]));
  FDRE \axi_rdata_reg[10] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[10]),
        .Q(s00_axi_rdata[10]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[11] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[11]),
        .Q(s00_axi_rdata[11]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[12] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[12]),
        .Q(s00_axi_rdata[12]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[13] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[13]),
        .Q(s00_axi_rdata[13]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[14] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[14]),
        .Q(s00_axi_rdata[14]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[15] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[15]),
        .Q(s00_axi_rdata[15]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[16] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[16]),
        .Q(s00_axi_rdata[16]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[17] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[17]),
        .Q(s00_axi_rdata[17]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[18] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[18]),
        .Q(s00_axi_rdata[18]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[19] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[19]),
        .Q(s00_axi_rdata[19]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[1] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[1]),
        .Q(s00_axi_rdata[1]),
        .R(p_0_in));
  MUXF7 \axi_rdata_reg[1]_i_1 
       (.I0(\axi_rdata[1]_i_2_n_0 ),
        .I1(\axi_rdata[1]_i_3_n_0 ),
        .O(reg_data_out[1]),
        .S(sel0[2]));
  FDRE \axi_rdata_reg[20] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[20]),
        .Q(s00_axi_rdata[20]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[21] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[21]),
        .Q(s00_axi_rdata[21]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[22] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[22]),
        .Q(s00_axi_rdata[22]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[23] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[23]),
        .Q(s00_axi_rdata[23]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[24] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[24]),
        .Q(s00_axi_rdata[24]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[25] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[25]),
        .Q(s00_axi_rdata[25]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[26] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[26]),
        .Q(s00_axi_rdata[26]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[27] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[27]),
        .Q(s00_axi_rdata[27]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[28] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[28]),
        .Q(s00_axi_rdata[28]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[29] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[29]),
        .Q(s00_axi_rdata[29]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[2] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[2]),
        .Q(s00_axi_rdata[2]),
        .R(p_0_in));
  MUXF7 \axi_rdata_reg[2]_i_1 
       (.I0(\axi_rdata[2]_i_2_n_0 ),
        .I1(\axi_rdata[2]_i_3_n_0 ),
        .O(reg_data_out[2]),
        .S(sel0[2]));
  FDRE \axi_rdata_reg[30] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[30]),
        .Q(s00_axi_rdata[30]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[31] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[31]),
        .Q(s00_axi_rdata[31]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[3] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[3]),
        .Q(s00_axi_rdata[3]),
        .R(p_0_in));
  MUXF7 \axi_rdata_reg[3]_i_1 
       (.I0(\axi_rdata[3]_i_2_n_0 ),
        .I1(\axi_rdata[3]_i_3_n_0 ),
        .O(reg_data_out[3]),
        .S(sel0[2]));
  FDRE \axi_rdata_reg[4] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[4]),
        .Q(s00_axi_rdata[4]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[5] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[5]),
        .Q(s00_axi_rdata[5]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[6] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[6]),
        .Q(s00_axi_rdata[6]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[7] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[7]),
        .Q(s00_axi_rdata[7]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[8] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[8]),
        .Q(s00_axi_rdata[8]),
        .R(p_0_in));
  FDRE \axi_rdata_reg[9] 
       (.C(s00_axi_aclk),
        .CE(slv_reg_rden),
        .D(reg_data_out[9]),
        .Q(s00_axi_rdata[9]),
        .R(p_0_in));
  LUT4 #(
    .INIT(16'h08F8)) 
    axi_rvalid_i_1
       (.I0(s00_axi_arvalid),
        .I1(S_AXI_ARREADY),
        .I2(s00_axi_rvalid),
        .I3(s00_axi_rready),
        .O(axi_rvalid_i_1_n_0));
  FDRE axi_rvalid_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_rvalid_i_1_n_0),
        .Q(s00_axi_rvalid),
        .R(p_0_in));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    axi_wready_i_1
       (.I0(aw_en_reg_n_0),
        .I1(s00_axi_wvalid),
        .I2(s00_axi_awvalid),
        .I3(S_AXI_WREADY),
        .O(axi_wready0));
  FDRE axi_wready_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(axi_wready0),
        .Q(S_AXI_WREADY),
        .R(p_0_in));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    oMinVoterRegClearStrobe_i_1
       (.I0(s00_axi_aresetn),
        .I1(s00_axi_wvalid),
        .I2(S_AXI_WREADY),
        .I3(S_AXI_AWREADY),
        .I4(s00_axi_awvalid),
        .O(oMinVoterRegClearStrobe_i_1_n_0));
  LUT6 #(
    .INIT(64'h000000000000FFFE)) 
    oMinVoterRegClearStrobe_i_2
       (.I0(s00_axi_wstrb[3]),
        .I1(s00_axi_wstrb[1]),
        .I2(s00_axi_wstrb[0]),
        .I3(s00_axi_wstrb[2]),
        .I4(p_0_in_0[2]),
        .I5(oMinVoterRegClearStrobe_i_3_n_0),
        .O(oMinVoterRegClearStrobe_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT2 #(
    .INIT(4'h7)) 
    oMinVoterRegClearStrobe_i_3
       (.I0(p_0_in_0[1]),
        .I1(p_0_in_0[0]),
        .O(oMinVoterRegClearStrobe_i_3_n_0));
  FDRE oMinVoterRegClearStrobe_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(oMinVoterRegClearStrobe_i_2_n_0),
        .Q(oMinVoterRegClearStrobe),
        .R(oMinVoterRegClearStrobe_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    oMonitorRegGetByte_INST_0
       (.I0(oMonitorRegPutByte),
        .O(oMonitorRegGetByte));
  LUT6 #(
    .INIT(64'h4444444444444440)) 
    oMonitorRegWriteStrobe_i_1
       (.I0(\MonitorReg[8]_i_4_n_0 ),
        .I1(p_0_in_0[0]),
        .I2(s00_axi_wstrb[3]),
        .I3(s00_axi_wstrb[1]),
        .I4(s00_axi_wstrb[0]),
        .I5(s00_axi_wstrb[2]),
        .O(oMonitorRegWriteStrobe_i_1_n_0));
  FDRE oMonitorRegWriteStrobe_reg
       (.C(s00_axi_aclk),
        .CE(1'b1),
        .D(oMonitorRegWriteStrobe_i_1_n_0),
        .Q(oMonitorRegWriteStrobe),
        .R(oMinVoterRegClearStrobe_i_1_n_0));
endmodule

(* ORIG_REF_NAME = "semicap_engine" *) 
module semicap_semicap_engine
   (oSemMonRxData,
    oStatusRegFifoCmdFull,
    oSemMonRxEmpty,
    oMonitorRegByte,
    oSemMonTxFull,
    oStatusRegMonEmpty,
    oHwIcapGrant,
    oSemCapGrant,
    oConfigRegSemEn,
    oHwIcapRelinquish,
    oSemCapRelinquish,
    Q,
    oIRq,
    iClk,
    iMonitorRegByte,
    iSemMonRxRead,
    iSemMonTxData,
    iSemMonTxWrite,
    iRst_n,
    iMinVoterRegClearStrobe,
    iRpMinVoter,
    iConfigRegIrqMask,
    iHwIcapIrq,
    iSemStatusessential,
    iSemStatusuncorrectable,
    iMonitorRegGetByte,
    iMonitorRegWriteStrobe,
    iMonitorRegPutByte,
    iSemCapRequest,
    iConfigRegSemEn,
    iHwIcapRequest);
  output [7:0]oSemMonRxData;
  output oStatusRegFifoCmdFull;
  output oSemMonRxEmpty;
  output [7:0]oMonitorRegByte;
  output oSemMonTxFull;
  output oStatusRegMonEmpty;
  output oHwIcapGrant;
  output oSemCapGrant;
  output oConfigRegSemEn;
  output oHwIcapRelinquish;
  output oSemCapRelinquish;
  output [3:0]Q;
  output oIRq;
  input iClk;
  input [7:0]iMonitorRegByte;
  input iSemMonRxRead;
  input [7:0]iSemMonTxData;
  input iSemMonTxWrite;
  input iRst_n;
  input iMinVoterRegClearStrobe;
  input [3:0]iRpMinVoter;
  input [2:0]iConfigRegIrqMask;
  input iHwIcapIrq;
  input iSemStatusessential;
  input iSemStatusuncorrectable;
  input iMonitorRegGetByte;
  input iMonitorRegWriteStrobe;
  input iMonitorRegPutByte;
  input iSemCapRequest;
  input iConfigRegSemEn;
  input iHwIcapRequest;

  wire [3:0]Q;
  wire U_icaparbiter_n_1;
  wire iClk;
  wire [2:0]iConfigRegIrqMask;
  wire iConfigRegSemEn;
  wire iHwIcapIrq;
  wire iHwIcapRequest;
  wire iMinVoterRegClearStrobe;
  wire [7:0]iMonitorRegByte;
  wire iMonitorRegGetByte;
  wire iMonitorRegPutByte;
  wire iMonitorRegWriteStrobe;
  wire [3:0]iRpMinVoter;
  wire iRst_n;
  wire iSemCapRequest;
  wire iSemMonRxRead;
  wire [7:0]iSemMonTxData;
  wire iSemMonTxWrite;
  wire iSemStatusessential;
  wire iSemStatusuncorrectable;
  wire oConfigRegSemEn;
  wire oHwIcapGrant;
  wire oHwIcapRelinquish;
  wire oIRq;
  wire [7:0]oMonitorRegByte;
  wire oSemCapGrant;
  wire oSemCapRelinquish;
  wire [7:0]oSemMonRxData;
  wire oSemMonRxEmpty;
  wire oSemMonTxFull;
  wire oStatusRegFifoCmdFull;
  wire oStatusRegMonEmpty;

  semicap_semicap_fsm SEMICAP_FSMEEMUNFWT
       (.Q(Q),
        .\axi_rdata_reg[8] (U_icaparbiter_n_1),
        .iClk(iClk),
        .iConfigRegIrqMask(iConfigRegIrqMask),
        .iHwIcapIrq(iHwIcapIrq),
        .iMinVoterRegClearStrobe(iMinVoterRegClearStrobe),
        .iMonitorRegByte(iMonitorRegByte),
        .iMonitorRegGetByte(iMonitorRegGetByte),
        .iMonitorRegPutByte(iMonitorRegPutByte),
        .iMonitorRegWriteStrobe(iMonitorRegWriteStrobe),
        .iRpMinVoter(iRpMinVoter),
        .iRst_n(iRst_n),
        .iSemMonRxRead(iSemMonRxRead),
        .iSemMonTxData(iSemMonTxData),
        .iSemMonTxWrite(iSemMonTxWrite),
        .iSemStatusessential(iSemStatusessential),
        .iSemStatusuncorrectable(iSemStatusuncorrectable),
        .oIRq(oIRq),
        .oMonitorRegByte(oMonitorRegByte),
        .oSemMonRxData(oSemMonRxData),
        .oSemMonRxEmpty(oSemMonRxEmpty),
        .oSemMonTxFull(oSemMonTxFull),
        .oStatusRegFifoCmdFull(oStatusRegFifoCmdFull),
        .oStatusRegMonEmpty(oStatusRegMonEmpty));
  semicap_icapArbiter U_icaparbiter
       (.areset_n(U_icaparbiter_n_1),
        .iClk(iClk),
        .iConfigRegSemEn(iConfigRegSemEn),
        .iHwIcapRequest(iHwIcapRequest),
        .iRst_n(iRst_n),
        .iSemCapRequest(iSemCapRequest),
        .oConfigRegSemEn(oConfigRegSemEn),
        .oHwIcapGrant(oHwIcapGrant),
        .oHwIcapRelinquish(oHwIcapRelinquish),
        .oSemCapGrant(oSemCapGrant),
        .oSemCapRelinquish(oSemCapRelinquish));
endmodule

(* ORIG_REF_NAME = "semicap_fsm" *) 
module semicap_semicap_fsm
   (oSemMonRxData,
    oStatusRegFifoCmdFull,
    oSemMonRxEmpty,
    oMonitorRegByte,
    oSemMonTxFull,
    oStatusRegMonEmpty,
    Q,
    oIRq,
    iClk,
    \axi_rdata_reg[8] ,
    iMonitorRegByte,
    iSemMonRxRead,
    iSemMonTxData,
    iSemMonTxWrite,
    iMinVoterRegClearStrobe,
    iRst_n,
    iRpMinVoter,
    iConfigRegIrqMask,
    iHwIcapIrq,
    iSemStatusessential,
    iSemStatusuncorrectable,
    iMonitorRegGetByte,
    iMonitorRegWriteStrobe,
    iMonitorRegPutByte);
  output [7:0]oSemMonRxData;
  output oStatusRegFifoCmdFull;
  output oSemMonRxEmpty;
  output [7:0]oMonitorRegByte;
  output oSemMonTxFull;
  output oStatusRegMonEmpty;
  output [3:0]Q;
  output oIRq;
  input iClk;
  input \axi_rdata_reg[8] ;
  input [7:0]iMonitorRegByte;
  input iSemMonRxRead;
  input [7:0]iSemMonTxData;
  input iSemMonTxWrite;
  input iMinVoterRegClearStrobe;
  input iRst_n;
  input [3:0]iRpMinVoter;
  input [2:0]iConfigRegIrqMask;
  input iHwIcapIrq;
  input iSemStatusessential;
  input iSemStatusuncorrectable;
  input iMonitorRegGetByte;
  input iMonitorRegWriteStrobe;
  input iMonitorRegPutByte;

  wire [3:0]Q;
  wire \axi_rdata_reg[8] ;
  wire iClk;
  wire [2:0]iConfigRegIrqMask;
  wire iFifoMonCmdPut;
  wire iHwIcapIrq;
  wire iMinVoterRegClearStrobe;
  wire [7:0]iMonitorRegByte;
  wire iMonitorRegGetByte;
  wire iMonitorRegPutByte;
  wire iMonitorRegWriteStrobe;
  wire [3:0]iRpMinVoter;
  wire iRst_n;
  wire iSemMonRxRead;
  wire [7:0]iSemMonTxData;
  wire iSemMonTxWrite;
  wire iSemStatusessential;
  wire iSemStatusuncorrectable;
  wire oFifoMonStatGet;
  wire oIRq;
  wire oIRq_INST_0_i_1_n_0;
  wire [7:0]oMonitorRegByte;
  wire [7:0]oSemMonRxData;
  wire oSemMonRxEmpty;
  wire oSemMonTxFull;
  wire oStatusRegFifoCmdFull;
  wire oStatusRegMonEmpty;
  wire NLW_fifo_mon_cmd_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_fifo_mon_cmd_inst_wr_rst_busy_UNCONNECTED;
  wire NLW_fifo_mon_stat_inst_rd_rst_busy_UNCONNECTED;
  wire NLW_fifo_mon_stat_inst_wr_rst_busy_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "fifo_mon_cmd,fifo_generator_v13_2_4,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_4,Vivado 2019.1.1" *) 
  semicap_fifo_mon_cmd fifo_mon_cmd_inst
       (.clk(iClk),
        .din(iMonitorRegByte),
        .dout(oSemMonRxData),
        .empty(oSemMonRxEmpty),
        .full(oStatusRegFifoCmdFull),
        .rd_en(iSemMonRxRead),
        .rd_rst_busy(NLW_fifo_mon_cmd_inst_rd_rst_busy_UNCONNECTED),
        .srst(\axi_rdata_reg[8] ),
        .wr_en(iFifoMonCmdPut),
        .wr_rst_busy(NLW_fifo_mon_cmd_inst_wr_rst_busy_UNCONNECTED));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT2 #(
    .INIT(4'h8)) 
    fifo_mon_cmd_inst_i_1
       (.I0(iMonitorRegPutByte),
        .I1(iMonitorRegWriteStrobe),
        .O(iFifoMonCmdPut));
  (* CHECK_LICENSE_TYPE = "fifo_mon_stat,fifo_generator_v13_2_4,{}" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_4,Vivado 2019.1.1" *) 
  semicap_fifo_mon_stat fifo_mon_stat_inst
       (.clk(iClk),
        .din(iSemMonTxData),
        .dout(oMonitorRegByte),
        .empty(oStatusRegMonEmpty),
        .full(oSemMonTxFull),
        .rd_en(oFifoMonStatGet),
        .rd_rst_busy(NLW_fifo_mon_stat_inst_rd_rst_busy_UNCONNECTED),
        .srst(\axi_rdata_reg[8] ),
        .wr_en(iSemMonTxWrite),
        .wr_rst_busy(NLW_fifo_mon_stat_inst_wr_rst_busy_UNCONNECTED));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT2 #(
    .INIT(4'h8)) 
    fifo_mon_stat_inst_i_1
       (.I0(iMonitorRegGetByte),
        .I1(iMonitorRegWriteStrobe),
        .O(oFifoMonStatGet));
  semicap_minority_voter_status_latch minority_voter_status_latch_inst
       (.Q(Q),
        .iClk(iClk),
        .iMinVoterRegClearStrobe(iMinVoterRegClearStrobe),
        .iRpMinVoter(iRpMinVoter),
        .iRst_n(iRst_n));
  LUT4 #(
    .INIT(16'hFFAE)) 
    oIRq_INST_0
       (.I0(oIRq_INST_0_i_1_n_0),
        .I1(iConfigRegIrqMask[1]),
        .I2(oStatusRegMonEmpty),
        .I3(iHwIcapIrq),
        .O(oIRq));
  LUT5 #(
    .INIT(32'hF8F8F888)) 
    oIRq_INST_0_i_1
       (.I0(oSemMonTxFull),
        .I1(iConfigRegIrqMask[0]),
        .I2(iConfigRegIrqMask[2]),
        .I3(iSemStatusessential),
        .I4(iSemStatusuncorrectable),
        .O(oIRq_INST_0_i_1_n_0));
endmodule

(* CHECK_LICENSE_TYPE = "semicap_hipero_icap_0_0,hipero_icap,{}" *) (* ORIG_REF_NAME = "semicap_hipero_icap_0_0" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* ip_definition_source = "package_project" *) (* x_core_info = "hipero_icap,Vivado 2018.3.1" *) 
module semicap_semicap_hipero_icap_0_0
   (icap_avail,
    icap_prdone,
    icap_prerror,
    icap_o,
    fecc_crcerror,
    fecc_eccerrornotsingle,
    fecc_eccerrorsingle,
    fecc_endofframe,
    fecc_endofscan,
    fecc_far,
    icap_clk,
    icap_csib,
    icap_rdwrb,
    icap_i,
    fecc_farsel);
  output icap_avail;
  output icap_prdone;
  output icap_prerror;
  output [31:0]icap_o;
  output fecc_crcerror;
  output fecc_eccerrornotsingle;
  output fecc_eccerrorsingle;
  output fecc_endofframe;
  output fecc_endofscan;
  output [25:0]fecc_far;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 icap_clk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME icap_clk, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN semicap_clk_100MHz, INSERT_VIP 0" *) input icap_clk;
  input icap_csib;
  input icap_rdwrb;
  input [31:0]icap_i;
  input [1:0]fecc_farsel;

  wire fecc_crcerror;
  wire fecc_eccerrornotsingle;
  wire fecc_eccerrorsingle;
  wire fecc_endofframe;
  wire fecc_endofscan;
  wire [25:0]fecc_far;
  wire [1:0]fecc_farsel;
  wire icap_avail;
  wire icap_clk;
  wire icap_csib;
  wire [31:0]icap_i;
  wire [31:0]icap_o;
  wire icap_prdone;
  wire icap_prerror;
  wire icap_rdwrb;

  semicap_hipero_icap U0
       (.fecc_crcerror(fecc_crcerror),
        .fecc_eccerrornotsingle(fecc_eccerrornotsingle),
        .fecc_eccerrorsingle(fecc_eccerrorsingle),
        .fecc_endofframe(fecc_endofframe),
        .fecc_endofscan(fecc_endofscan),
        .fecc_far(fecc_far),
        .fecc_farsel(fecc_farsel),
        .icap_avail(icap_avail),
        .icap_clk(icap_clk),
        .icap_csib(icap_csib),
        .icap_i(icap_i),
        .icap_o(icap_o),
        .icap_prdone(icap_prdone),
        .icap_prerror(icap_prerror),
        .icap_rdwrb(icap_rdwrb));
endmodule

(* ORIG_REF_NAME = "semicap_hipero_sem_0" *) (* x_core_info = "sem_ultra_v3_1_11,Vivado 2019.1.1" *) 
module semicap_semicap_hipero_sem_0
   (status_heartbeat,
    status_initialization,
    status_observation,
    status_correction,
    status_classification,
    status_injection,
    status_diagnostic_scan,
    status_detect_only,
    status_essential,
    status_uncorrectable,
    fetch_txdata,
    fetch_txwrite,
    fetch_txfull,
    fetch_rxdata,
    fetch_rxread,
    fetch_rxempty,
    fetch_tbladdr,
    monitor_txdata,
    monitor_txwrite,
    monitor_txfull,
    monitor_rxdata,
    monitor_rxread,
    monitor_rxempty,
    command_strobe,
    command_busy,
    command_code,
    icap_clk,
    icap_o,
    icap_csib,
    icap_rdwrb,
    icap_i,
    icap_prerror,
    icap_prdone,
    icap_avail,
    cap_rel,
    cap_gnt,
    cap_req,
    fecc_eccerrornotsingle,
    fecc_eccerrorsingle,
    fecc_endofframe,
    fecc_endofscan,
    fecc_crcerror,
    fecc_far,
    fecc_farsel,
    aux_error_cr_ne,
    aux_error_cr_es,
    aux_error_uc);
  output status_heartbeat;
  output status_initialization;
  output status_observation;
  output status_correction;
  output status_classification;
  output status_injection;
  output status_diagnostic_scan;
  output status_detect_only;
  output status_essential;
  output status_uncorrectable;
  output [7:0]fetch_txdata;
  output fetch_txwrite;
  input fetch_txfull;
  input [7:0]fetch_rxdata;
  output fetch_rxread;
  input fetch_rxempty;
  input [31:0]fetch_tbladdr;
  output [7:0]monitor_txdata;
  output monitor_txwrite;
  input monitor_txfull;
  input [7:0]monitor_rxdata;
  output monitor_rxread;
  input monitor_rxempty;
  input command_strobe;
  output command_busy;
  input [39:0]command_code;
  input icap_clk;
  input [31:0]icap_o;
  output icap_csib;
  output icap_rdwrb;
  output [31:0]icap_i;
  input icap_prerror;
  input icap_prdone;
  input icap_avail;
  input cap_rel;
  input cap_gnt;
  output cap_req;
  input fecc_eccerrornotsingle;
  input fecc_eccerrorsingle;
  input fecc_endofframe;
  input fecc_endofscan;
  input fecc_crcerror;
  input [25:0]fecc_far;
  output [1:0]fecc_farsel;
  input aux_error_cr_ne;
  input aux_error_cr_es;
  input aux_error_uc;

  wire \<const0> ;
  wire aux_error_cr_es;
  wire aux_error_cr_ne;
  wire aux_error_uc;
  wire cap_gnt;
  wire cap_rel;
  wire cap_req;
  wire command_busy;
  wire [39:0]command_code;
  wire command_strobe;
  wire fecc_crcerror;
  wire fecc_eccerrornotsingle;
  wire fecc_eccerrorsingle;
  wire fecc_endofframe;
  wire fecc_endofscan;
  wire [7:0]fetch_rxdata;
  wire fetch_rxempty;
  wire fetch_rxread;
  wire [31:0]fetch_tbladdr;
  wire fetch_txfull;
  wire fetch_txwrite;
  wire icap_avail;
  wire icap_clk;
  wire icap_csib;
  wire [31:0]icap_i;
  wire [31:0]icap_o;
  wire icap_prdone;
  wire icap_prerror;
  wire icap_rdwrb;
  wire [7:0]monitor_rxdata;
  wire monitor_rxempty;
  wire monitor_rxread;
  wire [7:0]monitor_txdata;
  wire monitor_txfull;
  wire monitor_txwrite;
  wire status_classification;
  wire status_correction;
  wire status_detect_only;
  wire status_diagnostic_scan;
  wire status_essential;
  wire status_initialization;
  wire status_injection;
  wire status_observation;
  wire status_uncorrectable;
  wire NLW_inst_slr0_status_heartbeat_UNCONNECTED;
  wire NLW_inst_slr1_status_heartbeat_UNCONNECTED;
  wire NLW_inst_slr2_status_heartbeat_UNCONNECTED;
  wire NLW_inst_slr3_status_heartbeat_UNCONNECTED;
  wire NLW_inst_status_heartbeat_UNCONNECTED;
  wire [1:0]NLW_inst_fecc_farsel_UNCONNECTED;
  wire [7:0]NLW_inst_monitor_txdata_UNCONNECTED;
  wire [1:0]NLW_inst_slr0_fecc_farsel_UNCONNECTED;
  wire [1:0]NLW_inst_slr1_fecc_farsel_UNCONNECTED;
  wire [1:0]NLW_inst_slr2_fecc_farsel_UNCONNECTED;
  wire [1:0]NLW_inst_slr3_fecc_farsel_UNCONNECTED;

  assign fecc_farsel[1] = \<const0> ;
  assign fecc_farsel[0] = \<const0> ;
  assign fetch_txdata[7:0] = monitor_txdata;
  assign status_heartbeat = fecc_endofframe;
  GND GND
       (.G(\<const0> ));
  (* C_FAMILY = "kintexu" *) 
  (* TCQ = "1" *) 
  (* b_cosim = "0" *) 
  (* b_debug = "0" *) 
  (* b_dfset = "0" *) 
  (* c_arch = "0" *) 
  (* c_command_code_width = "40" *) 
  (* c_config_prim_loc = "1" *) 
  (* c_extra_checks = "4" *) 
  (* c_feature_set = "3" *) 
  (* c_fecc_far_width = "26" *) 
  (* c_has_error_injection = "1" *) 
  (* c_helper_block_loc = "1" *) 
  (* c_vusp_slr = "0" *) 
  semicap_sem_ultra_v3_1_11 inst
       (.aux_error_cr_es(aux_error_cr_es),
        .aux_error_cr_ne(aux_error_cr_ne),
        .aux_error_uc(aux_error_uc),
        .cap_gnt(cap_gnt),
        .cap_rel(cap_rel),
        .cap_req(cap_req),
        .command_busy(command_busy),
        .command_code(command_code),
        .command_strobe(command_strobe),
        .fecc_crcerror(fecc_crcerror),
        .fecc_eccerrornotsingle(fecc_eccerrornotsingle),
        .fecc_eccerrorsingle(fecc_eccerrorsingle),
        .fecc_endofframe(fecc_endofframe),
        .fecc_endofscan(fecc_endofscan),
        .fecc_far({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .fecc_farsel(NLW_inst_fecc_farsel_UNCONNECTED[1:0]),
        .fetch_rxdata(fetch_rxdata),
        .fetch_rxempty(fetch_rxempty),
        .fetch_rxread(fetch_rxread),
        .fetch_tbladdr(fetch_tbladdr),
        .fetch_txdata(monitor_txdata),
        .fetch_txfull(fetch_txfull),
        .fetch_txwrite(fetch_txwrite),
        .icap_avail(icap_avail),
        .icap_clk(icap_clk),
        .icap_csib(icap_csib),
        .icap_i(icap_i),
        .icap_o(icap_o),
        .icap_prdone(icap_prdone),
        .icap_prerror(icap_prerror),
        .icap_rdwrb(icap_rdwrb),
        .monitor_rxdata(monitor_rxdata),
        .monitor_rxempty(monitor_rxempty),
        .monitor_rxread(monitor_rxread),
        .monitor_txdata(NLW_inst_monitor_txdata_UNCONNECTED[7:0]),
        .monitor_txfull(monitor_txfull),
        .monitor_txwrite(monitor_txwrite),
        .slr0_fecc_crcerror(1'b0),
        .slr0_fecc_eccerrornotsingle(1'b0),
        .slr0_fecc_eccerrorsingle(1'b0),
        .slr0_fecc_endofframe(1'b0),
        .slr0_fecc_endofscan(1'b0),
        .slr0_fecc_far({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .slr0_fecc_farsel(NLW_inst_slr0_fecc_farsel_UNCONNECTED[1:0]),
        .slr0_status_heartbeat(NLW_inst_slr0_status_heartbeat_UNCONNECTED),
        .slr1_fecc_crcerror(1'b0),
        .slr1_fecc_eccerrornotsingle(1'b0),
        .slr1_fecc_eccerrorsingle(1'b0),
        .slr1_fecc_endofframe(1'b0),
        .slr1_fecc_endofscan(1'b0),
        .slr1_fecc_far({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .slr1_fecc_farsel(NLW_inst_slr1_fecc_farsel_UNCONNECTED[1:0]),
        .slr1_status_heartbeat(NLW_inst_slr1_status_heartbeat_UNCONNECTED),
        .slr2_fecc_crcerror(1'b0),
        .slr2_fecc_eccerrornotsingle(1'b0),
        .slr2_fecc_eccerrorsingle(1'b0),
        .slr2_fecc_endofframe(1'b0),
        .slr2_fecc_endofscan(1'b0),
        .slr2_fecc_far({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .slr2_fecc_farsel(NLW_inst_slr2_fecc_farsel_UNCONNECTED[1:0]),
        .slr2_status_heartbeat(NLW_inst_slr2_status_heartbeat_UNCONNECTED),
        .slr3_fecc_crcerror(1'b0),
        .slr3_fecc_eccerrornotsingle(1'b0),
        .slr3_fecc_eccerrorsingle(1'b0),
        .slr3_fecc_endofframe(1'b0),
        .slr3_fecc_endofscan(1'b0),
        .slr3_fecc_far({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .slr3_fecc_farsel(NLW_inst_slr3_fecc_farsel_UNCONNECTED[1:0]),
        .slr3_status_heartbeat(NLW_inst_slr3_status_heartbeat_UNCONNECTED),
        .status_classification(status_classification),
        .status_correction(status_correction),
        .status_detect_only(status_detect_only),
        .status_diagnostic_scan(status_diagnostic_scan),
        .status_essential(status_essential),
        .status_heartbeat(NLW_inst_status_heartbeat_UNCONNECTED),
        .status_initialization(status_initialization),
        .status_injection(status_injection),
        .status_observation(status_observation),
        .status_uncorrectable(status_uncorrectable));
endmodule

(* CHECK_LICENSE_TYPE = "semicap_icapmux_0_0,icapmux,{}" *) (* ORIG_REF_NAME = "semicap_icapmux_0_0" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* ip_definition_source = "module_ref" *) (* x_core_info = "icapmux,Vivado 2019.1.1" *) 
module semicap_semicap_icapmux_0_0
   (oIcapCsib,
    oIcapI,
    oIcapRdWrb,
    iIcapAvail,
    iIcapO,
    iIcapPrDone,
    iIcapPrError,
    oHwIcapAvail,
    oHwIcapI,
    iHwIcapCsib,
    iHwIcapO,
    iHwIcapWr_n,
    oSemIcapAvail,
    oSemIcapI,
    oSemIcapPrDone,
    oSemIcapPrError,
    iSemIcapCsib,
    iSemIcapWr_n,
    iSemIcapO,
    iEngSemSelect);
  output oIcapCsib;
  output [31:0]oIcapI;
  output oIcapRdWrb;
  input iIcapAvail;
  input [31:0]iIcapO;
  input iIcapPrDone;
  input iIcapPrError;
  output oHwIcapAvail;
  output [31:0]oHwIcapI;
  input iHwIcapCsib;
  input [31:0]iHwIcapO;
  input iHwIcapWr_n;
  output oSemIcapAvail;
  output [31:0]oSemIcapI;
  output oSemIcapPrDone;
  output oSemIcapPrError;
  input iSemIcapCsib;
  input iSemIcapWr_n;
  input [31:0]iSemIcapO;
  input iEngSemSelect;

  wire iEngSemSelect;
  wire iHwIcapCsib;
  wire [31:0]iHwIcapO;
  wire iHwIcapWr_n;
  wire iIcapAvail;
  wire [31:0]iIcapO;
  wire iIcapPrDone;
  wire iIcapPrError;
  wire iSemIcapCsib;
  wire [31:0]iSemIcapO;
  wire iSemIcapWr_n;
  wire oHwIcapAvail;
  wire [31:0]oHwIcapI;
  wire oIcapCsib;
  wire [31:0]oIcapI;
  wire oIcapRdWrb;
  wire oSemIcapAvail;
  wire [31:0]oSemIcapI;
  wire oSemIcapPrDone;
  wire oSemIcapPrError;

  semicap_icapmux U0
       (.iEngSemSelect(iEngSemSelect),
        .iHwIcapO(iHwIcapO),
        .iIcapO(iIcapO),
        .iSemIcapO(iSemIcapO),
        .oHwIcapI(oHwIcapI),
        .oIcapI(oIcapI));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT2 #(
    .INIT(4'h2)) 
    oHwIcapAvail_INST_0
       (.I0(iIcapAvail),
        .I1(iEngSemSelect),
        .O(oHwIcapAvail));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    oIcapCsib_INST_0
       (.I0(iSemIcapCsib),
        .I1(iEngSemSelect),
        .I2(iHwIcapCsib),
        .O(oIcapCsib));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    oIcapRdWrb_INST_0
       (.I0(iSemIcapWr_n),
        .I1(iEngSemSelect),
        .I2(iHwIcapWr_n),
        .O(oIcapRdWrb));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT2 #(
    .INIT(4'h8)) 
    oSemIcapAvail_INST_0
       (.I0(iEngSemSelect),
        .I1(iIcapAvail),
        .O(oSemIcapAvail));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[0]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[0]),
        .O(oSemIcapI[0]));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[10]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[10]),
        .O(oSemIcapI[10]));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[11]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[11]),
        .O(oSemIcapI[11]));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[12]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[12]),
        .O(oSemIcapI[12]));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[13]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[13]),
        .O(oSemIcapI[13]));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[14]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[14]),
        .O(oSemIcapI[14]));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[15]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[15]),
        .O(oSemIcapI[15]));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[16]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[16]),
        .O(oSemIcapI[16]));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[17]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[17]),
        .O(oSemIcapI[17]));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[18]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[18]),
        .O(oSemIcapI[18]));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[19]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[19]),
        .O(oSemIcapI[19]));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[1]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[1]),
        .O(oSemIcapI[1]));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[20]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[20]),
        .O(oSemIcapI[20]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[21]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[21]),
        .O(oSemIcapI[21]));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[22]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[22]),
        .O(oSemIcapI[22]));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[23]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[23]),
        .O(oSemIcapI[23]));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[24]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[24]),
        .O(oSemIcapI[24]));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[25]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[25]),
        .O(oSemIcapI[25]));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[26]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[26]),
        .O(oSemIcapI[26]));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[27]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[27]),
        .O(oSemIcapI[27]));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[28]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[28]),
        .O(oSemIcapI[28]));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[29]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[29]),
        .O(oSemIcapI[29]));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[2]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[2]),
        .O(oSemIcapI[2]));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[30]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[30]),
        .O(oSemIcapI[30]));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[31]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[31]),
        .O(oSemIcapI[31]));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[3]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[3]),
        .O(oSemIcapI[3]));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[4]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[4]),
        .O(oSemIcapI[4]));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[5]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[5]),
        .O(oSemIcapI[5]));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[6]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[6]),
        .O(oSemIcapI[6]));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[7]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[7]),
        .O(oSemIcapI[7]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[8]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[8]),
        .O(oSemIcapI[8]));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \oSemIcapI[9]_INST_0 
       (.I0(iEngSemSelect),
        .I1(iIcapO[9]),
        .O(oSemIcapI[9]));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT2 #(
    .INIT(4'h8)) 
    oSemIcapPrDone_INST_0
       (.I0(iEngSemSelect),
        .I1(iIcapPrDone),
        .O(oSemIcapPrDone));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT2 #(
    .INIT(4'h8)) 
    oSemIcapPrError_INST_0
       (.I0(iEngSemSelect),
        .I1(iIcapPrError),
        .O(oSemIcapPrError));
endmodule

(* CHECK_LICENSE_TYPE = "semicap_semicap_axi_0_0,semicap_axi_v1_0,{}" *) (* ORIG_REF_NAME = "semicap_semicap_axi_0_0" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* x_core_info = "semicap_axi_v1_0,Vivado 2019.1.1" *) 
module semicap_semicap_semicap_axi_0_0
   (iMinVoterRegTmrStat,
    iDevInfoId,
    iDevInfoVersionMajor,
    iDevInfoVersionMinor,
    iMinVoterRegCmpStat,
    iStatusRegFifoCmdFull,
    iStatusRegFifoStatFull,
    iStatusRegMonEmpty,
    iStatusRegState,
    oMinVoterRegClearStrobe,
    oMonitorRegGetByte,
    oMonitorRegPutByte,
    oMonitorRegWriteStrobe,
    oResetsReg,
    iConfigRegIrqMask,
    iConfigRegSemEn,
    iMonitorRegByte,
    iTblAddReg,
    oConfigRegIrqMask,
    oConfigRegSemEn,
    oMonitorRegByte,
    oTblAddReg,
    s00_axi_awaddr,
    s00_axi_awprot,
    s00_axi_awvalid,
    s00_axi_awready,
    s00_axi_wdata,
    s00_axi_wstrb,
    s00_axi_wvalid,
    s00_axi_wready,
    s00_axi_bresp,
    s00_axi_bvalid,
    s00_axi_bready,
    s00_axi_araddr,
    s00_axi_arprot,
    s00_axi_arvalid,
    s00_axi_arready,
    s00_axi_rdata,
    s00_axi_rresp,
    s00_axi_rvalid,
    s00_axi_rready,
    s00_axi_aclk,
    s00_axi_aresetn);
  input [2:0]iMinVoterRegTmrStat;
  input [7:0]iDevInfoId;
  input [7:0]iDevInfoVersionMajor;
  input [7:0]iDevInfoVersionMinor;
  input iMinVoterRegCmpStat;
  input iStatusRegFifoCmdFull;
  input iStatusRegFifoStatFull;
  input iStatusRegMonEmpty;
  input [3:0]iStatusRegState;
  output oMinVoterRegClearStrobe;
  output oMonitorRegGetByte;
  output oMonitorRegPutByte;
  output oMonitorRegWriteStrobe;
  output [2:0]oResetsReg;
  input [2:0]iConfigRegIrqMask;
  input iConfigRegSemEn;
  input [7:0]iMonitorRegByte;
  input [31:0]iTblAddReg;
  output [2:0]oConfigRegIrqMask;
  output oConfigRegSemEn;
  output [7:0]oMonitorRegByte;
  output [31:0]oTblAddReg;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI AWADDR" *) (* x_interface_parameter = "XIL_INTERFACENAME S00_AXI, WIZ_DATA_WIDTH 32, WIZ_NUM_REG 8, SUPPORTS_NARROW_BURST 0, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 5, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.000, CLK_DOMAIN semicap_clk_100MHz, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input [4:0]s00_axi_awaddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI AWPROT" *) input [2:0]s00_axi_awprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI AWVALID" *) input s00_axi_awvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI AWREADY" *) output s00_axi_awready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI WDATA" *) input [31:0]s00_axi_wdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI WSTRB" *) input [3:0]s00_axi_wstrb;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI WVALID" *) input s00_axi_wvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI WREADY" *) output s00_axi_wready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI BRESP" *) output [1:0]s00_axi_bresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI BVALID" *) output s00_axi_bvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI BREADY" *) input s00_axi_bready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI ARADDR" *) input [4:0]s00_axi_araddr;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI ARPROT" *) input [2:0]s00_axi_arprot;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI ARVALID" *) input s00_axi_arvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI ARREADY" *) output s00_axi_arready;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI RDATA" *) output [31:0]s00_axi_rdata;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI RRESP" *) output [1:0]s00_axi_rresp;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI RVALID" *) output s00_axi_rvalid;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S00_AXI RREADY" *) input s00_axi_rready;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 S00_AXI_CLK CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME S00_AXI_CLK, ASSOCIATED_BUSIF S00_AXI, ASSOCIATED_RESET s00_axi_aresetn, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN semicap_clk_100MHz, INSERT_VIP 0" *) input s00_axi_aclk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 S00_AXI_RST RST" *) (* x_interface_parameter = "XIL_INTERFACENAME S00_AXI_RST, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input s00_axi_aresetn;

  wire \<const0> ;
  wire [2:0]iConfigRegIrqMask;
  wire iConfigRegSemEn;
  wire [7:0]iDevInfoId;
  wire [7:0]iDevInfoVersionMajor;
  wire [7:0]iDevInfoVersionMinor;
  wire iMinVoterRegCmpStat;
  wire [2:0]iMinVoterRegTmrStat;
  wire [7:0]iMonitorRegByte;
  wire iStatusRegFifoCmdFull;
  wire iStatusRegFifoStatFull;
  wire iStatusRegMonEmpty;
  wire [3:0]iStatusRegState;
  wire [31:0]iTblAddReg;
  wire [2:0]oConfigRegIrqMask;
  wire oConfigRegSemEn;
  wire oMinVoterRegClearStrobe;
  wire [7:0]oMonitorRegByte;
  wire oMonitorRegGetByte;
  wire oMonitorRegPutByte;
  wire oMonitorRegWriteStrobe;
  wire [2:0]oResetsReg;
  wire [31:0]oTblAddReg;
  wire s00_axi_aclk;
  wire [4:0]s00_axi_araddr;
  wire s00_axi_aresetn;
  wire s00_axi_arready;
  wire s00_axi_arvalid;
  wire [4:0]s00_axi_awaddr;
  wire s00_axi_awready;
  wire s00_axi_awvalid;
  wire s00_axi_bready;
  wire s00_axi_bvalid;
  wire [31:0]s00_axi_rdata;
  wire s00_axi_rready;
  wire s00_axi_rvalid;
  wire [31:0]s00_axi_wdata;
  wire s00_axi_wready;
  wire [3:0]s00_axi_wstrb;
  wire s00_axi_wvalid;

  assign s00_axi_bresp[1] = \<const0> ;
  assign s00_axi_bresp[0] = \<const0> ;
  assign s00_axi_rresp[1] = \<const0> ;
  assign s00_axi_rresp[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  semicap_semicap_axi_v1_0 U0
       (.S_AXI_ARREADY(s00_axi_arready),
        .S_AXI_AWREADY(s00_axi_awready),
        .S_AXI_WREADY(s00_axi_wready),
        .iConfigRegIrqMask(iConfigRegIrqMask),
        .iConfigRegSemEn(iConfigRegSemEn),
        .iDevInfoId(iDevInfoId),
        .iDevInfoVersionMajor(iDevInfoVersionMajor),
        .iDevInfoVersionMinor(iDevInfoVersionMinor),
        .iMinVoterRegCmpStat(iMinVoterRegCmpStat),
        .iMinVoterRegTmrStat(iMinVoterRegTmrStat),
        .iMonitorRegByte(iMonitorRegByte),
        .iStatusRegFifoCmdFull(iStatusRegFifoCmdFull),
        .iStatusRegFifoStatFull(iStatusRegFifoStatFull),
        .iStatusRegMonEmpty(iStatusRegMonEmpty),
        .iStatusRegState(iStatusRegState),
        .iTblAddReg(iTblAddReg),
        .oConfigRegIrqMask(oConfigRegIrqMask),
        .oConfigRegSemEn(oConfigRegSemEn),
        .oMinVoterRegClearStrobe(oMinVoterRegClearStrobe),
        .oMonitorRegByte(oMonitorRegByte),
        .oMonitorRegGetByte(oMonitorRegGetByte),
        .oMonitorRegPutByte(oMonitorRegPutByte),
        .oMonitorRegWriteStrobe(oMonitorRegWriteStrobe),
        .oResetsReg(oResetsReg),
        .oTblAddReg(oTblAddReg),
        .s00_axi_aclk(s00_axi_aclk),
        .s00_axi_araddr(s00_axi_araddr[4:2]),
        .s00_axi_aresetn(s00_axi_aresetn),
        .s00_axi_arvalid(s00_axi_arvalid),
        .s00_axi_awaddr(s00_axi_awaddr[4:2]),
        .s00_axi_awvalid(s00_axi_awvalid),
        .s00_axi_bready(s00_axi_bready),
        .s00_axi_bvalid(s00_axi_bvalid),
        .s00_axi_rdata(s00_axi_rdata),
        .s00_axi_rready(s00_axi_rready),
        .s00_axi_rvalid(s00_axi_rvalid),
        .s00_axi_wdata(s00_axi_wdata),
        .s00_axi_wstrb(s00_axi_wstrb),
        .s00_axi_wvalid(s00_axi_wvalid));
endmodule

(* CHECK_LICENSE_TYPE = "semicap_semicap_engine_0_0,semicap_engine,{}" *) (* ORIG_REF_NAME = "semicap_semicap_engine_0_0" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* ip_definition_source = "package_project" *) (* x_core_info = "semicap_engine,Vivado 2019.1.1" *) 
module semicap_semicap_semicap_engine_0_0
   (iClk,
    iConfigRegIrqMask,
    iConfigRegSemEn,
    iHwIcapIrq,
    iHwIcapRequest,
    iMinVoterRegClearStrobe,
    iMonitorRegByte,
    iMonitorRegGetByte,
    iMonitorRegPutByte,
    iMonitorRegWriteStrobe,
    iResetsReg,
    iRpMinVoter,
    iRst_n,
    iSemCapRequest,
    iSemCmdBusy,
    iSemMonRxRead,
    iSemMonTxData,
    iSemMonTxWrite,
    iSemStatusclassification,
    iSemStatuscorrection,
    iSemStatusdetectOnly,
    iSemStatusdiagnosticScan,
    iSemStatusessential,
    iSemStatusheartbeat,
    iSemStatusinitialization,
    iSemStatusinjection,
    iSemStatusobservation,
    iSemStatusuncorrectable,
    iTblAddReg,
    oConfigRegIrqMask,
    oConfigRegSemEn,
    oDevInfoId,
    oDevInfoVersionMajor,
    oDevInfoVersionMinor,
    oHwIcapEos,
    oHwIcapGrant,
    oHwIcapRelinquish,
    oIRq,
    oMinVoterRegCmpStat,
    oMinVoterRegTmrStat,
    oMonitorRegByte,
    oMuxSemSelect,
    oRpReset_n,
    oSemAuxErrorCrEs,
    oSemAuxErrorCrNe,
    oSemAuxErrorUc,
    oSemCapGrant,
    oSemCapRelinquish,
    oSemCmdCode,
    oSemCmdStrobe,
    oSemFetchTblAddr,
    oSemMonRxData,
    oSemMonRxEmpty,
    oSemMonTxFull,
    oStatusRegFifoCmdFull,
    oStatusRegFifoStatFull,
    oStatusRegMonEmpty,
    oStatusRegState,
    oTblAddReg);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 iClk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME iClk, ASSOCIATED_RESET iRst_n:oRpReset_n, PHASE 0.000, CLK_DOMAIN semicap_clk_axi, INSERT_VIP 0" *) input iClk;
  input [2:0]iConfigRegIrqMask;
  input iConfigRegSemEn;
  input iHwIcapIrq;
  input iHwIcapRequest;
  input iMinVoterRegClearStrobe;
  input [7:0]iMonitorRegByte;
  input iMonitorRegGetByte;
  input iMonitorRegPutByte;
  input iMonitorRegWriteStrobe;
  input [2:0]iResetsReg;
  input [3:0]iRpMinVoter;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 iRst_n RST" *) (* x_interface_parameter = "XIL_INTERFACENAME iRst_n, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input iRst_n;
  input iSemCapRequest;
  input iSemCmdBusy;
  input iSemMonRxRead;
  input [7:0]iSemMonTxData;
  input iSemMonTxWrite;
  input iSemStatusclassification;
  input iSemStatuscorrection;
  input iSemStatusdetectOnly;
  input iSemStatusdiagnosticScan;
  input iSemStatusessential;
  input iSemStatusheartbeat;
  input iSemStatusinitialization;
  input iSemStatusinjection;
  input iSemStatusobservation;
  input iSemStatusuncorrectable;
  input [31:0]iTblAddReg;
  output [2:0]oConfigRegIrqMask;
  output oConfigRegSemEn;
  output [7:0]oDevInfoId;
  output [7:0]oDevInfoVersionMajor;
  output [7:0]oDevInfoVersionMinor;
  output oHwIcapEos;
  output oHwIcapGrant;
  output oHwIcapRelinquish;
  (* x_interface_info = "xilinx.com:signal:interrupt:1.0 oIRq INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME oIRq, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output oIRq;
  output oMinVoterRegCmpStat;
  output [2:0]oMinVoterRegTmrStat;
  output [7:0]oMonitorRegByte;
  output oMuxSemSelect;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 oRpReset_n RST" *) (* x_interface_parameter = "XIL_INTERFACENAME oRpReset_n, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) output [2:0]oRpReset_n;
  output oSemAuxErrorCrEs;
  output oSemAuxErrorCrNe;
  output oSemAuxErrorUc;
  output oSemCapGrant;
  output oSemCapRelinquish;
  output [39:0]oSemCmdCode;
  output oSemCmdStrobe;
  output [31:0]oSemFetchTblAddr;
  output [7:0]oSemMonRxData;
  output oSemMonRxEmpty;
  output oSemMonTxFull;
  output oStatusRegFifoCmdFull;
  output oStatusRegFifoStatFull;
  output oStatusRegMonEmpty;
  output [3:0]oStatusRegState;
  output [31:0]oTblAddReg;

  wire \<const0> ;
  wire \<const1> ;
  wire iClk;
  wire [2:0]iConfigRegIrqMask;
  wire iConfigRegSemEn;
  wire iHwIcapIrq;
  wire iHwIcapRequest;
  wire iMinVoterRegClearStrobe;
  wire [7:0]iMonitorRegByte;
  wire iMonitorRegGetByte;
  wire iMonitorRegPutByte;
  wire iMonitorRegWriteStrobe;
  wire [2:0]iResetsReg;
  wire [3:0]iRpMinVoter;
  wire iRst_n;
  wire iSemCapRequest;
  wire iSemMonRxRead;
  wire [7:0]iSemMonTxData;
  wire iSemMonTxWrite;
  wire iSemStatusclassification;
  wire iSemStatuscorrection;
  wire iSemStatusdetectOnly;
  wire iSemStatusdiagnosticScan;
  wire iSemStatusessential;
  wire iSemStatusinitialization;
  wire iSemStatusinjection;
  wire iSemStatusobservation;
  wire iSemStatusuncorrectable;
  wire [31:0]iTblAddReg;
  wire oConfigRegSemEn;
  wire oHwIcapGrant;
  wire oHwIcapRelinquish;
  wire oIRq;
  wire oMinVoterRegCmpStat;
  wire [2:0]oMinVoterRegTmrStat;
  wire [7:0]oMonitorRegByte;
  wire oSemCapGrant;
  wire oSemCapRelinquish;
  wire [7:0]oSemMonRxData;
  wire oSemMonRxEmpty;
  wire oSemMonTxFull;
  wire oStatusRegFifoCmdFull;
  wire oStatusRegMonEmpty;
  wire [3:0]oStatusRegState;
  wire \oStatusRegState[0]_INST_0_i_1_n_0 ;
  wire \oStatusRegState[0]_INST_0_i_2_n_0 ;
  wire \oStatusRegState[1]_INST_0_i_1_n_0 ;
  wire \oStatusRegState[2]_INST_0_i_1_n_0 ;
  wire \oStatusRegState[3]_INST_0_i_1_n_0 ;

  assign oConfigRegIrqMask[2:0] = iConfigRegIrqMask;
  assign oDevInfoId[7] = \<const1> ;
  assign oDevInfoId[6] = \<const0> ;
  assign oDevInfoId[5] = \<const1> ;
  assign oDevInfoId[4] = \<const0> ;
  assign oDevInfoId[3] = \<const1> ;
  assign oDevInfoId[2] = \<const1> ;
  assign oDevInfoId[1] = \<const0> ;
  assign oDevInfoId[0] = \<const0> ;
  assign oDevInfoVersionMajor[7] = \<const0> ;
  assign oDevInfoVersionMajor[6] = \<const0> ;
  assign oDevInfoVersionMajor[5] = \<const0> ;
  assign oDevInfoVersionMajor[4] = \<const0> ;
  assign oDevInfoVersionMajor[3] = \<const0> ;
  assign oDevInfoVersionMajor[2] = \<const0> ;
  assign oDevInfoVersionMajor[1] = \<const0> ;
  assign oDevInfoVersionMajor[0] = \<const1> ;
  assign oDevInfoVersionMinor[7] = \<const0> ;
  assign oDevInfoVersionMinor[6] = \<const0> ;
  assign oDevInfoVersionMinor[5] = \<const0> ;
  assign oDevInfoVersionMinor[4] = \<const0> ;
  assign oDevInfoVersionMinor[3] = \<const0> ;
  assign oDevInfoVersionMinor[2] = \<const0> ;
  assign oDevInfoVersionMinor[1] = \<const1> ;
  assign oDevInfoVersionMinor[0] = \<const0> ;
  assign oHwIcapEos = \<const0> ;
  assign oMuxSemSelect = oSemCapGrant;
  assign oRpReset_n[2:0] = iResetsReg;
  assign oSemAuxErrorCrEs = \<const0> ;
  assign oSemAuxErrorCrNe = \<const0> ;
  assign oSemAuxErrorUc = \<const0> ;
  assign oSemCmdCode[39] = \<const0> ;
  assign oSemCmdCode[38] = \<const0> ;
  assign oSemCmdCode[37] = \<const0> ;
  assign oSemCmdCode[36] = \<const0> ;
  assign oSemCmdCode[35] = \<const0> ;
  assign oSemCmdCode[34] = \<const0> ;
  assign oSemCmdCode[33] = \<const0> ;
  assign oSemCmdCode[32] = \<const0> ;
  assign oSemCmdCode[31] = \<const0> ;
  assign oSemCmdCode[30] = \<const0> ;
  assign oSemCmdCode[29] = \<const0> ;
  assign oSemCmdCode[28] = \<const0> ;
  assign oSemCmdCode[27] = \<const0> ;
  assign oSemCmdCode[26] = \<const0> ;
  assign oSemCmdCode[25] = \<const0> ;
  assign oSemCmdCode[24] = \<const0> ;
  assign oSemCmdCode[23] = \<const0> ;
  assign oSemCmdCode[22] = \<const0> ;
  assign oSemCmdCode[21] = \<const0> ;
  assign oSemCmdCode[20] = \<const0> ;
  assign oSemCmdCode[19] = \<const0> ;
  assign oSemCmdCode[18] = \<const0> ;
  assign oSemCmdCode[17] = \<const0> ;
  assign oSemCmdCode[16] = \<const0> ;
  assign oSemCmdCode[15] = \<const0> ;
  assign oSemCmdCode[14] = \<const0> ;
  assign oSemCmdCode[13] = \<const0> ;
  assign oSemCmdCode[12] = \<const0> ;
  assign oSemCmdCode[11] = \<const0> ;
  assign oSemCmdCode[10] = \<const0> ;
  assign oSemCmdCode[9] = \<const0> ;
  assign oSemCmdCode[8] = \<const0> ;
  assign oSemCmdCode[7] = \<const0> ;
  assign oSemCmdCode[6] = \<const0> ;
  assign oSemCmdCode[5] = \<const0> ;
  assign oSemCmdCode[4] = \<const0> ;
  assign oSemCmdCode[3] = \<const0> ;
  assign oSemCmdCode[2] = \<const0> ;
  assign oSemCmdCode[1] = \<const0> ;
  assign oSemCmdCode[0] = \<const0> ;
  assign oSemCmdStrobe = \<const0> ;
  assign oSemFetchTblAddr[31:0] = iTblAddReg;
  assign oStatusRegFifoStatFull = oSemMonTxFull;
  assign oTblAddReg[31:0] = iTblAddReg;
  GND GND
       (.G(\<const0> ));
  semicap_semicap_engine U0
       (.Q({oMinVoterRegCmpStat,oMinVoterRegTmrStat}),
        .iClk(iClk),
        .iConfigRegIrqMask(iConfigRegIrqMask),
        .iConfigRegSemEn(iConfigRegSemEn),
        .iHwIcapIrq(iHwIcapIrq),
        .iHwIcapRequest(iHwIcapRequest),
        .iMinVoterRegClearStrobe(iMinVoterRegClearStrobe),
        .iMonitorRegByte(iMonitorRegByte),
        .iMonitorRegGetByte(iMonitorRegGetByte),
        .iMonitorRegPutByte(iMonitorRegPutByte),
        .iMonitorRegWriteStrobe(iMonitorRegWriteStrobe),
        .iRpMinVoter(iRpMinVoter),
        .iRst_n(iRst_n),
        .iSemCapRequest(iSemCapRequest),
        .iSemMonRxRead(iSemMonRxRead),
        .iSemMonTxData(iSemMonTxData),
        .iSemMonTxWrite(iSemMonTxWrite),
        .iSemStatusessential(iSemStatusessential),
        .iSemStatusuncorrectable(iSemStatusuncorrectable),
        .oConfigRegSemEn(oConfigRegSemEn),
        .oHwIcapGrant(oHwIcapGrant),
        .oHwIcapRelinquish(oHwIcapRelinquish),
        .oIRq(oIRq),
        .oMonitorRegByte(oMonitorRegByte),
        .oSemCapGrant(oSemCapGrant),
        .oSemCapRelinquish(oSemCapRelinquish),
        .oSemMonRxData(oSemMonRxData),
        .oSemMonRxEmpty(oSemMonRxEmpty),
        .oSemMonTxFull(oSemMonTxFull),
        .oStatusRegFifoCmdFull(oStatusRegFifoCmdFull),
        .oStatusRegMonEmpty(oStatusRegMonEmpty));
  VCC VCC
       (.P(\<const1> ));
  MUXF7 \oStatusRegState[0]_INST_0 
       (.I0(\oStatusRegState[0]_INST_0_i_1_n_0 ),
        .I1(\oStatusRegState[0]_INST_0_i_2_n_0 ),
        .O(oStatusRegState[0]),
        .S(iSemStatusinitialization));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFEEE)) 
    \oStatusRegState[0]_INST_0_i_1 
       (.I0(iSemStatusdetectOnly),
        .I1(iSemStatusclassification),
        .I2(iSemStatusinjection),
        .I3(iSemStatuscorrection),
        .I4(iSemStatusdiagnosticScan),
        .I5(iSemStatusobservation),
        .O(\oStatusRegState[0]_INST_0_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \oStatusRegState[0]_INST_0_i_2 
       (.I0(iSemStatusdiagnosticScan),
        .I1(iSemStatusdetectOnly),
        .I2(iSemStatuscorrection),
        .I3(iSemStatusclassification),
        .I4(iSemStatusinjection),
        .I5(iSemStatusobservation),
        .O(\oStatusRegState[0]_INST_0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFFEA)) 
    \oStatusRegState[1]_INST_0 
       (.I0(iSemStatusdiagnosticScan),
        .I1(iSemStatusdetectOnly),
        .I2(iSemStatusinjection),
        .I3(\oStatusRegState[1]_INST_0_i_1_n_0 ),
        .I4(iSemStatusobservation),
        .I5(iSemStatusinitialization),
        .O(oStatusRegState[1]));
  LUT2 #(
    .INIT(4'hE)) 
    \oStatusRegState[1]_INST_0_i_1 
       (.I0(iSemStatuscorrection),
        .I1(iSemStatusclassification),
        .O(\oStatusRegState[1]_INST_0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \oStatusRegState[2]_INST_0 
       (.I0(\oStatusRegState[2]_INST_0_i_1_n_0 ),
        .I1(iSemStatusinitialization),
        .O(oStatusRegState[2]));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEE8)) 
    \oStatusRegState[2]_INST_0_i_1 
       (.I0(iSemStatusobservation),
        .I1(iSemStatusdiagnosticScan),
        .I2(iSemStatusinjection),
        .I3(iSemStatusdetectOnly),
        .I4(iSemStatuscorrection),
        .I5(iSemStatusclassification),
        .O(\oStatusRegState[2]_INST_0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \oStatusRegState[3]_INST_0 
       (.I0(\oStatusRegState[3]_INST_0_i_1_n_0 ),
        .I1(iSemStatusinitialization),
        .O(oStatusRegState[3]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEEC)) 
    \oStatusRegState[3]_INST_0_i_1 
       (.I0(iSemStatusobservation),
        .I1(iSemStatusinjection),
        .I2(iSemStatusclassification),
        .I3(iSemStatuscorrection),
        .I4(iSemStatusdetectOnly),
        .I5(iSemStatusdiagnosticScan),
        .O(\oStatusRegState[3]_INST_0_i_1_n_0 ));
endmodule

(* CHECK_LICENSE_TYPE = "semicap_semicap_spihelper_0_0,sem_ultra_0_spi,{}" *) (* ORIG_REF_NAME = "semicap_semicap_spihelper_0_0" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* ip_definition_source = "package_project" *) (* x_core_info = "sem_ultra_0_spi,Vivado 2019.1.1" *) 
module semicap_semicap_semicap_spihelper_0_0
   (icap_clk,
    spi_c,
    spi_d,
    spi_s_n,
    spi_q,
    fetch_txdata,
    fetch_txwrite,
    fetch_txfull,
    fetch_rxdata,
    fetch_rxread,
    fetch_rxempty);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 icap_clk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME icap_clk, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN semicap_clk_axi, INSERT_VIP 0" *) input icap_clk;
  output spi_c;
  output spi_d;
  output spi_s_n;
  input spi_q;
  input [7:0]fetch_txdata;
  input fetch_txwrite;
  output fetch_txfull;
  output [7:0]fetch_rxdata;
  input fetch_rxread;
  output fetch_rxempty;

  wire [7:0]fetch_rxdata;
  wire fetch_rxempty;
  wire fetch_rxread;
  wire [7:0]fetch_txdata;
  wire fetch_txfull;
  wire fetch_txwrite;
  wire icap_clk;
  wire spi_c;
  wire spi_d;
  wire spi_q;
  wire spi_s_n;

  semicap_sem_ultra_0_spi inst
       (.fetch_rxdata(fetch_rxdata),
        .fetch_rxempty(fetch_rxempty),
        .fetch_rxread(fetch_rxread),
        .fetch_txdata(fetch_txdata),
        .fetch_txfull(fetch_txfull),
        .fetch_txwrite(fetch_txwrite),
        .icap_clk(icap_clk),
        .spi_c(spi_c),
        .spi_d(spi_d),
        .spi_q(spi_q),
        .spi_s_n(spi_s_n));
endmodule

(* ORIG_REF_NAME = "slave_attachment" *) 
module semicap_slave_attachment
   (\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] ,
    p_8_in,
    \GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10] ,
    \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] ,
    Bus_RNW_reg_reg,
    s_axi_rvalid_i_reg_0,
    s_axi_bvalid_i_reg_0,
    \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ,
    \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_1 ,
    \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ,
    IP2Bus_WrAck_reg,
    SR,
    irpt_rdack,
    intr2bus_rdack0,
    irpt_wrack,
    interrupt_wrce_strb,
    irpt_wrack_d1_reg,
    IP2Bus_RdAck0,
    IP2Bus_WrAck0,
    p_10_in,
    p_11_in,
    D,
    bus2ip_wrce,
    \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ,
    \AXI_HW_wdata[31] ,
    s_axi_rdata,
    bus2ip_reset,
    s_axi_aclk,
    s_axi_arvalid,
    ip2bus_wrack_i,
    ip2bus_rdack_i,
    s_axi_aresetn,
    s_axi_awvalid,
    s_axi_wvalid,
    ip2bus_rdack_i_reg,
    p_7_out,
    intr2bus_wrack,
    irpt_rdack_d1,
    irpt_wrack_d1,
    ipbus_ack_fifo,
    ipbus_ack,
    wr_en,
    busip_1,
    dout,
    \IP2Bus_Data_reg[20] ,
    scndry_vect_out,
    wr_data_count,
    rd_data_count,
    s_axi_bready,
    s_axi_rready,
    Q,
    scndry_out,
    \IP2Bus_Data_reg[30] ,
    \IP2Bus_Data_reg[29] ,
    s_axi_awaddr,
    s_axi_araddr,
    ipif_glbl_irpt_enable_reg,
    \ip2bus_data_i_reg[0] ,
    s_axi_wdata,
    \s_axi_rdata_i_reg[31]_0 );
  output \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] ;
  output p_8_in;
  output \GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10] ;
  output \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] ;
  output Bus_RNW_reg_reg;
  output s_axi_rvalid_i_reg_0;
  output s_axi_bvalid_i_reg_0;
  output \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ;
  output \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_1 ;
  output \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ;
  output IP2Bus_WrAck_reg;
  output [0:0]SR;
  output irpt_rdack;
  output intr2bus_rdack0;
  output irpt_wrack;
  output interrupt_wrce_strb;
  output irpt_wrack_d1_reg;
  output IP2Bus_RdAck0;
  output IP2Bus_WrAck0;
  output p_10_in;
  output p_11_in;
  output [31:0]D;
  output [2:0]bus2ip_wrce;
  output [0:0]\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ;
  output \AXI_HW_wdata[31] ;
  output [31:0]s_axi_rdata;
  input bus2ip_reset;
  input s_axi_aclk;
  input s_axi_arvalid;
  input ip2bus_wrack_i;
  input ip2bus_rdack_i;
  input s_axi_aresetn;
  input s_axi_awvalid;
  input s_axi_wvalid;
  input ip2bus_rdack_i_reg;
  input p_7_out;
  input intr2bus_wrack;
  input irpt_rdack_d1;
  input irpt_wrack_d1;
  input ipbus_ack_fifo;
  input ipbus_ack;
  input wr_en;
  input busip_1;
  input [31:0]dout;
  input [11:0]\IP2Bus_Data_reg[20] ;
  input [31:0]scndry_vect_out;
  input [10:0]wr_data_count;
  input [8:0]rd_data_count;
  input s_axi_bready;
  input s_axi_rready;
  input [4:0]Q;
  input scndry_out;
  input \IP2Bus_Data_reg[30] ;
  input \IP2Bus_Data_reg[29] ;
  input [6:0]s_axi_awaddr;
  input [6:0]s_axi_araddr;
  input ipif_glbl_irpt_enable_reg;
  input [0:0]\ip2bus_data_i_reg[0] ;
  input [0:0]s_axi_wdata;
  input [31:0]\s_axi_rdata_i_reg[31]_0 ;

  wire \AXI_HW_wdata[31] ;
  wire Bus_RNW_reg_reg;
  wire [31:0]D;
  wire \FSM_onehot_state[0]_i_1_n_0 ;
  wire \FSM_onehot_state[1]_i_1_n_0 ;
  wire \FSM_onehot_state[2]_i_1_n_0 ;
  wire \FSM_onehot_state[2]_i_2_n_0 ;
  wire \FSM_onehot_state[3]_i_1_n_0 ;
  wire \FSM_onehot_state[3]_i_2_n_0 ;
  wire \FSM_onehot_state_reg_n_0_[0] ;
  wire \FSM_onehot_state_reg_n_0_[3] ;
  wire \GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10] ;
  wire \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] ;
  wire \GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ;
  wire \GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] ;
  wire [0:0]\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ;
  wire [4:0]\INCLUDE_DPHASE_TIMER.dpto_cnt_reg ;
  wire \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ;
  wire \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_1 ;
  wire [11:0]\IP2Bus_Data_reg[20] ;
  wire \IP2Bus_Data_reg[29] ;
  wire \IP2Bus_Data_reg[30] ;
  wire IP2Bus_RdAck0;
  wire IP2Bus_WrAck0;
  wire IP2Bus_WrAck_reg;
  wire [4:0]Q;
  wire [0:0]SR;
  wire [0:6]bus2ip_addr;
  wire \bus2ip_addr_i[2]_i_1_n_0 ;
  wire \bus2ip_addr_i[3]_i_1_n_0 ;
  wire \bus2ip_addr_i[4]_i_1_n_0 ;
  wire \bus2ip_addr_i[5]_i_1_n_0 ;
  wire \bus2ip_addr_i[6]_i_1_n_0 ;
  wire \bus2ip_addr_i[7]_i_1_n_0 ;
  wire \bus2ip_addr_i[8]_i_1_n_0 ;
  wire bus2ip_reset;
  wire bus2ip_rnw_i;
  wire [2:0]bus2ip_wrce;
  wire busip_1;
  wire clear;
  wire [31:0]dout;
  wire interrupt_wrce_strb;
  wire intr2bus_rdack0;
  wire intr2bus_wrack;
  wire [0:0]\ip2bus_data_i_reg[0] ;
  wire ip2bus_rdack_i;
  wire ip2bus_rdack_i_reg;
  wire ip2bus_wrack_i;
  wire ipbus_ack;
  wire ipbus_ack_fifo;
  wire ipif_glbl_irpt_enable_reg;
  wire irpt_rdack;
  wire irpt_rdack_d1;
  wire irpt_wrack;
  wire irpt_wrack_d1;
  wire irpt_wrack_d1_reg;
  wire is_read;
  wire is_read_i_1_n_0;
  wire is_read_reg_n_0;
  wire is_write;
  wire is_write_reg_n_0;
  wire [1:0]p_0_out;
  wire p_10_in;
  wire p_11_in;
  wire p_7_out;
  wire p_8_in;
  wire [4:0]plusOp;
  wire [8:0]rd_data_count;
  wire rst;
  wire s_axi_aclk;
  wire [6:0]s_axi_araddr;
  wire s_axi_aresetn;
  wire s_axi_arvalid;
  wire [6:0]s_axi_awaddr;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_bresp_i;
  wire s_axi_bvalid_i_i_1_n_0;
  wire s_axi_bvalid_i_reg_0;
  wire [31:0]s_axi_rdata;
  wire [31:0]\s_axi_rdata_i_reg[31]_0 ;
  wire s_axi_rready;
  wire s_axi_rresp_i;
  wire s_axi_rvalid_i_i_1_n_0;
  wire s_axi_rvalid_i_reg_0;
  wire [0:0]s_axi_wdata;
  wire s_axi_wvalid;
  wire scndry_out;
  wire [31:0]scndry_vect_out;
  wire start2;
  wire start2_i_1_n_0;
  wire [1:0]state;
  wire \state[1]_i_2_n_0 ;
  wire [10:0]wr_data_count;
  wire wr_en;

  LUT6 #(
    .INIT(64'h888888888FFF8888)) 
    \FSM_onehot_state[0]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[3] ),
        .I1(\FSM_onehot_state[3]_i_2_n_0 ),
        .I2(s_axi_awvalid),
        .I3(s_axi_wvalid),
        .I4(\FSM_onehot_state_reg_n_0_[0] ),
        .I5(s_axi_arvalid),
        .O(\FSM_onehot_state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF00B000B000B0)) 
    \FSM_onehot_state[1]_i_1 
       (.I0(\FSM_onehot_state[2]_i_2_n_0 ),
        .I1(is_read_reg_n_0),
        .I2(s_axi_rresp_i),
        .I3(ip2bus_rdack_i),
        .I4(s_axi_arvalid),
        .I5(\FSM_onehot_state_reg_n_0_[0] ),
        .O(\FSM_onehot_state[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF00B0)) 
    \FSM_onehot_state[2]_i_1 
       (.I0(\FSM_onehot_state[2]_i_2_n_0 ),
        .I1(is_write_reg_n_0),
        .I2(s_axi_bresp_i),
        .I3(ip2bus_wrack_i),
        .I4(is_write),
        .O(\FSM_onehot_state[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \FSM_onehot_state[2]_i_2 
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [4]),
        .I1(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [3]),
        .I2(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [0]),
        .I3(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [2]),
        .I4(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [1]),
        .O(\FSM_onehot_state[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \FSM_onehot_state[3]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[3] ),
        .I1(\FSM_onehot_state[3]_i_2_n_0 ),
        .I2(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_1 ),
        .I3(s_axi_bresp_i),
        .I4(s_axi_rresp_i),
        .I5(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ),
        .O(\FSM_onehot_state[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \FSM_onehot_state[3]_i_2 
       (.I0(s_axi_bready),
        .I1(s_axi_bvalid_i_reg_0),
        .I2(s_axi_rready),
        .I3(s_axi_rvalid_i_reg_0),
        .O(\FSM_onehot_state[3]_i_2_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:0010,iSTATE0:0100,iSTATE1:1000,iSTATE2:0001" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\FSM_onehot_state[0]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[0] ),
        .S(rst));
  (* FSM_ENCODED_STATES = "iSTATE:0010,iSTATE0:0100,iSTATE1:1000,iSTATE2:0001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\FSM_onehot_state[1]_i_1_n_0 ),
        .Q(s_axi_rresp_i),
        .R(rst));
  (* FSM_ENCODED_STATES = "iSTATE:0010,iSTATE0:0100,iSTATE1:1000,iSTATE2:0001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\FSM_onehot_state[2]_i_1_n_0 ),
        .Q(s_axi_bresp_i),
        .R(rst));
  (* FSM_ENCODED_STATES = "iSTATE:0010,iSTATE0:0100,iSTATE1:1000,iSTATE2:0001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\FSM_onehot_state[3]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[3] ),
        .R(rst));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \INCLUDE_DPHASE_TIMER.dpto_cnt[0]_i_1 
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \INCLUDE_DPHASE_TIMER.dpto_cnt[1]_i_1 
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [0]),
        .I1(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \INCLUDE_DPHASE_TIMER.dpto_cnt[2]_i_1 
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [1]),
        .I1(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [0]),
        .I2(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \INCLUDE_DPHASE_TIMER.dpto_cnt[3]_i_1 
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [2]),
        .I1(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [0]),
        .I2(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [1]),
        .I3(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [3]),
        .O(plusOp[3]));
  LUT2 #(
    .INIT(4'h9)) 
    \INCLUDE_DPHASE_TIMER.dpto_cnt[4]_i_1 
       (.I0(state[1]),
        .I1(state[0]),
        .O(clear));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'h6CCCCCCC)) 
    \INCLUDE_DPHASE_TIMER.dpto_cnt[4]_i_2 
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [3]),
        .I1(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [4]),
        .I2(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [1]),
        .I3(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [0]),
        .I4(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [2]),
        .O(plusOp[4]));
  FDRE \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(plusOp[0]),
        .Q(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [0]),
        .R(clear));
  FDRE \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [1]),
        .R(clear));
  FDRE \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(plusOp[2]),
        .Q(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [2]),
        .R(clear));
  FDRE \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(plusOp[3]),
        .Q(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [3]),
        .R(clear));
  FDRE \INCLUDE_DPHASE_TIMER.dpto_cnt_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(plusOp[4]),
        .Q(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg [4]),
        .R(clear));
  semicap_address_decoder I_DECODER
       (.AXI_HW_arready(is_read_reg_n_0),
        .\AXI_HW_wdata[31] (\AXI_HW_wdata[31] ),
        .AXI_HW_wready(is_write_reg_n_0),
        .Bus_RNW_reg_reg_0(Bus_RNW_reg_reg),
        .D(D),
        .\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10]_0 (\GEN_BKEND_CE_REGISTERS[10].ce_out_i_reg[10] ),
        .\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 (\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17] ),
        .\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_1 (\GEN_BKEND_CE_REGISTERS[17].ce_out_i_reg[17]_0 ),
        .\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 (\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8] ),
        .\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_1 (\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_0 ),
        .\GEN_BKEND_CE_REGISTERS[8].ce_out_i_reg[8]_2 ({bus2ip_addr[0],bus2ip_addr[1],bus2ip_addr[2],bus2ip_addr[3],bus2ip_addr[4],bus2ip_addr[5],bus2ip_addr[6]}),
        .\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0] (\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ),
        .\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 (\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_1 ),
        .\IP2Bus_Data_reg[20] (\IP2Bus_Data_reg[20] ),
        .\IP2Bus_Data_reg[27] (Q),
        .\IP2Bus_Data_reg[29] (\IP2Bus_Data_reg[29] ),
        .\IP2Bus_Data_reg[30] (\IP2Bus_Data_reg[30] ),
        .IP2Bus_RdAck0(IP2Bus_RdAck0),
        .IP2Bus_WrAck0(IP2Bus_WrAck0),
        .IP2Bus_WrAck_reg(IP2Bus_WrAck_reg),
        .Q(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg ),
        .SR(SR),
        .bus2ip_rnw_i(bus2ip_rnw_i),
        .bus2ip_wrce(bus2ip_wrce),
        .busip_1(busip_1),
        .dout(dout),
        .interrupt_wrce_strb(interrupt_wrce_strb),
        .intr2bus_rdack0(intr2bus_rdack0),
        .intr2bus_wrack(intr2bus_wrack),
        .\ip2bus_data_i_reg[0] (\ip2bus_data_i_reg[0] ),
        .ip2bus_rdack_i(ip2bus_rdack_i),
        .ip2bus_rdack_i_reg(ip2bus_rdack_i_reg),
        .ip2bus_wrack_i(ip2bus_wrack_i),
        .ipbus_ack(ipbus_ack),
        .ipbus_ack_fifo(ipbus_ack_fifo),
        .ipif_glbl_irpt_enable_reg(ipif_glbl_irpt_enable_reg),
        .irpt_rdack(irpt_rdack),
        .irpt_rdack_d1(irpt_rdack_d1),
        .irpt_wrack(irpt_wrack),
        .irpt_wrack_d1(irpt_wrack_d1),
        .irpt_wrack_d1_reg(irpt_wrack_d1_reg),
        .p_10_in(p_10_in),
        .p_11_in(p_11_in),
        .p_7_out(p_7_out),
        .p_8_in(p_8_in),
        .rd_data_count(rd_data_count),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_wdata(s_axi_wdata),
        .scndry_out(scndry_out),
        .scndry_vect_out(scndry_vect_out),
        .start2(start2),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \bus2ip_addr_i[2]_i_1 
       (.I0(s_axi_awaddr[0]),
        .I1(s_axi_arvalid),
        .I2(s_axi_araddr[0]),
        .O(\bus2ip_addr_i[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hE2)) 
    \bus2ip_addr_i[3]_i_1 
       (.I0(s_axi_awaddr[1]),
        .I1(s_axi_arvalid),
        .I2(s_axi_araddr[1]),
        .O(\bus2ip_addr_i[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \bus2ip_addr_i[4]_i_1 
       (.I0(s_axi_awaddr[2]),
        .I1(s_axi_arvalid),
        .I2(s_axi_araddr[2]),
        .O(\bus2ip_addr_i[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \bus2ip_addr_i[5]_i_1 
       (.I0(s_axi_awaddr[3]),
        .I1(s_axi_arvalid),
        .I2(s_axi_araddr[3]),
        .O(\bus2ip_addr_i[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \bus2ip_addr_i[6]_i_1 
       (.I0(s_axi_awaddr[4]),
        .I1(s_axi_arvalid),
        .I2(s_axi_araddr[4]),
        .O(\bus2ip_addr_i[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \bus2ip_addr_i[7]_i_1 
       (.I0(s_axi_awaddr[5]),
        .I1(s_axi_arvalid),
        .I2(s_axi_araddr[5]),
        .O(\bus2ip_addr_i[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \bus2ip_addr_i[8]_i_1 
       (.I0(s_axi_awaddr[6]),
        .I1(s_axi_arvalid),
        .I2(s_axi_araddr[6]),
        .O(\bus2ip_addr_i[8]_i_1_n_0 ));
  FDRE \bus2ip_addr_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(start2_i_1_n_0),
        .D(\bus2ip_addr_i[2]_i_1_n_0 ),
        .Q(bus2ip_addr[6]),
        .R(rst));
  FDRE \bus2ip_addr_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(start2_i_1_n_0),
        .D(\bus2ip_addr_i[3]_i_1_n_0 ),
        .Q(bus2ip_addr[5]),
        .R(rst));
  FDRE \bus2ip_addr_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(start2_i_1_n_0),
        .D(\bus2ip_addr_i[4]_i_1_n_0 ),
        .Q(bus2ip_addr[4]),
        .R(rst));
  FDRE \bus2ip_addr_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(start2_i_1_n_0),
        .D(\bus2ip_addr_i[5]_i_1_n_0 ),
        .Q(bus2ip_addr[3]),
        .R(rst));
  FDRE \bus2ip_addr_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(start2_i_1_n_0),
        .D(\bus2ip_addr_i[6]_i_1_n_0 ),
        .Q(bus2ip_addr[2]),
        .R(rst));
  FDRE \bus2ip_addr_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(start2_i_1_n_0),
        .D(\bus2ip_addr_i[7]_i_1_n_0 ),
        .Q(bus2ip_addr[1]),
        .R(rst));
  FDRE \bus2ip_addr_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(start2_i_1_n_0),
        .D(\bus2ip_addr_i[8]_i_1_n_0 ),
        .Q(bus2ip_addr[0]),
        .R(rst));
  FDRE bus2ip_rnw_i_reg
       (.C(s_axi_aclk),
        .CE(start2_i_1_n_0),
        .D(s_axi_arvalid),
        .Q(bus2ip_rnw_i),
        .R(rst));
  LUT6 #(
    .INIT(64'hFFFFFFFFAA808080)) 
    is_read_i_1
       (.I0(\FSM_onehot_state_reg_n_0_[3] ),
        .I1(s_axi_bready),
        .I2(s_axi_bvalid_i_reg_0),
        .I3(s_axi_rready),
        .I4(s_axi_rvalid_i_reg_0),
        .I5(\FSM_onehot_state_reg_n_0_[0] ),
        .O(is_read_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT2 #(
    .INIT(4'h8)) 
    is_read_i_2
       (.I0(\FSM_onehot_state_reg_n_0_[0] ),
        .I1(s_axi_arvalid),
        .O(is_read));
  FDRE is_read_reg
       (.C(s_axi_aclk),
        .CE(is_read_i_1_n_0),
        .D(is_read),
        .Q(is_read_reg_n_0),
        .R(rst));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    is_write_i_1
       (.I0(s_axi_arvalid),
        .I1(\FSM_onehot_state_reg_n_0_[0] ),
        .I2(s_axi_wvalid),
        .I3(s_axi_awvalid),
        .O(is_write));
  FDRE is_write_reg
       (.C(s_axi_aclk),
        .CE(is_read_i_1_n_0),
        .D(is_write),
        .Q(is_write_reg_n_0),
        .R(rst));
  FDRE rst_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(bus2ip_reset),
        .Q(rst),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h08FF0808)) 
    s_axi_bvalid_i_i_1
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_1 ),
        .I1(state[1]),
        .I2(state[0]),
        .I3(s_axi_bready),
        .I4(s_axi_bvalid_i_reg_0),
        .O(s_axi_bvalid_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_axi_bvalid_i_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_axi_bvalid_i_i_1_n_0),
        .Q(s_axi_bvalid_i_reg_0),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [0]),
        .Q(s_axi_rdata[0]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[10] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [10]),
        .Q(s_axi_rdata[10]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[11] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [11]),
        .Q(s_axi_rdata[11]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[12] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [12]),
        .Q(s_axi_rdata[12]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[13] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [13]),
        .Q(s_axi_rdata[13]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[14] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [14]),
        .Q(s_axi_rdata[14]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[15] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [15]),
        .Q(s_axi_rdata[15]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[16] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [16]),
        .Q(s_axi_rdata[16]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[17] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [17]),
        .Q(s_axi_rdata[17]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[18] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [18]),
        .Q(s_axi_rdata[18]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[19] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [19]),
        .Q(s_axi_rdata[19]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [1]),
        .Q(s_axi_rdata[1]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[20] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [20]),
        .Q(s_axi_rdata[20]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[21] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [21]),
        .Q(s_axi_rdata[21]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[22] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [22]),
        .Q(s_axi_rdata[22]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[23] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [23]),
        .Q(s_axi_rdata[23]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[24] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [24]),
        .Q(s_axi_rdata[24]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[25] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [25]),
        .Q(s_axi_rdata[25]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[26] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [26]),
        .Q(s_axi_rdata[26]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[27] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [27]),
        .Q(s_axi_rdata[27]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[28] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [28]),
        .Q(s_axi_rdata[28]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[29] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [29]),
        .Q(s_axi_rdata[29]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [2]),
        .Q(s_axi_rdata[2]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[30] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [30]),
        .Q(s_axi_rdata[30]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[31] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [31]),
        .Q(s_axi_rdata[31]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [3]),
        .Q(s_axi_rdata[3]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [4]),
        .Q(s_axi_rdata[4]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [5]),
        .Q(s_axi_rdata[5]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [6]),
        .Q(s_axi_rdata[6]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [7]),
        .Q(s_axi_rdata[7]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [8]),
        .Q(s_axi_rdata[8]),
        .R(rst));
  FDRE #(
    .INIT(1'b0)) 
    \s_axi_rdata_i_reg[9] 
       (.C(s_axi_aclk),
        .CE(s_axi_rresp_i),
        .D(\s_axi_rdata_i_reg[31]_0 [9]),
        .Q(s_axi_rdata[9]),
        .R(rst));
  LUT5 #(
    .INIT(32'h08FF0808)) 
    s_axi_rvalid_i_i_1
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ),
        .I1(state[0]),
        .I2(state[1]),
        .I3(s_axi_rready),
        .I4(s_axi_rvalid_i_reg_0),
        .O(s_axi_rvalid_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    s_axi_rvalid_i_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_axi_rvalid_i_i_1_n_0),
        .Q(s_axi_rvalid_i_reg_0),
        .R(rst));
  LUT5 #(
    .INIT(32'h000000F8)) 
    start2_i_1
       (.I0(s_axi_awvalid),
        .I1(s_axi_wvalid),
        .I2(s_axi_arvalid),
        .I3(state[0]),
        .I4(state[1]),
        .O(start2_i_1_n_0));
  FDRE start2_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(start2_i_1_n_0),
        .Q(start2),
        .R(rst));
  LUT5 #(
    .INIT(32'h0FFFAACC)) 
    \state[0]_i_1 
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_1 ),
        .I1(s_axi_arvalid),
        .I2(\FSM_onehot_state[3]_i_2_n_0 ),
        .I3(state[1]),
        .I4(state[0]),
        .O(p_0_out[0]));
  LUT6 #(
    .INIT(64'h2E2E2E2ECCCCCCFF)) 
    \state[1]_i_1 
       (.I0(\INCLUDE_DPHASE_TIMER.dpto_cnt_reg[0]_0 ),
        .I1(state[1]),
        .I2(\FSM_onehot_state[3]_i_2_n_0 ),
        .I3(\state[1]_i_2_n_0 ),
        .I4(s_axi_arvalid),
        .I5(state[0]),
        .O(p_0_out[1]));
  LUT2 #(
    .INIT(4'h7)) 
    \state[1]_i_2 
       (.I0(s_axi_awvalid),
        .I1(s_axi_wvalid),
        .O(\state[1]_i_2_n_0 ));
  FDRE \state_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_0_out[0]),
        .Q(state[0]),
        .R(rst));
  FDRE \state_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_0_out[1]),
        .Q(state[1]),
        .R(rst));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "0" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "10" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module semicap_xpm_cdc_gray
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [9:0]src_in_bin;
  input dest_clk;
  output [9:0]dest_out_bin;

  wire [9:0]async_path;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [9:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [9:0]\dest_graysync_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [9:0]\dest_graysync_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [9:0]\dest_graysync_ff[3] ;
  wire [8:0]\^dest_out_bin ;
  wire [8:0]gray_enc;
  wire src_clk;
  wire [9:0]src_in_bin;

  assign dest_out_bin[9] = \dest_graysync_ff[3] [9];
  assign dest_out_bin[8:0] = \^dest_out_bin [8:0];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[9]),
        .Q(\dest_graysync_ff[0] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [9]),
        .Q(\dest_graysync_ff[1] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [0]),
        .Q(\dest_graysync_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [1]),
        .Q(\dest_graysync_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [2]),
        .Q(\dest_graysync_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(\dest_graysync_ff[2] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(\dest_graysync_ff[2] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(\dest_graysync_ff[2] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [6]),
        .Q(\dest_graysync_ff[2] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(\dest_graysync_ff[2] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(\dest_graysync_ff[2] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [9]),
        .Q(\dest_graysync_ff[2] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [0]),
        .Q(\dest_graysync_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [1]),
        .Q(\dest_graysync_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [2]),
        .Q(\dest_graysync_ff[3] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [3]),
        .Q(\dest_graysync_ff[3] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [4]),
        .Q(\dest_graysync_ff[3] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [5]),
        .Q(\dest_graysync_ff[3] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [6]),
        .Q(\dest_graysync_ff[3] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [7]),
        .Q(\dest_graysync_ff[3] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [8]),
        .Q(\dest_graysync_ff[3] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [9]),
        .Q(\dest_graysync_ff[3] [9]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[0]_INST_0 
       (.I0(\dest_graysync_ff[3] [0]),
        .I1(\dest_graysync_ff[3] [2]),
        .I2(\^dest_out_bin [4]),
        .I3(\dest_graysync_ff[3] [3]),
        .I4(\dest_graysync_ff[3] [1]),
        .O(\^dest_out_bin [0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[1]_INST_0 
       (.I0(\dest_graysync_ff[3] [1]),
        .I1(\dest_graysync_ff[3] [3]),
        .I2(\^dest_out_bin [4]),
        .I3(\dest_graysync_ff[3] [2]),
        .O(\^dest_out_bin [1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[2]_INST_0 
       (.I0(\dest_graysync_ff[3] [2]),
        .I1(\^dest_out_bin [4]),
        .I2(\dest_graysync_ff[3] [3]),
        .O(\^dest_out_bin [2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[3]_INST_0 
       (.I0(\dest_graysync_ff[3] [3]),
        .I1(\^dest_out_bin [4]),
        .O(\^dest_out_bin [3]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[4]_INST_0 
       (.I0(\dest_graysync_ff[3] [4]),
        .I1(\dest_graysync_ff[3] [6]),
        .I2(\dest_graysync_ff[3] [8]),
        .I3(\dest_graysync_ff[3] [9]),
        .I4(\dest_graysync_ff[3] [7]),
        .I5(\dest_graysync_ff[3] [5]),
        .O(\^dest_out_bin [4]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[5]_INST_0 
       (.I0(\dest_graysync_ff[3] [5]),
        .I1(\dest_graysync_ff[3] [7]),
        .I2(\dest_graysync_ff[3] [9]),
        .I3(\dest_graysync_ff[3] [8]),
        .I4(\dest_graysync_ff[3] [6]),
        .O(\^dest_out_bin [5]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[6]_INST_0 
       (.I0(\dest_graysync_ff[3] [6]),
        .I1(\dest_graysync_ff[3] [8]),
        .I2(\dest_graysync_ff[3] [9]),
        .I3(\dest_graysync_ff[3] [7]),
        .O(\^dest_out_bin [6]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[7]_INST_0 
       (.I0(\dest_graysync_ff[3] [7]),
        .I1(\dest_graysync_ff[3] [9]),
        .I2(\dest_graysync_ff[3] [8]),
        .O(\^dest_out_bin [7]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[8]_INST_0 
       (.I0(\dest_graysync_ff[3] [8]),
        .I1(\dest_graysync_ff[3] [9]),
        .O(\^dest_out_bin [8]));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[8]),
        .I1(src_in_bin[7]),
        .O(gray_enc[7]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[8]_i_1 
       (.I0(src_in_bin[9]),
        .I1(src_in_bin[8]),
        .O(gray_enc[8]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[8]),
        .Q(async_path[8]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[9] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[9]),
        .Q(async_path[9]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "0" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "10" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module semicap_xpm_cdc_gray__1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [9:0]src_in_bin;
  input dest_clk;
  output [9:0]dest_out_bin;

  wire [9:0]async_path;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [9:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [9:0]\dest_graysync_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [9:0]\dest_graysync_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [9:0]\dest_graysync_ff[3] ;
  wire [8:0]\^dest_out_bin ;
  wire [8:0]gray_enc;
  wire src_clk;
  wire [9:0]src_in_bin;

  assign dest_out_bin[9] = \dest_graysync_ff[3] [9];
  assign dest_out_bin[8:0] = \^dest_out_bin [8:0];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[9]),
        .Q(\dest_graysync_ff[0] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [9]),
        .Q(\dest_graysync_ff[1] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [0]),
        .Q(\dest_graysync_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [1]),
        .Q(\dest_graysync_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [2]),
        .Q(\dest_graysync_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(\dest_graysync_ff[2] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(\dest_graysync_ff[2] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(\dest_graysync_ff[2] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [6]),
        .Q(\dest_graysync_ff[2] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(\dest_graysync_ff[2] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(\dest_graysync_ff[2] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [9]),
        .Q(\dest_graysync_ff[2] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [0]),
        .Q(\dest_graysync_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [1]),
        .Q(\dest_graysync_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [2]),
        .Q(\dest_graysync_ff[3] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [3]),
        .Q(\dest_graysync_ff[3] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [4]),
        .Q(\dest_graysync_ff[3] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [5]),
        .Q(\dest_graysync_ff[3] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [6]),
        .Q(\dest_graysync_ff[3] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [7]),
        .Q(\dest_graysync_ff[3] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [8]),
        .Q(\dest_graysync_ff[3] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [9]),
        .Q(\dest_graysync_ff[3] [9]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[0]_INST_0 
       (.I0(\dest_graysync_ff[3] [0]),
        .I1(\dest_graysync_ff[3] [2]),
        .I2(\^dest_out_bin [4]),
        .I3(\dest_graysync_ff[3] [3]),
        .I4(\dest_graysync_ff[3] [1]),
        .O(\^dest_out_bin [0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[1]_INST_0 
       (.I0(\dest_graysync_ff[3] [1]),
        .I1(\dest_graysync_ff[3] [3]),
        .I2(\^dest_out_bin [4]),
        .I3(\dest_graysync_ff[3] [2]),
        .O(\^dest_out_bin [1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[2]_INST_0 
       (.I0(\dest_graysync_ff[3] [2]),
        .I1(\^dest_out_bin [4]),
        .I2(\dest_graysync_ff[3] [3]),
        .O(\^dest_out_bin [2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[3]_INST_0 
       (.I0(\dest_graysync_ff[3] [3]),
        .I1(\^dest_out_bin [4]),
        .O(\^dest_out_bin [3]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[4]_INST_0 
       (.I0(\dest_graysync_ff[3] [4]),
        .I1(\dest_graysync_ff[3] [6]),
        .I2(\dest_graysync_ff[3] [8]),
        .I3(\dest_graysync_ff[3] [9]),
        .I4(\dest_graysync_ff[3] [7]),
        .I5(\dest_graysync_ff[3] [5]),
        .O(\^dest_out_bin [4]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[5]_INST_0 
       (.I0(\dest_graysync_ff[3] [5]),
        .I1(\dest_graysync_ff[3] [7]),
        .I2(\dest_graysync_ff[3] [9]),
        .I3(\dest_graysync_ff[3] [8]),
        .I4(\dest_graysync_ff[3] [6]),
        .O(\^dest_out_bin [5]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[6]_INST_0 
       (.I0(\dest_graysync_ff[3] [6]),
        .I1(\dest_graysync_ff[3] [8]),
        .I2(\dest_graysync_ff[3] [9]),
        .I3(\dest_graysync_ff[3] [7]),
        .O(\^dest_out_bin [6]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[7]_INST_0 
       (.I0(\dest_graysync_ff[3] [7]),
        .I1(\dest_graysync_ff[3] [9]),
        .I2(\dest_graysync_ff[3] [8]),
        .O(\^dest_out_bin [7]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[8]_INST_0 
       (.I0(\dest_graysync_ff[3] [8]),
        .I1(\dest_graysync_ff[3] [9]),
        .O(\^dest_out_bin [8]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[8]),
        .I1(src_in_bin[7]),
        .O(gray_enc[7]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[8]_i_1 
       (.I0(src_in_bin[9]),
        .I1(src_in_bin[8]),
        .O(gray_enc[8]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[8]),
        .Q(async_path[8]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[9] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[9]),
        .Q(async_path[9]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "0" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "11" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module semicap_xpm_cdc_gray__parameterized0
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [10:0]src_in_bin;
  input dest_clk;
  output [10:0]dest_out_bin;

  wire [10:0]async_path;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [10:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [10:0]\dest_graysync_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [10:0]\dest_graysync_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [10:0]\dest_graysync_ff[3] ;
  wire [9:0]\^dest_out_bin ;
  wire [9:0]gray_enc;
  wire src_clk;
  wire [10:0]src_in_bin;

  assign dest_out_bin[10] = \dest_graysync_ff[3] [10];
  assign dest_out_bin[9:0] = \^dest_out_bin [9:0];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[10]),
        .Q(\dest_graysync_ff[0] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[9]),
        .Q(\dest_graysync_ff[0] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [10]),
        .Q(\dest_graysync_ff[1] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [9]),
        .Q(\dest_graysync_ff[1] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [0]),
        .Q(\dest_graysync_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [10]),
        .Q(\dest_graysync_ff[2] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [1]),
        .Q(\dest_graysync_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [2]),
        .Q(\dest_graysync_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(\dest_graysync_ff[2] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(\dest_graysync_ff[2] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(\dest_graysync_ff[2] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [6]),
        .Q(\dest_graysync_ff[2] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(\dest_graysync_ff[2] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(\dest_graysync_ff[2] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [9]),
        .Q(\dest_graysync_ff[2] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [0]),
        .Q(\dest_graysync_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [10]),
        .Q(\dest_graysync_ff[3] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [1]),
        .Q(\dest_graysync_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [2]),
        .Q(\dest_graysync_ff[3] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [3]),
        .Q(\dest_graysync_ff[3] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [4]),
        .Q(\dest_graysync_ff[3] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [5]),
        .Q(\dest_graysync_ff[3] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [6]),
        .Q(\dest_graysync_ff[3] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [7]),
        .Q(\dest_graysync_ff[3] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [8]),
        .Q(\dest_graysync_ff[3] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [9]),
        .Q(\dest_graysync_ff[3] [9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[0]_INST_0 
       (.I0(\dest_graysync_ff[3] [0]),
        .I1(\dest_graysync_ff[3] [2]),
        .I2(\dest_graysync_ff[3] [4]),
        .I3(\^dest_out_bin [5]),
        .I4(\dest_graysync_ff[3] [3]),
        .I5(\dest_graysync_ff[3] [1]),
        .O(\^dest_out_bin [0]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[1]_INST_0 
       (.I0(\dest_graysync_ff[3] [1]),
        .I1(\dest_graysync_ff[3] [3]),
        .I2(\^dest_out_bin [5]),
        .I3(\dest_graysync_ff[3] [4]),
        .I4(\dest_graysync_ff[3] [2]),
        .O(\^dest_out_bin [1]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[2]_INST_0 
       (.I0(\dest_graysync_ff[3] [2]),
        .I1(\dest_graysync_ff[3] [4]),
        .I2(\^dest_out_bin [5]),
        .I3(\dest_graysync_ff[3] [3]),
        .O(\^dest_out_bin [2]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[3]_INST_0 
       (.I0(\dest_graysync_ff[3] [3]),
        .I1(\^dest_out_bin [5]),
        .I2(\dest_graysync_ff[3] [4]),
        .O(\^dest_out_bin [3]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[4]_INST_0 
       (.I0(\dest_graysync_ff[3] [4]),
        .I1(\^dest_out_bin [5]),
        .O(\^dest_out_bin [4]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[5]_INST_0 
       (.I0(\dest_graysync_ff[3] [5]),
        .I1(\dest_graysync_ff[3] [7]),
        .I2(\dest_graysync_ff[3] [9]),
        .I3(\dest_graysync_ff[3] [10]),
        .I4(\dest_graysync_ff[3] [8]),
        .I5(\dest_graysync_ff[3] [6]),
        .O(\^dest_out_bin [5]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[6]_INST_0 
       (.I0(\dest_graysync_ff[3] [6]),
        .I1(\dest_graysync_ff[3] [8]),
        .I2(\dest_graysync_ff[3] [10]),
        .I3(\dest_graysync_ff[3] [9]),
        .I4(\dest_graysync_ff[3] [7]),
        .O(\^dest_out_bin [6]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[7]_INST_0 
       (.I0(\dest_graysync_ff[3] [7]),
        .I1(\dest_graysync_ff[3] [9]),
        .I2(\dest_graysync_ff[3] [10]),
        .I3(\dest_graysync_ff[3] [8]),
        .O(\^dest_out_bin [7]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[8]_INST_0 
       (.I0(\dest_graysync_ff[3] [8]),
        .I1(\dest_graysync_ff[3] [10]),
        .I2(\dest_graysync_ff[3] [9]),
        .O(\^dest_out_bin [8]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[9]_INST_0 
       (.I0(\dest_graysync_ff[3] [9]),
        .I1(\dest_graysync_ff[3] [10]),
        .O(\^dest_out_bin [9]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[8]),
        .I1(src_in_bin[7]),
        .O(gray_enc[7]));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[8]_i_1 
       (.I0(src_in_bin[9]),
        .I1(src_in_bin[8]),
        .O(gray_enc[8]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[9]_i_1 
       (.I0(src_in_bin[10]),
        .I1(src_in_bin[9]),
        .O(gray_enc[9]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[10] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[10]),
        .Q(async_path[10]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[8]),
        .Q(async_path[8]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[9] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[9]),
        .Q(async_path[9]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "0" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "11" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module semicap_xpm_cdc_gray__parameterized0__1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [10:0]src_in_bin;
  input dest_clk;
  output [10:0]dest_out_bin;

  wire [10:0]async_path;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [10:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [10:0]\dest_graysync_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [10:0]\dest_graysync_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [10:0]\dest_graysync_ff[3] ;
  wire [9:0]\^dest_out_bin ;
  wire [9:0]gray_enc;
  wire src_clk;
  wire [10:0]src_in_bin;

  assign dest_out_bin[10] = \dest_graysync_ff[3] [10];
  assign dest_out_bin[9:0] = \^dest_out_bin [9:0];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[10]),
        .Q(\dest_graysync_ff[0] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[9]),
        .Q(\dest_graysync_ff[0] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [10]),
        .Q(\dest_graysync_ff[1] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [9]),
        .Q(\dest_graysync_ff[1] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [0]),
        .Q(\dest_graysync_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [10]),
        .Q(\dest_graysync_ff[2] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [1]),
        .Q(\dest_graysync_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [2]),
        .Q(\dest_graysync_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(\dest_graysync_ff[2] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(\dest_graysync_ff[2] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(\dest_graysync_ff[2] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [6]),
        .Q(\dest_graysync_ff[2] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(\dest_graysync_ff[2] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(\dest_graysync_ff[2] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [9]),
        .Q(\dest_graysync_ff[2] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [0]),
        .Q(\dest_graysync_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [10]),
        .Q(\dest_graysync_ff[3] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [1]),
        .Q(\dest_graysync_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [2]),
        .Q(\dest_graysync_ff[3] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [3]),
        .Q(\dest_graysync_ff[3] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [4]),
        .Q(\dest_graysync_ff[3] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [5]),
        .Q(\dest_graysync_ff[3] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [6]),
        .Q(\dest_graysync_ff[3] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [7]),
        .Q(\dest_graysync_ff[3] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [8]),
        .Q(\dest_graysync_ff[3] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [9]),
        .Q(\dest_graysync_ff[3] [9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[0]_INST_0 
       (.I0(\dest_graysync_ff[3] [0]),
        .I1(\dest_graysync_ff[3] [2]),
        .I2(\dest_graysync_ff[3] [4]),
        .I3(\^dest_out_bin [5]),
        .I4(\dest_graysync_ff[3] [3]),
        .I5(\dest_graysync_ff[3] [1]),
        .O(\^dest_out_bin [0]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[1]_INST_0 
       (.I0(\dest_graysync_ff[3] [1]),
        .I1(\dest_graysync_ff[3] [3]),
        .I2(\^dest_out_bin [5]),
        .I3(\dest_graysync_ff[3] [4]),
        .I4(\dest_graysync_ff[3] [2]),
        .O(\^dest_out_bin [1]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[2]_INST_0 
       (.I0(\dest_graysync_ff[3] [2]),
        .I1(\dest_graysync_ff[3] [4]),
        .I2(\^dest_out_bin [5]),
        .I3(\dest_graysync_ff[3] [3]),
        .O(\^dest_out_bin [2]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[3]_INST_0 
       (.I0(\dest_graysync_ff[3] [3]),
        .I1(\^dest_out_bin [5]),
        .I2(\dest_graysync_ff[3] [4]),
        .O(\^dest_out_bin [3]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[4]_INST_0 
       (.I0(\dest_graysync_ff[3] [4]),
        .I1(\^dest_out_bin [5]),
        .O(\^dest_out_bin [4]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[5]_INST_0 
       (.I0(\dest_graysync_ff[3] [5]),
        .I1(\dest_graysync_ff[3] [7]),
        .I2(\dest_graysync_ff[3] [9]),
        .I3(\dest_graysync_ff[3] [10]),
        .I4(\dest_graysync_ff[3] [8]),
        .I5(\dest_graysync_ff[3] [6]),
        .O(\^dest_out_bin [5]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[6]_INST_0 
       (.I0(\dest_graysync_ff[3] [6]),
        .I1(\dest_graysync_ff[3] [8]),
        .I2(\dest_graysync_ff[3] [10]),
        .I3(\dest_graysync_ff[3] [9]),
        .I4(\dest_graysync_ff[3] [7]),
        .O(\^dest_out_bin [6]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[7]_INST_0 
       (.I0(\dest_graysync_ff[3] [7]),
        .I1(\dest_graysync_ff[3] [9]),
        .I2(\dest_graysync_ff[3] [10]),
        .I3(\dest_graysync_ff[3] [8]),
        .O(\^dest_out_bin [7]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[8]_INST_0 
       (.I0(\dest_graysync_ff[3] [8]),
        .I1(\dest_graysync_ff[3] [10]),
        .I2(\dest_graysync_ff[3] [9]),
        .O(\^dest_out_bin [8]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[9]_INST_0 
       (.I0(\dest_graysync_ff[3] [9]),
        .I1(\dest_graysync_ff[3] [10]),
        .O(\^dest_out_bin [9]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[8]),
        .I1(src_in_bin[7]),
        .O(gray_enc[7]));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[8]_i_1 
       (.I0(src_in_bin[9]),
        .I1(src_in_bin[8]),
        .O(gray_enc[8]));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[9]_i_1 
       (.I0(src_in_bin[10]),
        .I1(src_in_bin[9]),
        .O(gray_enc[9]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[10] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[10]),
        .Q(async_path[10]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[8]),
        .Q(async_path[8]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[9] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[9]),
        .Q(async_path[9]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "0" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "8" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module semicap_xpm_cdc_gray__parameterized1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [7:0]src_in_bin;
  input dest_clk;
  output [7:0]dest_out_bin;

  wire [7:0]async_path;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[3] ;
  wire [6:0]\^dest_out_bin ;
  wire [6:0]gray_enc;
  wire src_clk;
  wire [7:0]src_in_bin;

  assign dest_out_bin[7] = \dest_graysync_ff[3] [7];
  assign dest_out_bin[6:0] = \^dest_out_bin [6:0];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [0]),
        .Q(\dest_graysync_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [1]),
        .Q(\dest_graysync_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [2]),
        .Q(\dest_graysync_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(\dest_graysync_ff[2] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(\dest_graysync_ff[2] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(\dest_graysync_ff[2] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [6]),
        .Q(\dest_graysync_ff[2] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(\dest_graysync_ff[2] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [0]),
        .Q(\dest_graysync_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [1]),
        .Q(\dest_graysync_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [2]),
        .Q(\dest_graysync_ff[3] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [3]),
        .Q(\dest_graysync_ff[3] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [4]),
        .Q(\dest_graysync_ff[3] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [5]),
        .Q(\dest_graysync_ff[3] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [6]),
        .Q(\dest_graysync_ff[3] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [7]),
        .Q(\dest_graysync_ff[3] [7]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[0]_INST_0 
       (.I0(\dest_graysync_ff[3] [0]),
        .I1(\^dest_out_bin [2]),
        .I2(\dest_graysync_ff[3] [1]),
        .O(\^dest_out_bin [0]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[1]_INST_0 
       (.I0(\dest_graysync_ff[3] [1]),
        .I1(\^dest_out_bin [2]),
        .O(\^dest_out_bin [1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[2]_INST_0 
       (.I0(\dest_graysync_ff[3] [2]),
        .I1(\dest_graysync_ff[3] [4]),
        .I2(\dest_graysync_ff[3] [6]),
        .I3(\dest_graysync_ff[3] [7]),
        .I4(\dest_graysync_ff[3] [5]),
        .I5(\dest_graysync_ff[3] [3]),
        .O(\^dest_out_bin [2]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[3]_INST_0 
       (.I0(\dest_graysync_ff[3] [3]),
        .I1(\dest_graysync_ff[3] [5]),
        .I2(\dest_graysync_ff[3] [7]),
        .I3(\dest_graysync_ff[3] [6]),
        .I4(\dest_graysync_ff[3] [4]),
        .O(\^dest_out_bin [3]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[4]_INST_0 
       (.I0(\dest_graysync_ff[3] [4]),
        .I1(\dest_graysync_ff[3] [6]),
        .I2(\dest_graysync_ff[3] [7]),
        .I3(\dest_graysync_ff[3] [5]),
        .O(\^dest_out_bin [4]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[5]_INST_0 
       (.I0(\dest_graysync_ff[3] [5]),
        .I1(\dest_graysync_ff[3] [7]),
        .I2(\dest_graysync_ff[3] [6]),
        .O(\^dest_out_bin [5]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[6]_INST_0 
       (.I0(\dest_graysync_ff[3] [6]),
        .I1(\dest_graysync_ff[3] [7]),
        .O(\^dest_out_bin [6]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[7]),
        .Q(async_path[7]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "0" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "8" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module semicap_xpm_cdc_gray__parameterized1__1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [7:0]src_in_bin;
  input dest_clk;
  output [7:0]dest_out_bin;

  wire [7:0]async_path;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [7:0]\dest_graysync_ff[3] ;
  wire [6:0]\^dest_out_bin ;
  wire [6:0]gray_enc;
  wire src_clk;
  wire [7:0]src_in_bin;

  assign dest_out_bin[7] = \dest_graysync_ff[3] [7];
  assign dest_out_bin[6:0] = \^dest_out_bin [6:0];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [0]),
        .Q(\dest_graysync_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [1]),
        .Q(\dest_graysync_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [2]),
        .Q(\dest_graysync_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(\dest_graysync_ff[2] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(\dest_graysync_ff[2] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(\dest_graysync_ff[2] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [6]),
        .Q(\dest_graysync_ff[2] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(\dest_graysync_ff[2] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [0]),
        .Q(\dest_graysync_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [1]),
        .Q(\dest_graysync_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [2]),
        .Q(\dest_graysync_ff[3] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [3]),
        .Q(\dest_graysync_ff[3] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [4]),
        .Q(\dest_graysync_ff[3] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [5]),
        .Q(\dest_graysync_ff[3] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [6]),
        .Q(\dest_graysync_ff[3] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [7]),
        .Q(\dest_graysync_ff[3] [7]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[0]_INST_0 
       (.I0(\dest_graysync_ff[3] [0]),
        .I1(\^dest_out_bin [2]),
        .I2(\dest_graysync_ff[3] [1]),
        .O(\^dest_out_bin [0]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[1]_INST_0 
       (.I0(\dest_graysync_ff[3] [1]),
        .I1(\^dest_out_bin [2]),
        .O(\^dest_out_bin [1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[2]_INST_0 
       (.I0(\dest_graysync_ff[3] [2]),
        .I1(\dest_graysync_ff[3] [4]),
        .I2(\dest_graysync_ff[3] [6]),
        .I3(\dest_graysync_ff[3] [7]),
        .I4(\dest_graysync_ff[3] [5]),
        .I5(\dest_graysync_ff[3] [3]),
        .O(\^dest_out_bin [2]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[3]_INST_0 
       (.I0(\dest_graysync_ff[3] [3]),
        .I1(\dest_graysync_ff[3] [5]),
        .I2(\dest_graysync_ff[3] [7]),
        .I3(\dest_graysync_ff[3] [6]),
        .I4(\dest_graysync_ff[3] [4]),
        .O(\^dest_out_bin [3]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[4]_INST_0 
       (.I0(\dest_graysync_ff[3] [4]),
        .I1(\dest_graysync_ff[3] [6]),
        .I2(\dest_graysync_ff[3] [7]),
        .I3(\dest_graysync_ff[3] [5]),
        .O(\^dest_out_bin [4]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[5]_INST_0 
       (.I0(\dest_graysync_ff[3] [5]),
        .I1(\dest_graysync_ff[3] [7]),
        .I2(\dest_graysync_ff[3] [6]),
        .O(\^dest_out_bin [5]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[6]_INST_0 
       (.I0(\dest_graysync_ff[3] [6]),
        .I1(\dest_graysync_ff[3] [7]),
        .O(\^dest_out_bin [6]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[7]),
        .Q(async_path[7]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "0" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "9" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module semicap_xpm_cdc_gray__parameterized2
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [8:0]src_in_bin;
  input dest_clk;
  output [8:0]dest_out_bin;

  wire [8:0]async_path;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[3] ;
  wire [7:0]\^dest_out_bin ;
  wire [7:0]gray_enc;
  wire src_clk;
  wire [8:0]src_in_bin;

  assign dest_out_bin[8] = \dest_graysync_ff[3] [8];
  assign dest_out_bin[7:0] = \^dest_out_bin [7:0];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [0]),
        .Q(\dest_graysync_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [1]),
        .Q(\dest_graysync_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [2]),
        .Q(\dest_graysync_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(\dest_graysync_ff[2] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(\dest_graysync_ff[2] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(\dest_graysync_ff[2] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [6]),
        .Q(\dest_graysync_ff[2] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(\dest_graysync_ff[2] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(\dest_graysync_ff[2] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [0]),
        .Q(\dest_graysync_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [1]),
        .Q(\dest_graysync_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [2]),
        .Q(\dest_graysync_ff[3] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [3]),
        .Q(\dest_graysync_ff[3] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [4]),
        .Q(\dest_graysync_ff[3] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [5]),
        .Q(\dest_graysync_ff[3] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [6]),
        .Q(\dest_graysync_ff[3] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [7]),
        .Q(\dest_graysync_ff[3] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [8]),
        .Q(\dest_graysync_ff[3] [8]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[0]_INST_0 
       (.I0(\dest_graysync_ff[3] [0]),
        .I1(\dest_graysync_ff[3] [2]),
        .I2(\^dest_out_bin [3]),
        .I3(\dest_graysync_ff[3] [1]),
        .O(\^dest_out_bin [0]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[1]_INST_0 
       (.I0(\dest_graysync_ff[3] [1]),
        .I1(\^dest_out_bin [3]),
        .I2(\dest_graysync_ff[3] [2]),
        .O(\^dest_out_bin [1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[2]_INST_0 
       (.I0(\dest_graysync_ff[3] [2]),
        .I1(\^dest_out_bin [3]),
        .O(\^dest_out_bin [2]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[3]_INST_0 
       (.I0(\dest_graysync_ff[3] [3]),
        .I1(\dest_graysync_ff[3] [5]),
        .I2(\dest_graysync_ff[3] [7]),
        .I3(\dest_graysync_ff[3] [8]),
        .I4(\dest_graysync_ff[3] [6]),
        .I5(\dest_graysync_ff[3] [4]),
        .O(\^dest_out_bin [3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[4]_INST_0 
       (.I0(\dest_graysync_ff[3] [4]),
        .I1(\dest_graysync_ff[3] [6]),
        .I2(\dest_graysync_ff[3] [8]),
        .I3(\dest_graysync_ff[3] [7]),
        .I4(\dest_graysync_ff[3] [5]),
        .O(\^dest_out_bin [4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[5]_INST_0 
       (.I0(\dest_graysync_ff[3] [5]),
        .I1(\dest_graysync_ff[3] [7]),
        .I2(\dest_graysync_ff[3] [8]),
        .I3(\dest_graysync_ff[3] [6]),
        .O(\^dest_out_bin [5]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[6]_INST_0 
       (.I0(\dest_graysync_ff[3] [6]),
        .I1(\dest_graysync_ff[3] [8]),
        .I2(\dest_graysync_ff[3] [7]),
        .O(\^dest_out_bin [6]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[7]_INST_0 
       (.I0(\dest_graysync_ff[3] [7]),
        .I1(\dest_graysync_ff[3] [8]),
        .O(\^dest_out_bin [7]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[8]),
        .I1(src_in_bin[7]),
        .O(gray_enc[7]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[8]),
        .Q(async_path[8]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "0" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "9" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module semicap_xpm_cdc_gray__parameterized2__1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [8:0]src_in_bin;
  input dest_clk;
  output [8:0]dest_out_bin;

  wire [8:0]async_path;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[3] ;
  wire [7:0]\^dest_out_bin ;
  wire [7:0]gray_enc;
  wire src_clk;
  wire [8:0]src_in_bin;

  assign dest_out_bin[8] = \dest_graysync_ff[3] [8];
  assign dest_out_bin[7:0] = \^dest_out_bin [7:0];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [0]),
        .Q(\dest_graysync_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [1]),
        .Q(\dest_graysync_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [2]),
        .Q(\dest_graysync_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(\dest_graysync_ff[2] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(\dest_graysync_ff[2] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [5]),
        .Q(\dest_graysync_ff[2] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [6]),
        .Q(\dest_graysync_ff[2] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [7]),
        .Q(\dest_graysync_ff[2] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[2][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(\dest_graysync_ff[2] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [0]),
        .Q(\dest_graysync_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [1]),
        .Q(\dest_graysync_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [2]),
        .Q(\dest_graysync_ff[3] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [3]),
        .Q(\dest_graysync_ff[3] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [4]),
        .Q(\dest_graysync_ff[3] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [5]),
        .Q(\dest_graysync_ff[3] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [6]),
        .Q(\dest_graysync_ff[3] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [7]),
        .Q(\dest_graysync_ff[3] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[3][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[2] [8]),
        .Q(\dest_graysync_ff[3] [8]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[0]_INST_0 
       (.I0(\dest_graysync_ff[3] [0]),
        .I1(\dest_graysync_ff[3] [2]),
        .I2(\^dest_out_bin [3]),
        .I3(\dest_graysync_ff[3] [1]),
        .O(\^dest_out_bin [0]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[1]_INST_0 
       (.I0(\dest_graysync_ff[3] [1]),
        .I1(\^dest_out_bin [3]),
        .I2(\dest_graysync_ff[3] [2]),
        .O(\^dest_out_bin [1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[2]_INST_0 
       (.I0(\dest_graysync_ff[3] [2]),
        .I1(\^dest_out_bin [3]),
        .O(\^dest_out_bin [2]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin[3]_INST_0 
       (.I0(\dest_graysync_ff[3] [3]),
        .I1(\dest_graysync_ff[3] [5]),
        .I2(\dest_graysync_ff[3] [7]),
        .I3(\dest_graysync_ff[3] [8]),
        .I4(\dest_graysync_ff[3] [6]),
        .I5(\dest_graysync_ff[3] [4]),
        .O(\^dest_out_bin [3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin[4]_INST_0 
       (.I0(\dest_graysync_ff[3] [4]),
        .I1(\dest_graysync_ff[3] [6]),
        .I2(\dest_graysync_ff[3] [8]),
        .I3(\dest_graysync_ff[3] [7]),
        .I4(\dest_graysync_ff[3] [5]),
        .O(\^dest_out_bin [4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin[5]_INST_0 
       (.I0(\dest_graysync_ff[3] [5]),
        .I1(\dest_graysync_ff[3] [7]),
        .I2(\dest_graysync_ff[3] [8]),
        .I3(\dest_graysync_ff[3] [6]),
        .O(\^dest_out_bin [5]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin[6]_INST_0 
       (.I0(\dest_graysync_ff[3] [6]),
        .I1(\dest_graysync_ff[3] [8]),
        .I2(\dest_graysync_ff[3] [7]),
        .O(\^dest_out_bin [6]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin[7]_INST_0 
       (.I0(\dest_graysync_ff[3] [7]),
        .I1(\dest_graysync_ff[3] [8]),
        .O(\^dest_out_bin [7]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[4]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[5]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[6]),
        .O(gray_enc[6]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[8]),
        .I1(src_in_bin[7]),
        .O(gray_enc[7]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[8]),
        .Q(async_path[8]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "4" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module semicap_xpm_cdc_sync_rst
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [3:0]syncstages_ff;

  assign dest_rst = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "4" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module semicap_xpm_cdc_sync_rst__4
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [3:0]syncstages_ff;

  assign dest_rst = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "4" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module semicap_xpm_cdc_sync_rst__5
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [3:0]syncstages_ff;

  assign dest_rst = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "4" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "1" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module semicap_xpm_cdc_sync_rst__6
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [3:0]syncstages_ff;

  assign dest_rst = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn
   (\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ,
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ,
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 ,
    rst,
    clr_full,
    almost_full,
    \count_value_i_reg[2]_0 ,
    wrst_busy,
    rst_d1,
    wr_en,
    Q,
    E,
    wr_clk);
  output \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  input \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ;
  input \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 ;
  input rst;
  input clr_full;
  input almost_full;
  input \count_value_i_reg[2]_0 ;
  input wrst_busy;
  input rst_d1;
  input wr_en;
  input [9:0]Q;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [9:0]Q;
  wire almost_full;
  wire clr_full;
  wire [9:0]count_value_i;
  wire \count_value_i[0]_i_1__5_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire \count_value_i[4]_i_1__2_n_0 ;
  wire \count_value_i[5]_i_1__2_n_0 ;
  wire \count_value_i[6]_i_1__2_n_0 ;
  wire \count_value_i[6]_i_2__2_n_0 ;
  wire \count_value_i[7]_i_1__2_n_0 ;
  wire \count_value_i[8]_i_1__2_n_0 ;
  wire \count_value_i[9]_i_1__2_n_0 ;
  wire \count_value_i[9]_i_2__2_n_0 ;
  wire \count_value_i_reg[2]_0 ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_n_0 ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_4_n_0 ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_5_n_0 ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_6_n_0 ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  wire rst;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire wrst_busy;

  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__5 
       (.I0(count_value_i[0]),
        .O(\count_value_i[0]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__2 
       (.I0(count_value_i[1]),
        .I1(count_value_i[0]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \count_value_i[2]_i_1__2 
       (.I0(count_value_i[2]),
        .I1(count_value_i[0]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(count_value_i[1]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \count_value_i[3]_i_1__2 
       (.I0(count_value_i[3]),
        .I1(count_value_i[1]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(count_value_i[0]),
        .I4(count_value_i[2]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \count_value_i[4]_i_1__2 
       (.I0(count_value_i[4]),
        .I1(count_value_i[2]),
        .I2(count_value_i[0]),
        .I3(\count_value_i_reg[2]_0 ),
        .I4(count_value_i[1]),
        .I5(count_value_i[3]),
        .O(\count_value_i[4]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \count_value_i[5]_i_1__2 
       (.I0(count_value_i[3]),
        .I1(\count_value_i[6]_i_2__2_n_0 ),
        .I2(count_value_i[2]),
        .I3(count_value_i[4]),
        .I4(count_value_i[5]),
        .O(\count_value_i[5]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \count_value_i[6]_i_1__2 
       (.I0(count_value_i[6]),
        .I1(count_value_i[3]),
        .I2(\count_value_i[6]_i_2__2_n_0 ),
        .I3(count_value_i[2]),
        .I4(count_value_i[4]),
        .I5(count_value_i[5]),
        .O(\count_value_i[6]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \count_value_i[6]_i_2__2 
       (.I0(count_value_i[0]),
        .I1(wrst_busy),
        .I2(rst_d1),
        .I3(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 ),
        .I4(wr_en),
        .I5(count_value_i[1]),
        .O(\count_value_i[6]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \count_value_i[7]_i_1__2 
       (.I0(count_value_i[7]),
        .I1(count_value_i[5]),
        .I2(\count_value_i[9]_i_2__2_n_0 ),
        .I3(count_value_i[6]),
        .O(\count_value_i[7]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \count_value_i[8]_i_1__2 
       (.I0(count_value_i[8]),
        .I1(count_value_i[6]),
        .I2(\count_value_i[9]_i_2__2_n_0 ),
        .I3(count_value_i[5]),
        .I4(count_value_i[7]),
        .O(\count_value_i[8]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \count_value_i[9]_i_1__2 
       (.I0(count_value_i[9]),
        .I1(count_value_i[7]),
        .I2(count_value_i[5]),
        .I3(\count_value_i[9]_i_2__2_n_0 ),
        .I4(count_value_i[6]),
        .I5(count_value_i[8]),
        .O(\count_value_i[9]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    \count_value_i[9]_i_2__2 
       (.I0(count_value_i[3]),
        .I1(count_value_i[1]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(count_value_i[0]),
        .I4(count_value_i[2]),
        .I5(count_value_i[4]),
        .O(\count_value_i[9]_i_2__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__5_n_0 ),
        .Q(count_value_i[0]),
        .S(wrst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(count_value_i[1]),
        .S(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(count_value_i[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(count_value_i[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[4]_i_1__2_n_0 ),
        .Q(count_value_i[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[5]_i_1__2_n_0 ),
        .Q(count_value_i[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[6]_i_1__2_n_0 ),
        .Q(count_value_i[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[7]_i_1__2_n_0 ),
        .Q(count_value_i[7]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[8]_i_1__2_n_0 ),
        .Q(count_value_i[8]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[9] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[9]_i_1__2_n_0 ),
        .Q(count_value_i[9]),
        .R(wrst_busy));
  LUT6 #(
    .INIT(64'h0000FFFE0000000E)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_1 
       (.I0(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_n_0 ),
        .I1(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ),
        .I2(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 ),
        .I3(rst),
        .I4(clr_full),
        .I5(almost_full),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ));
  LUT6 #(
    .INIT(64'h0000000000000041)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2 
       (.I0(\count_value_i_reg[2]_0 ),
        .I1(count_value_i[9]),
        .I2(Q[9]),
        .I3(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_4_n_0 ),
        .I4(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_5_n_0 ),
        .I5(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_6_n_0 ),
        .O(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_4 
       (.I0(count_value_i[0]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(count_value_i[1]),
        .I4(Q[2]),
        .I5(count_value_i[2]),
        .O(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_5 
       (.I0(count_value_i[6]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(count_value_i[7]),
        .I4(Q[8]),
        .I5(count_value_i[8]),
        .O(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_6 
       (.I0(count_value_i[3]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(count_value_i[4]),
        .I4(Q[5]),
        .I5(count_value_i[5]),
        .O(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_6_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized0
   (Q,
    \count_value_i_reg[0]_0 ,
    rd_en,
    \count_value_i_reg[5]_0 ,
    SR,
    rd_clk);
  output [9:0]Q;
  input \count_value_i_reg[0]_0 ;
  input rd_en;
  input \count_value_i_reg[5]_0 ;
  input [0:0]SR;
  input rd_clk;

  wire [9:0]Q;
  wire [0:0]SR;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__5_n_0 ;
  wire \count_value_i[2]_i_1__5_n_0 ;
  wire \count_value_i[3]_i_1__5_n_0 ;
  wire \count_value_i[4]_i_1__5_n_0 ;
  wire \count_value_i[5]_i_1__5_n_0 ;
  wire \count_value_i[6]_i_1__5_n_0 ;
  wire \count_value_i[7]_i_1__5_n_0 ;
  wire \count_value_i[8]_i_1__5_n_0 ;
  wire \count_value_i[8]_i_2__1_n_0 ;
  wire \count_value_i[9]_i_1__5_n_0 ;
  wire \count_value_i[9]_i_2__5_n_0 ;
  wire \count_value_i_reg[0]_0 ;
  wire \count_value_i_reg[5]_0 ;
  wire rd_clk;
  wire rd_en;

  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__5 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__5 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__5 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1__5 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\count_value_i[4]_i_1__5_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[5]_i_1__5 
       (.I0(\count_value_i[8]_i_2__1_n_0 ),
        .I1(Q[4]),
        .I2(Q[5]),
        .O(\count_value_i[5]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[6]_i_1__5 
       (.I0(Q[4]),
        .I1(\count_value_i[8]_i_2__1_n_0 ),
        .I2(Q[5]),
        .I3(Q[6]),
        .O(\count_value_i[6]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[7]_i_1__5 
       (.I0(Q[5]),
        .I1(\count_value_i[8]_i_2__1_n_0 ),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[7]),
        .O(\count_value_i[7]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[8]_i_1__5 
       (.I0(Q[6]),
        .I1(Q[4]),
        .I2(\count_value_i[8]_i_2__1_n_0 ),
        .I3(Q[5]),
        .I4(Q[7]),
        .I5(Q[8]),
        .O(\count_value_i[8]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \count_value_i[8]_i_2__1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(rd_en),
        .I3(\count_value_i_reg[5]_0 ),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_value_i[8]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[9]_i_1__5 
       (.I0(Q[7]),
        .I1(Q[5]),
        .I2(\count_value_i[9]_i_2__5_n_0 ),
        .I3(Q[6]),
        .I4(Q[8]),
        .I5(Q[9]),
        .O(\count_value_i[9]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_value_i[9]_i_2__5 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(\count_value_i_reg[0]_0 ),
        .I4(Q[1]),
        .I5(Q[3]),
        .O(\count_value_i[9]_i_2__5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[1] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[1]_i_1__5_n_0 ),
        .Q(Q[1]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[2]_i_1__5_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[3]_i_1__5_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[4]_i_1__5_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[5]_i_1__5_n_0 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[6]_i_1__5_n_0 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[7]_i_1__5_n_0 ),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[8] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[8]_i_1__5_n_0 ),
        .Q(Q[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[9] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[9]_i_1__5_n_0 ),
        .Q(Q[9]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized0_26
   (Q,
    \reg_out_i_reg[9] ,
    \count_value_i_reg[2]_0 ,
    wrst_busy,
    rst_d1,
    \count_value_i_reg[6]_0 ,
    wr_en,
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ,
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 ,
    E,
    wr_clk);
  output [2:0]Q;
  output \reg_out_i_reg[9] ;
  input \count_value_i_reg[2]_0 ;
  input wrst_busy;
  input rst_d1;
  input \count_value_i_reg[6]_0 ;
  input wr_en;
  input \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  input [6:0]\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 ;
  input [0:0]E;
  input wr_clk;

  wire [0:0]E;
  wire [2:0]Q;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire \count_value_i[4]_i_1_n_0 ;
  wire \count_value_i[5]_i_1_n_0 ;
  wire \count_value_i[6]_i_1_n_0 ;
  wire \count_value_i[6]_i_2_n_0 ;
  wire \count_value_i[7]_i_1_n_0 ;
  wire \count_value_i[8]_i_1_n_0 ;
  wire \count_value_i[9]_i_1_n_0 ;
  wire \count_value_i[9]_i_2_n_0 ;
  wire \count_value_i_reg[2]_0 ;
  wire \count_value_i_reg[6]_0 ;
  wire \count_value_i_reg_n_0_[3] ;
  wire \count_value_i_reg_n_0_[4] ;
  wire \count_value_i_reg_n_0_[5] ;
  wire \count_value_i_reg_n_0_[6] ;
  wire \count_value_i_reg_n_0_[7] ;
  wire \count_value_i_reg_n_0_[8] ;
  wire \count_value_i_reg_n_0_[9] ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_8_n_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_9_n_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  wire [6:0]\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 ;
  wire \reg_out_i_reg[9] ;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire wrst_busy;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__2 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \count_value_i[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(Q[1]),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \count_value_i[3]_i_1 
       (.I0(\count_value_i_reg_n_0_[3] ),
        .I1(Q[1]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(Q[0]),
        .I4(Q[2]),
        .O(\count_value_i[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \count_value_i[4]_i_1 
       (.I0(\count_value_i_reg_n_0_[4] ),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(\count_value_i_reg[2]_0 ),
        .I4(Q[1]),
        .I5(\count_value_i_reg_n_0_[3] ),
        .O(\count_value_i[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \count_value_i[5]_i_1 
       (.I0(\count_value_i_reg_n_0_[3] ),
        .I1(\count_value_i[6]_i_2_n_0 ),
        .I2(Q[2]),
        .I3(\count_value_i_reg_n_0_[4] ),
        .I4(\count_value_i_reg_n_0_[5] ),
        .O(\count_value_i[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \count_value_i[6]_i_1 
       (.I0(\count_value_i_reg_n_0_[6] ),
        .I1(\count_value_i_reg_n_0_[3] ),
        .I2(\count_value_i[6]_i_2_n_0 ),
        .I3(Q[2]),
        .I4(\count_value_i_reg_n_0_[4] ),
        .I5(\count_value_i_reg_n_0_[5] ),
        .O(\count_value_i[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \count_value_i[6]_i_2 
       (.I0(Q[0]),
        .I1(wrst_busy),
        .I2(rst_d1),
        .I3(\count_value_i_reg[6]_0 ),
        .I4(wr_en),
        .I5(Q[1]),
        .O(\count_value_i[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \count_value_i[7]_i_1 
       (.I0(\count_value_i_reg_n_0_[7] ),
        .I1(\count_value_i_reg_n_0_[5] ),
        .I2(\count_value_i[9]_i_2_n_0 ),
        .I3(\count_value_i_reg_n_0_[6] ),
        .O(\count_value_i[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \count_value_i[8]_i_1 
       (.I0(\count_value_i_reg_n_0_[8] ),
        .I1(\count_value_i_reg_n_0_[6] ),
        .I2(\count_value_i[9]_i_2_n_0 ),
        .I3(\count_value_i_reg_n_0_[5] ),
        .I4(\count_value_i_reg_n_0_[7] ),
        .O(\count_value_i[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \count_value_i[9]_i_1 
       (.I0(\count_value_i_reg_n_0_[9] ),
        .I1(\count_value_i_reg_n_0_[7] ),
        .I2(\count_value_i_reg_n_0_[5] ),
        .I3(\count_value_i[9]_i_2_n_0 ),
        .I4(\count_value_i_reg_n_0_[6] ),
        .I5(\count_value_i_reg_n_0_[8] ),
        .O(\count_value_i[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    \count_value_i[9]_i_2 
       (.I0(\count_value_i_reg_n_0_[3] ),
        .I1(Q[1]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(\count_value_i_reg_n_0_[4] ),
        .O(\count_value_i[9]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .R(wrst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(Q[1]),
        .S(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[3] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[4]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[4] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[5]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[5] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[6]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[6] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[7]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[7] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[8]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[8] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[9] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[9]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[9] ),
        .R(wrst_busy));
  LUT5 #(
    .INIT(32'h04000004)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_3 
       (.I0(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_8_n_0 ),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_9_n_0 ),
        .I2(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ),
        .I3(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [6]),
        .I4(\count_value_i_reg_n_0_[9] ),
        .O(\reg_out_i_reg[9] ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_8 
       (.I0(\count_value_i_reg_n_0_[3] ),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [1]),
        .I3(\count_value_i_reg_n_0_[4] ),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [2]),
        .I5(\count_value_i_reg_n_0_[5] ),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_9 
       (.I0(\count_value_i_reg_n_0_[6] ),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [4]),
        .I3(\count_value_i_reg_n_0_[7] ),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [5]),
        .I5(\count_value_i_reg_n_0_[8] ),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_9_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized1
   (Q,
    \gen_pf_ic_rc.ram_empty_i_reg ,
    \count_value_i_reg[9]_0 ,
    S,
    \count_value_i_reg[5]_0 ,
    rd_en,
    \count_value_i_reg[0]_0 ,
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] ,
    SR,
    rd_clk);
  output [10:0]Q;
  output \gen_pf_ic_rc.ram_empty_i_reg ;
  output [1:0]\count_value_i_reg[9]_0 ;
  output [7:0]S;
  output \count_value_i_reg[5]_0 ;
  input rd_en;
  input \count_value_i_reg[0]_0 ;
  input [8:0]\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] ;
  input [0:0]SR;
  input rd_clk;

  wire [10:0]Q;
  wire [7:0]S;
  wire [0:0]SR;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[10]_i_1__0_n_0 ;
  wire \count_value_i[10]_i_2__0_n_0 ;
  wire \count_value_i[1]_i_1__4_n_0 ;
  wire \count_value_i[2]_i_1__4_n_0 ;
  wire \count_value_i[3]_i_1__4_n_0 ;
  wire \count_value_i[4]_i_1__4_n_0 ;
  wire \count_value_i[5]_i_1__4_n_0 ;
  wire \count_value_i[6]_i_1__4_n_0 ;
  wire \count_value_i[7]_i_1__4_n_0 ;
  wire \count_value_i[8]_i_1__4_n_0 ;
  wire \count_value_i[8]_i_2__0_n_0 ;
  wire \count_value_i[9]_i_1__4_n_0 ;
  wire \count_value_i[9]_i_2__4_n_0 ;
  wire \count_value_i_reg[0]_0 ;
  wire \count_value_i_reg[5]_0 ;
  wire [1:0]\count_value_i_reg[9]_0 ;
  wire [8:0]\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] ;
  wire \gen_pf_ic_rc.ram_empty_i_reg ;
  wire rd_clk;
  wire rd_en;

  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \count_value_i[0]_i_1__1 
       (.I0(\count_value_i_reg[0]_0 ),
        .I1(rd_en),
        .I2(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[10]_i_1__0 
       (.I0(\count_value_i[10]_i_2__0_n_0 ),
        .I1(Q[9]),
        .I2(Q[10]),
        .O(\count_value_i[10]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_value_i[10]_i_2__0 
       (.I0(Q[8]),
        .I1(Q[6]),
        .I2(Q[4]),
        .I3(\count_value_i[8]_i_2__0_n_0 ),
        .I4(Q[5]),
        .I5(Q[7]),
        .O(\count_value_i[10]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__4 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1__4 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\count_value_i[4]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[5]_i_1__4 
       (.I0(\count_value_i[8]_i_2__0_n_0 ),
        .I1(Q[4]),
        .I2(Q[5]),
        .O(\count_value_i[5]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[6]_i_1__4 
       (.I0(Q[4]),
        .I1(\count_value_i[8]_i_2__0_n_0 ),
        .I2(Q[5]),
        .I3(Q[6]),
        .O(\count_value_i[6]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[7]_i_1__4 
       (.I0(Q[5]),
        .I1(\count_value_i[8]_i_2__0_n_0 ),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[7]),
        .O(\count_value_i[7]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[8]_i_1__4 
       (.I0(Q[6]),
        .I1(Q[4]),
        .I2(\count_value_i[8]_i_2__0_n_0 ),
        .I3(Q[5]),
        .I4(Q[7]),
        .I5(Q[8]),
        .O(\count_value_i[8]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \count_value_i[8]_i_2__0 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(rd_en),
        .I3(\count_value_i_reg[0]_0 ),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_value_i[8]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[9]_i_1__4 
       (.I0(Q[7]),
        .I1(Q[5]),
        .I2(\count_value_i[9]_i_2__4_n_0 ),
        .I3(Q[6]),
        .I4(Q[8]),
        .I5(Q[9]),
        .O(\count_value_i[9]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_value_i[9]_i_2__4 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(\gen_pf_ic_rc.ram_empty_i_reg ),
        .I4(Q[1]),
        .I5(Q[3]),
        .O(\count_value_i[9]_i_2__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[10] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[10]_i_1__0_n_0 ),
        .Q(Q[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[2]_i_1__4_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[3]_i_1__4_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[4]_i_1__4_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[5]_i_1__4_n_0 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[6]_i_1__4_n_0 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[7]_i_1__4_n_0 ),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[8] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[8]_i_1__4_n_0 ),
        .Q(Q[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[9] 
       (.C(rd_clk),
        .CE(\gen_pf_ic_rc.ram_empty_i_reg ),
        .D(\count_value_i[9]_i_1__4_n_0 ),
        .Q(Q[9]),
        .R(SR));
  LUT3 #(
    .INIT(8'hB4)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_10 
       (.I0(\count_value_i_reg[0]_0 ),
        .I1(rd_en),
        .I2(Q[0]),
        .O(S[0]));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_3 
       (.I0(Q[7]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [6]),
        .O(S[7]));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_4 
       (.I0(Q[6]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [5]),
        .O(S[6]));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_5 
       (.I0(Q[5]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [4]),
        .O(S[5]));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_6 
       (.I0(Q[4]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [3]),
        .O(S[4]));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_7 
       (.I0(Q[3]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [2]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_8 
       (.I0(Q[2]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [1]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_9 
       (.I0(Q[1]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [0]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[9]_i_2 
       (.I0(Q[9]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [8]),
        .O(\count_value_i_reg[9]_0 [1]));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[9]_i_3 
       (.I0(Q[8]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [7]),
        .O(\count_value_i_reg[9]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.ram_empty_i_i_8 
       (.I0(Q[5]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] [4]),
        .O(\count_value_i_reg[5]_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 ),
        .O(\gen_pf_ic_rc.ram_empty_i_reg ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized1_24
   (Q,
    D,
    \count_value_i_reg[2]_0 ,
    wrst_busy,
    rst_d1,
    \count_value_i_reg[6]_0 ,
    wr_en,
    \gwdc.wr_data_count_i_reg[10] ,
    E,
    wr_clk);
  output [10:0]Q;
  output [10:0]D;
  input \count_value_i_reg[2]_0 ;
  input wrst_busy;
  input rst_d1;
  input \count_value_i_reg[6]_0 ;
  input wr_en;
  input [10:0]\gwdc.wr_data_count_i_reg[10] ;
  input [0:0]E;
  input wr_clk;

  wire [10:0]D;
  wire [0:0]E;
  wire [10:0]Q;
  wire \count_value_i[0]_i_1__4_n_0 ;
  wire \count_value_i[10]_i_1_n_0 ;
  wire \count_value_i[10]_i_2_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire \count_value_i[4]_i_1__1_n_0 ;
  wire \count_value_i[5]_i_1__1_n_0 ;
  wire \count_value_i[6]_i_1__1_n_0 ;
  wire \count_value_i[6]_i_2__1_n_0 ;
  wire \count_value_i[7]_i_1__1_n_0 ;
  wire \count_value_i[8]_i_1__1_n_0 ;
  wire \count_value_i[9]_i_1__1_n_0 ;
  wire \count_value_i[9]_i_2__1_n_0 ;
  wire \count_value_i_reg[2]_0 ;
  wire \count_value_i_reg[6]_0 ;
  wire \gwdc.wr_data_count_i[10]_i_2_n_0 ;
  wire \gwdc.wr_data_count_i[10]_i_3_n_0 ;
  wire \gwdc.wr_data_count_i[10]_i_4_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_2_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_3_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_4_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_5_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_6_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_7_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_8_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_9_n_0 ;
  wire [10:0]\gwdc.wr_data_count_i_reg[10] ;
  wire \gwdc.wr_data_count_i_reg[10]_i_1_n_6 ;
  wire \gwdc.wr_data_count_i_reg[10]_i_1_n_7 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_0 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_1 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_2 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_3 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_4 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_5 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_6 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_7 ;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire wrst_busy;
  wire [7:2]\NLW_gwdc.wr_data_count_i_reg[10]_i_1_CO_UNCONNECTED ;
  wire [7:3]\NLW_gwdc.wr_data_count_i_reg[10]_i_1_O_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__4 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \count_value_i[10]_i_1 
       (.I0(Q[10]),
        .I1(Q[8]),
        .I2(Q[6]),
        .I3(\count_value_i[10]_i_2_n_0 ),
        .I4(Q[7]),
        .I5(Q[9]),
        .O(\count_value_i[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    \count_value_i[10]_i_2 
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(\count_value_i[6]_i_2__1_n_0 ),
        .I4(Q[3]),
        .O(\count_value_i[10]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(Q[1]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(Q[0]),
        .I4(Q[2]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \count_value_i[4]_i_1__1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(\count_value_i_reg[2]_0 ),
        .I4(Q[1]),
        .I5(Q[3]),
        .O(\count_value_i[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \count_value_i[5]_i_1__1 
       (.I0(Q[3]),
        .I1(\count_value_i[6]_i_2__1_n_0 ),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[5]),
        .O(\count_value_i[5]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \count_value_i[6]_i_1__1 
       (.I0(Q[6]),
        .I1(Q[3]),
        .I2(\count_value_i[6]_i_2__1_n_0 ),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(\count_value_i[6]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \count_value_i[6]_i_2__1 
       (.I0(Q[0]),
        .I1(wrst_busy),
        .I2(rst_d1),
        .I3(\count_value_i_reg[6]_0 ),
        .I4(wr_en),
        .I5(Q[1]),
        .O(\count_value_i[6]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \count_value_i[7]_i_1__1 
       (.I0(Q[7]),
        .I1(Q[5]),
        .I2(\count_value_i[9]_i_2__1_n_0 ),
        .I3(Q[6]),
        .O(\count_value_i[7]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \count_value_i[8]_i_1__1 
       (.I0(Q[8]),
        .I1(Q[6]),
        .I2(\count_value_i[9]_i_2__1_n_0 ),
        .I3(Q[5]),
        .I4(Q[7]),
        .O(\count_value_i[8]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \count_value_i[9]_i_1__1 
       (.I0(Q[9]),
        .I1(Q[7]),
        .I2(Q[5]),
        .I3(\count_value_i[9]_i_2__1_n_0 ),
        .I4(Q[6]),
        .I5(Q[8]),
        .O(\count_value_i[9]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    \count_value_i[9]_i_2__1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[4]),
        .O(\count_value_i[9]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__4_n_0 ),
        .Q(Q[0]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[10] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[10]_i_1_n_0 ),
        .Q(Q[10]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[4]_i_1__1_n_0 ),
        .Q(Q[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[5]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[6]_i_1__1_n_0 ),
        .Q(Q[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[7]_i_1__1_n_0 ),
        .Q(Q[7]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[8]_i_1__1_n_0 ),
        .Q(Q[8]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[9] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[9]_i_1__1_n_0 ),
        .Q(Q[9]),
        .R(wrst_busy));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[10]_i_2 
       (.I0(Q[10]),
        .I1(\gwdc.wr_data_count_i_reg[10] [10]),
        .O(\gwdc.wr_data_count_i[10]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[10]_i_3 
       (.I0(Q[9]),
        .I1(\gwdc.wr_data_count_i_reg[10] [9]),
        .O(\gwdc.wr_data_count_i[10]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[10]_i_4 
       (.I0(Q[8]),
        .I1(\gwdc.wr_data_count_i_reg[10] [8]),
        .O(\gwdc.wr_data_count_i[10]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_2 
       (.I0(Q[7]),
        .I1(\gwdc.wr_data_count_i_reg[10] [7]),
        .O(\gwdc.wr_data_count_i[7]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_3 
       (.I0(Q[6]),
        .I1(\gwdc.wr_data_count_i_reg[10] [6]),
        .O(\gwdc.wr_data_count_i[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_4 
       (.I0(Q[5]),
        .I1(\gwdc.wr_data_count_i_reg[10] [5]),
        .O(\gwdc.wr_data_count_i[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_5 
       (.I0(Q[4]),
        .I1(\gwdc.wr_data_count_i_reg[10] [4]),
        .O(\gwdc.wr_data_count_i[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_6 
       (.I0(Q[3]),
        .I1(\gwdc.wr_data_count_i_reg[10] [3]),
        .O(\gwdc.wr_data_count_i[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_7 
       (.I0(Q[2]),
        .I1(\gwdc.wr_data_count_i_reg[10] [2]),
        .O(\gwdc.wr_data_count_i[7]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_8 
       (.I0(Q[1]),
        .I1(\gwdc.wr_data_count_i_reg[10] [1]),
        .O(\gwdc.wr_data_count_i[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_9 
       (.I0(Q[0]),
        .I1(\gwdc.wr_data_count_i_reg[10] [0]),
        .O(\gwdc.wr_data_count_i[7]_i_9_n_0 ));
  CARRY8 \gwdc.wr_data_count_i_reg[10]_i_1 
       (.CI(\gwdc.wr_data_count_i_reg[7]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_gwdc.wr_data_count_i_reg[10]_i_1_CO_UNCONNECTED [7:2],\gwdc.wr_data_count_i_reg[10]_i_1_n_6 ,\gwdc.wr_data_count_i_reg[10]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,Q[9:8]}),
        .O({\NLW_gwdc.wr_data_count_i_reg[10]_i_1_O_UNCONNECTED [7:3],D[10:8]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,\gwdc.wr_data_count_i[10]_i_2_n_0 ,\gwdc.wr_data_count_i[10]_i_3_n_0 ,\gwdc.wr_data_count_i[10]_i_4_n_0 }));
  CARRY8 \gwdc.wr_data_count_i_reg[7]_i_1 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\gwdc.wr_data_count_i_reg[7]_i_1_n_0 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_1 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_2 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_3 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_4 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_5 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_6 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_7 }),
        .DI(Q[7:0]),
        .O(D[7:0]),
        .S({\gwdc.wr_data_count_i[7]_i_2_n_0 ,\gwdc.wr_data_count_i[7]_i_3_n_0 ,\gwdc.wr_data_count_i[7]_i_4_n_0 ,\gwdc.wr_data_count_i[7]_i_5_n_0 ,\gwdc.wr_data_count_i[7]_i_6_n_0 ,\gwdc.wr_data_count_i[7]_i_7_n_0 ,\gwdc.wr_data_count_i[7]_i_8_n_0 ,\gwdc.wr_data_count_i[7]_i_9_n_0 }));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized2
   (Q,
    \count_value_i_reg[0]_0 ,
    rd_en,
    \count_value_i_reg[5]_0 ,
    SR,
    rd_clk);
  output [9:0]Q;
  input \count_value_i_reg[0]_0 ;
  input rd_en;
  input \count_value_i_reg[5]_0 ;
  input [0:0]SR;
  input rd_clk;

  wire [9:0]Q;
  wire [0:0]SR;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1__3_n_0 ;
  wire \count_value_i[2]_i_1__3_n_0 ;
  wire \count_value_i[3]_i_1__3_n_0 ;
  wire \count_value_i[4]_i_1__3_n_0 ;
  wire \count_value_i[5]_i_1__3_n_0 ;
  wire \count_value_i[6]_i_1__3_n_0 ;
  wire \count_value_i[7]_i_1__3_n_0 ;
  wire \count_value_i[8]_i_1__3_n_0 ;
  wire \count_value_i[8]_i_2_n_0 ;
  wire \count_value_i[9]_i_1__3_n_0 ;
  wire \count_value_i[9]_i_2__3_n_0 ;
  wire \count_value_i_reg[0]_0 ;
  wire \count_value_i_reg[5]_0 ;
  wire rd_clk;
  wire rd_en;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__3 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1__3 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\count_value_i[4]_i_1__3_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[5]_i_1__3 
       (.I0(\count_value_i[8]_i_2_n_0 ),
        .I1(Q[4]),
        .I2(Q[5]),
        .O(\count_value_i[5]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[6]_i_1__3 
       (.I0(Q[4]),
        .I1(\count_value_i[8]_i_2_n_0 ),
        .I2(Q[5]),
        .I3(Q[6]),
        .O(\count_value_i[6]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[7]_i_1__3 
       (.I0(Q[5]),
        .I1(\count_value_i[8]_i_2_n_0 ),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[7]),
        .O(\count_value_i[7]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[8]_i_1__3 
       (.I0(Q[6]),
        .I1(Q[4]),
        .I2(\count_value_i[8]_i_2_n_0 ),
        .I3(Q[5]),
        .I4(Q[7]),
        .I5(Q[8]),
        .O(\count_value_i[8]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \count_value_i[8]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(rd_en),
        .I3(\count_value_i_reg[5]_0 ),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_value_i[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[9]_i_1__3 
       (.I0(Q[7]),
        .I1(Q[5]),
        .I2(\count_value_i[9]_i_2__3_n_0 ),
        .I3(Q[6]),
        .I4(Q[8]),
        .I5(Q[9]),
        .O(\count_value_i[9]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_value_i[9]_i_2__3 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(\count_value_i_reg[0]_0 ),
        .I4(Q[1]),
        .I5(Q[3]),
        .O(\count_value_i[9]_i_2__3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(Q[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[1]_i_1__3_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[2]_i_1__3_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[3]_i_1__3_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[4]_i_1__3_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[5]_i_1__3_n_0 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[6]_i_1__3_n_0 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[7]_i_1__3_n_0 ),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[8] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[8]_i_1__3_n_0 ),
        .Q(Q[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[9] 
       (.C(rd_clk),
        .CE(\count_value_i_reg[0]_0 ),
        .D(\count_value_i[9]_i_1__3_n_0 ),
        .Q(Q[9]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized2_25
   (Q,
    D,
    d_out_reg,
    \count_value_i_reg[2]_0 ,
    wrst_busy,
    rst_d1,
    \count_value_i_reg[6]_0 ,
    wr_en,
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ,
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 ,
    E,
    S,
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_1 ,
    rst,
    wr_clk);
  output [3:0]Q;
  output [8:0]D;
  output d_out_reg;
  input \count_value_i_reg[2]_0 ;
  input wrst_busy;
  input rst_d1;
  input \count_value_i_reg[6]_0 ;
  input wr_en;
  input \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  input [9:0]\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 ;
  input [0:0]E;
  input [0:0]S;
  input \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_1 ;
  input rst;
  input wr_clk;

  wire [8:0]D;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]S;
  wire \count_value_i[0]_i_1__3_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire \count_value_i[4]_i_1__0_n_0 ;
  wire \count_value_i[5]_i_1__0_n_0 ;
  wire \count_value_i[6]_i_1__0_n_0 ;
  wire \count_value_i[6]_i_2__0_n_0 ;
  wire \count_value_i[7]_i_1__0_n_0 ;
  wire \count_value_i[8]_i_1__0_n_0 ;
  wire \count_value_i[9]_i_1__0_n_0 ;
  wire \count_value_i[9]_i_2__0_n_0 ;
  wire \count_value_i_reg[2]_0 ;
  wire \count_value_i_reg[6]_0 ;
  wire d_out_reg;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_2_n_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_7_n_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  wire [9:0]\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_1 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[10]_i_3_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_2_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_3_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_4_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_5_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_6_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_7_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_8_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_9_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10]_i_1_n_7 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_1 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_2 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_3 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_4 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_5 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_6 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_7 ;
  wire rst;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire [6:1]wr_pntr_plus1_pf;
  wire wrst_busy;
  wire [7:1]\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10]_i_1_CO_UNCONNECTED ;
  wire [7:2]\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10]_i_1_O_UNCONNECTED ;
  wire [0:0]\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__3 
       (.I0(wr_pntr_plus1_pf[1]),
        .O(\count_value_i[0]_i_1__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(wr_pntr_plus1_pf[2]),
        .I1(wr_pntr_plus1_pf[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \count_value_i[2]_i_1__0 
       (.I0(wr_pntr_plus1_pf[3]),
        .I1(wr_pntr_plus1_pf[1]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(wr_pntr_plus1_pf[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \count_value_i[3]_i_1__0 
       (.I0(wr_pntr_plus1_pf[4]),
        .I1(wr_pntr_plus1_pf[2]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(wr_pntr_plus1_pf[1]),
        .I4(wr_pntr_plus1_pf[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \count_value_i[4]_i_1__0 
       (.I0(wr_pntr_plus1_pf[5]),
        .I1(wr_pntr_plus1_pf[3]),
        .I2(wr_pntr_plus1_pf[1]),
        .I3(\count_value_i_reg[2]_0 ),
        .I4(wr_pntr_plus1_pf[2]),
        .I5(wr_pntr_plus1_pf[4]),
        .O(\count_value_i[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \count_value_i[5]_i_1__0 
       (.I0(wr_pntr_plus1_pf[4]),
        .I1(\count_value_i[6]_i_2__0_n_0 ),
        .I2(wr_pntr_plus1_pf[3]),
        .I3(wr_pntr_plus1_pf[5]),
        .I4(wr_pntr_plus1_pf[6]),
        .O(\count_value_i[5]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \count_value_i[6]_i_1__0 
       (.I0(Q[0]),
        .I1(wr_pntr_plus1_pf[4]),
        .I2(\count_value_i[6]_i_2__0_n_0 ),
        .I3(wr_pntr_plus1_pf[3]),
        .I4(wr_pntr_plus1_pf[5]),
        .I5(wr_pntr_plus1_pf[6]),
        .O(\count_value_i[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \count_value_i[6]_i_2__0 
       (.I0(wr_pntr_plus1_pf[1]),
        .I1(wrst_busy),
        .I2(rst_d1),
        .I3(\count_value_i_reg[6]_0 ),
        .I4(wr_en),
        .I5(wr_pntr_plus1_pf[2]),
        .O(\count_value_i[6]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \count_value_i[7]_i_1__0 
       (.I0(Q[1]),
        .I1(wr_pntr_plus1_pf[6]),
        .I2(\count_value_i[9]_i_2__0_n_0 ),
        .I3(Q[0]),
        .O(\count_value_i[7]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \count_value_i[8]_i_1__0 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(\count_value_i[9]_i_2__0_n_0 ),
        .I3(wr_pntr_plus1_pf[6]),
        .I4(Q[1]),
        .O(\count_value_i[8]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \count_value_i[9]_i_1__0 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(wr_pntr_plus1_pf[6]),
        .I3(\count_value_i[9]_i_2__0_n_0 ),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_value_i[9]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    \count_value_i[9]_i_2__0 
       (.I0(wr_pntr_plus1_pf[4]),
        .I1(wr_pntr_plus1_pf[2]),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(wr_pntr_plus1_pf[1]),
        .I4(wr_pntr_plus1_pf[3]),
        .I5(wr_pntr_plus1_pf[5]),
        .O(\count_value_i[9]_i_2__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__3_n_0 ),
        .Q(wr_pntr_plus1_pf[1]),
        .S(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(wr_pntr_plus1_pf[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(wr_pntr_plus1_pf[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(wr_pntr_plus1_pf[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[4]_i_1__0_n_0 ),
        .Q(wr_pntr_plus1_pf[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[5]_i_1__0_n_0 ),
        .Q(wr_pntr_plus1_pf[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[6]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[7]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[8]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[9] 
       (.C(wr_clk),
        .CE(E),
        .D(\count_value_i[9]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(wrst_busy));
  LUT5 #(
    .INIT(32'hAE00AEAE)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_1 
       (.I0(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_2_n_0 ),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_1 ),
        .I2(\count_value_i_reg[2]_0 ),
        .I3(rst),
        .I4(rst_d1),
        .O(d_out_reg));
  LUT5 #(
    .INIT(32'h04000004)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_2 
       (.I0(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_5_n_0 ),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ),
        .I2(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_7_n_0 ),
        .I3(Q[3]),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [9]),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_5 
       (.I0(wr_pntr_plus1_pf[4]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [3]),
        .I2(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [5]),
        .I3(wr_pntr_plus1_pf[6]),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [4]),
        .I5(wr_pntr_plus1_pf[5]),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_7 
       (.I0(wr_pntr_plus1_pf[1]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [0]),
        .I2(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [2]),
        .I3(wr_pntr_plus1_pf[3]),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [1]),
        .I5(wr_pntr_plus1_pf[2]),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[10]_i_3 
       (.I0(Q[2]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [8]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[10]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_2 
       (.I0(Q[1]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [7]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_3 
       (.I0(Q[0]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [6]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_4 
       (.I0(wr_pntr_plus1_pf[6]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [5]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_5 
       (.I0(wr_pntr_plus1_pf[5]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [4]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_6 
       (.I0(wr_pntr_plus1_pf[4]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [3]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_7 
       (.I0(wr_pntr_plus1_pf[3]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [2]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_8 
       (.I0(wr_pntr_plus1_pf[2]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [1]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_9 
       (.I0(wr_pntr_plus1_pf[1]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 [0]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_9_n_0 ));
  CARRY8 \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10]_i_1 
       (.CI(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10]_i_1_CO_UNCONNECTED [7:1],\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,Q[2]}),
        .O({\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10]_i_1_O_UNCONNECTED [7:2],D[8:7]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,S,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[10]_i_3_n_0 }));
  CARRY8 \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1 
       (.CI(E),
        .CI_TOP(1'b0),
        .CO({\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_1 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_2 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_3 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_4 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_5 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_6 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_7 }),
        .DI({Q[1:0],wr_pntr_plus1_pf}),
        .O({D[6:0],\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_O_UNCONNECTED [0]}),
        .S({\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_2_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_3_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_4_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_5_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_6_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_7_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_8_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_9_n_0 }));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized3
   (going_afull,
    Q,
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ,
    wr_pntr_plus1_pf_carry,
    wr_en,
    \count_value_i_reg[6]_0 ,
    wrst_busy,
    rst_d1,
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 ,
    wr_clk);
  output going_afull;
  output [1:0]Q;
  input \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ;
  input wr_pntr_plus1_pf_carry;
  input wr_en;
  input \count_value_i_reg[6]_0 ;
  input wrst_busy;
  input rst_d1;
  input [5:0]\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 ;
  input wr_clk;

  wire [1:0]Q;
  wire [5:0]count_value_i;
  wire \count_value_i[0]_i_1__2_n_0 ;
  wire \count_value_i[1]_i_1__2_n_0 ;
  wire \count_value_i[2]_i_1__2_n_0 ;
  wire \count_value_i[3]_i_1__2_n_0 ;
  wire \count_value_i[4]_i_1__2_n_0 ;
  wire \count_value_i[5]_i_1__2_n_0 ;
  wire \count_value_i[6]_i_1__2_n_0 ;
  wire \count_value_i[6]_i_2__2_n_0 ;
  wire \count_value_i[7]_i_1__2_n_0 ;
  wire \count_value_i[7]_i_2__1_n_0 ;
  wire \count_value_i_reg[6]_0 ;
  wire [5:0]\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_3_n_0 ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_4_n_0 ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ;
  wire going_afull;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire wr_pntr_plus1_pf_carry;
  wire wrst_busy;

  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__2 
       (.I0(count_value_i[0]),
        .O(\count_value_i[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__2 
       (.I0(count_value_i[0]),
        .I1(count_value_i[1]),
        .O(\count_value_i[1]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__2 
       (.I0(count_value_i[0]),
        .I1(count_value_i[1]),
        .I2(count_value_i[2]),
        .O(\count_value_i[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__2 
       (.I0(count_value_i[1]),
        .I1(count_value_i[0]),
        .I2(count_value_i[2]),
        .I3(count_value_i[3]),
        .O(\count_value_i[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1__2 
       (.I0(count_value_i[2]),
        .I1(count_value_i[0]),
        .I2(count_value_i[1]),
        .I3(count_value_i[3]),
        .I4(count_value_i[4]),
        .O(\count_value_i[4]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[5]_i_1__2 
       (.I0(count_value_i[3]),
        .I1(\count_value_i[6]_i_2__2_n_0 ),
        .I2(count_value_i[2]),
        .I3(count_value_i[4]),
        .I4(count_value_i[5]),
        .O(\count_value_i[5]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[6]_i_1__2 
       (.I0(count_value_i[4]),
        .I1(count_value_i[2]),
        .I2(\count_value_i[6]_i_2__2_n_0 ),
        .I3(count_value_i[3]),
        .I4(count_value_i[5]),
        .I5(Q[0]),
        .O(\count_value_i[6]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000800000000)) 
    \count_value_i[6]_i_2__2 
       (.I0(count_value_i[1]),
        .I1(wr_en),
        .I2(\count_value_i_reg[6]_0 ),
        .I3(wrst_busy),
        .I4(rst_d1),
        .I5(count_value_i[0]),
        .O(\count_value_i[6]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[7]_i_1__2 
       (.I0(count_value_i[5]),
        .I1(\count_value_i[7]_i_2__1_n_0 ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(\count_value_i[7]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_value_i[7]_i_2__1 
       (.I0(count_value_i[4]),
        .I1(count_value_i[2]),
        .I2(count_value_i[0]),
        .I3(wr_pntr_plus1_pf_carry),
        .I4(count_value_i[1]),
        .I5(count_value_i[3]),
        .O(\count_value_i[7]_i_2__1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[0]_i_1__2_n_0 ),
        .Q(count_value_i[0]),
        .S(wrst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[1]_i_1__2_n_0 ),
        .Q(count_value_i[1]),
        .S(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[2]_i_1__2_n_0 ),
        .Q(count_value_i[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[3]_i_1__2_n_0 ),
        .Q(count_value_i[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[4]_i_1__2_n_0 ),
        .Q(count_value_i[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[5]_i_1__2_n_0 ),
        .Q(count_value_i[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[6]_i_1__2_n_0 ),
        .Q(Q[0]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[7]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(wrst_busy));
  LUT4 #(
    .INIT(16'h0800)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2 
       (.I0(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_3_n_0 ),
        .I1(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_4_n_0 ),
        .I2(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ),
        .I3(wr_pntr_plus1_pf_carry),
        .O(going_afull));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_3 
       (.I0(count_value_i[2]),
        .I1(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 [2]),
        .I2(count_value_i[1]),
        .I3(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 [1]),
        .I4(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 [0]),
        .I5(count_value_i[0]),
        .O(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_4 
       (.I0(count_value_i[5]),
        .I1(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 [5]),
        .I2(count_value_i[4]),
        .I3(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 [4]),
        .I4(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 [3]),
        .I5(count_value_i[3]),
        .O(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_4_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized4
   (Q,
    rd_en,
    \count_value_i_reg[5]_0 ,
    SR,
    E,
    rd_clk);
  output [7:0]Q;
  input rd_en;
  input \count_value_i_reg[5]_0 ;
  input [0:0]SR;
  input [0:0]E;
  input rd_clk;

  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire \count_value_i[0]_i_1__4_n_0 ;
  wire \count_value_i[1]_i_1__5_n_0 ;
  wire \count_value_i[2]_i_1__5_n_0 ;
  wire \count_value_i[3]_i_1__5_n_0 ;
  wire \count_value_i[4]_i_1__5_n_0 ;
  wire \count_value_i[5]_i_1__5_n_0 ;
  wire \count_value_i[6]_i_1__5_n_0 ;
  wire \count_value_i[7]_i_1__5_n_0 ;
  wire \count_value_i[7]_i_2__3_n_0 ;
  wire \count_value_i_reg[5]_0 ;
  wire rd_clk;
  wire rd_en;

  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__4 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__5 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__5 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__5 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1__5 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\count_value_i[4]_i_1__5_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[5]_i_1__5 
       (.I0(\count_value_i[7]_i_2__3_n_0 ),
        .I1(Q[4]),
        .I2(Q[5]),
        .O(\count_value_i[5]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[6]_i_1__5 
       (.I0(Q[4]),
        .I1(\count_value_i[7]_i_2__3_n_0 ),
        .I2(Q[5]),
        .I3(Q[6]),
        .O(\count_value_i[6]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[7]_i_1__5 
       (.I0(Q[5]),
        .I1(\count_value_i[7]_i_2__3_n_0 ),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[7]),
        .O(\count_value_i[7]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \count_value_i[7]_i_2__3 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(rd_en),
        .I3(\count_value_i_reg[5]_0 ),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_value_i[7]_i_2__3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__4_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__5_n_0 ),
        .Q(Q[1]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__5_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__5_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[4]_i_1__5_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[5]_i_1__5_n_0 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[6]_i_1__5_n_0 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[7]_i_1__5_n_0 ),
        .Q(Q[7]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized4_32
   (\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ,
    leaving_afull,
    going_afull,
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ,
    rst,
    clr_full,
    almost_full,
    wr_pntr_plus1_pf_carry,
    wr_en,
    wrst_busy,
    rst_d1,
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 ,
    wr_clk);
  output \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  output leaving_afull;
  input going_afull;
  input \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ;
  input rst;
  input clr_full;
  input almost_full;
  input wr_pntr_plus1_pf_carry;
  input wr_en;
  input wrst_busy;
  input rst_d1;
  input [7:0]\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 ;
  input wr_clk;

  wire almost_full;
  wire clr_full;
  wire \count_value_i[0]_i_1_n_0 ;
  wire \count_value_i[1]_i_1_n_0 ;
  wire \count_value_i[2]_i_1_n_0 ;
  wire \count_value_i[3]_i_1_n_0 ;
  wire \count_value_i[4]_i_1_n_0 ;
  wire \count_value_i[5]_i_1_n_0 ;
  wire \count_value_i[6]_i_1_n_0 ;
  wire \count_value_i[6]_i_2_n_0 ;
  wire \count_value_i[7]_i_1_n_0 ;
  wire \count_value_i[7]_i_2_n_0 ;
  wire \count_value_i_reg_n_0_[0] ;
  wire \count_value_i_reg_n_0_[1] ;
  wire \count_value_i_reg_n_0_[2] ;
  wire \count_value_i_reg_n_0_[3] ;
  wire \count_value_i_reg_n_0_[4] ;
  wire \count_value_i_reg_n_0_[5] ;
  wire \count_value_i_reg_n_0_[6] ;
  wire \count_value_i_reg_n_0_[7] ;
  wire \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ;
  wire [7:0]\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_6_n_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_7_n_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  wire going_afull;
  wire leaving_afull;
  wire rst;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire wr_pntr_plus1_pf_carry;
  wire wrst_busy;

  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1 
       (.I0(\count_value_i_reg_n_0_[0] ),
        .O(\count_value_i[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1 
       (.I0(\count_value_i_reg_n_0_[0] ),
        .I1(\count_value_i_reg_n_0_[1] ),
        .O(\count_value_i[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1 
       (.I0(\count_value_i_reg_n_0_[0] ),
        .I1(\count_value_i_reg_n_0_[1] ),
        .I2(\count_value_i_reg_n_0_[2] ),
        .O(\count_value_i[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1 
       (.I0(\count_value_i_reg_n_0_[1] ),
        .I1(\count_value_i_reg_n_0_[0] ),
        .I2(\count_value_i_reg_n_0_[2] ),
        .I3(\count_value_i_reg_n_0_[3] ),
        .O(\count_value_i[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1 
       (.I0(\count_value_i_reg_n_0_[2] ),
        .I1(\count_value_i_reg_n_0_[0] ),
        .I2(\count_value_i_reg_n_0_[1] ),
        .I3(\count_value_i_reg_n_0_[3] ),
        .I4(\count_value_i_reg_n_0_[4] ),
        .O(\count_value_i[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[5]_i_1 
       (.I0(\count_value_i_reg_n_0_[3] ),
        .I1(\count_value_i[6]_i_2_n_0 ),
        .I2(\count_value_i_reg_n_0_[2] ),
        .I3(\count_value_i_reg_n_0_[4] ),
        .I4(\count_value_i_reg_n_0_[5] ),
        .O(\count_value_i[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[6]_i_1 
       (.I0(\count_value_i_reg_n_0_[4] ),
        .I1(\count_value_i_reg_n_0_[2] ),
        .I2(\count_value_i[6]_i_2_n_0 ),
        .I3(\count_value_i_reg_n_0_[3] ),
        .I4(\count_value_i_reg_n_0_[5] ),
        .I5(\count_value_i_reg_n_0_[6] ),
        .O(\count_value_i[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000800000000)) 
    \count_value_i[6]_i_2 
       (.I0(\count_value_i_reg_n_0_[1] ),
        .I1(wr_en),
        .I2(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ),
        .I3(wrst_busy),
        .I4(rst_d1),
        .I5(\count_value_i_reg_n_0_[0] ),
        .O(\count_value_i[6]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[7]_i_1 
       (.I0(\count_value_i_reg_n_0_[5] ),
        .I1(\count_value_i[7]_i_2_n_0 ),
        .I2(\count_value_i_reg_n_0_[6] ),
        .I3(\count_value_i_reg_n_0_[7] ),
        .O(\count_value_i[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_value_i[7]_i_2 
       (.I0(\count_value_i_reg_n_0_[4] ),
        .I1(\count_value_i_reg_n_0_[2] ),
        .I2(\count_value_i_reg_n_0_[0] ),
        .I3(wr_pntr_plus1_pf_carry),
        .I4(\count_value_i_reg_n_0_[1] ),
        .I5(\count_value_i_reg_n_0_[3] ),
        .O(\count_value_i[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[0]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[0] ),
        .R(wrst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[1]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[1] ),
        .S(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[2]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[2] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[3]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[3] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[4]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[4] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[5]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[5] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[6]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[6] ),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[7]_i_1_n_0 ),
        .Q(\count_value_i_reg_n_0_[7] ),
        .R(wrst_busy));
  LUT6 #(
    .INIT(64'hFF00FFFE0000000E)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_1 
       (.I0(leaving_afull),
        .I1(going_afull),
        .I2(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg ),
        .I3(rst),
        .I4(clr_full),
        .I5(almost_full),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_3 
       (.I0(\count_value_i_reg_n_0_[7] ),
        .I1(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 [7]),
        .I2(\count_value_i_reg_n_0_[6] ),
        .I3(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 [6]),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_6_n_0 ),
        .I5(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_7_n_0 ),
        .O(leaving_afull));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_6 
       (.I0(\count_value_i_reg_n_0_[5] ),
        .I1(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 [5]),
        .I2(\count_value_i_reg_n_0_[4] ),
        .I3(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 [4]),
        .I4(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 [3]),
        .I5(\count_value_i_reg_n_0_[3] ),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_7 
       (.I0(\count_value_i_reg_n_0_[2] ),
        .I1(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 [2]),
        .I2(\count_value_i_reg_n_0_[1] ),
        .I3(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 [1]),
        .I4(\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 [0]),
        .I5(\count_value_i_reg_n_0_[0] ),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_7_n_0 ));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized5
   (Q,
    D,
    E,
    rd_en,
    \count_value_i_reg[0]_0 ,
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] ,
    DI,
    SR,
    rd_clk);
  output [8:0]Q;
  output [7:0]D;
  output [0:0]E;
  input rd_en;
  input \count_value_i_reg[0]_0 ;
  input [7:0]\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] ;
  input [0:0]DI;
  input [0:0]SR;
  input rd_clk;

  wire [7:0]D;
  wire [0:0]DI;
  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SR;
  wire \count_value_i[0]_i_1__5_n_0 ;
  wire \count_value_i[1]_i_1__4_n_0 ;
  wire \count_value_i[2]_i_1__4_n_0 ;
  wire \count_value_i[3]_i_1__4_n_0 ;
  wire \count_value_i[4]_i_1__4_n_0 ;
  wire \count_value_i[5]_i_1__4_n_0 ;
  wire \count_value_i[6]_i_1__4_n_0 ;
  wire \count_value_i[7]_i_1__4_n_0 ;
  wire \count_value_i[8]_i_1__0_n_0 ;
  wire \count_value_i[8]_i_2__0_n_0 ;
  wire \count_value_i_reg[0]_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_10_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_3_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_4_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_5_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_6_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_7_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_8_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_9_n_0 ;
  wire [7:0]\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_1 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_2 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_3 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_4 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_5 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_6 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_7 ;
  wire rd_clk;
  wire rd_en;
  wire [7:7]\NLW_gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_CO_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \count_value_i[0]_i_1__5 
       (.I0(\count_value_i_reg[0]_0 ),
        .I1(rd_en),
        .I2(Q[0]),
        .O(\count_value_i[0]_i_1__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__4 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1__4 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\count_value_i[4]_i_1__4_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[5]_i_1__4 
       (.I0(\count_value_i[8]_i_2__0_n_0 ),
        .I1(Q[4]),
        .I2(Q[5]),
        .O(\count_value_i[5]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[6]_i_1__4 
       (.I0(Q[4]),
        .I1(\count_value_i[8]_i_2__0_n_0 ),
        .I2(Q[5]),
        .I3(Q[6]),
        .O(\count_value_i[6]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[7]_i_1__4 
       (.I0(Q[5]),
        .I1(\count_value_i[8]_i_2__0_n_0 ),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[7]),
        .O(\count_value_i[7]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[8]_i_1__0 
       (.I0(Q[6]),
        .I1(Q[4]),
        .I2(\count_value_i[8]_i_2__0_n_0 ),
        .I3(Q[5]),
        .I4(Q[7]),
        .I5(Q[8]),
        .O(\count_value_i[8]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \count_value_i[8]_i_2__0 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(rd_en),
        .I3(\count_value_i_reg[0]_0 ),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_value_i[8]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__5_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__4_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__4_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__4_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[4]_i_1__4_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[5]_i_1__4_n_0 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[6]_i_1__4_n_0 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[7]_i_1__4_n_0 ),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[8]_i_1__0_n_0 ),
        .Q(Q[8]),
        .R(SR));
  LUT3 #(
    .INIT(8'hB4)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_10 
       (.I0(\count_value_i_reg[0]_0 ),
        .I1(rd_en),
        .I2(Q[0]),
        .O(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_3 
       (.I0(Q[7]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] [7]),
        .O(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_4 
       (.I0(Q[6]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] [6]),
        .O(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_5 
       (.I0(Q[5]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] [5]),
        .O(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_6 
       (.I0(Q[4]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] [4]),
        .O(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_7 
       (.I0(Q[3]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] [3]),
        .O(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_8 
       (.I0(Q[2]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] [2]),
        .O(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_9 
       (.I0(Q[1]),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] [1]),
        .O(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_9_n_0 ));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1 
       (.CI(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] [0]),
        .CI_TOP(1'b0),
        .CO({\NLW_gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_CO_UNCONNECTED [7],\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_1 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_2 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_3 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_4 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_5 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_6 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_7 }),
        .DI({1'b0,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] [6:1],DI}),
        .O(D),
        .S({\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_3_n_0 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_4_n_0 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_5_n_0 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_6_n_0 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_7_n_0 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_8_n_0 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_9_n_0 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_10_n_0 }));
  LUT2 #(
    .INIT(4'h2)) 
    \gen_sdpram.xpm_memory_base_inst_i_2 
       (.I0(rd_en),
        .I1(\count_value_i_reg[0]_0 ),
        .O(E));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized5_30
   (Q,
    D,
    wr_pntr_plus1_pf_carry,
    wr_en,
    \count_value_i_reg[6]_0 ,
    wrst_busy,
    rst_d1,
    \gwdc.wr_data_count_i_reg[8] ,
    wr_clk);
  output [8:0]Q;
  output [8:0]D;
  input wr_pntr_plus1_pf_carry;
  input wr_en;
  input \count_value_i_reg[6]_0 ;
  input wrst_busy;
  input rst_d1;
  input [8:0]\gwdc.wr_data_count_i_reg[8] ;
  input wr_clk;

  wire [8:0]D;
  wire [8:0]Q;
  wire \count_value_i[0]_i_1__1_n_0 ;
  wire \count_value_i[1]_i_1__1_n_0 ;
  wire \count_value_i[2]_i_1__1_n_0 ;
  wire \count_value_i[3]_i_1__1_n_0 ;
  wire \count_value_i[4]_i_1__1_n_0 ;
  wire \count_value_i[5]_i_1__1_n_0 ;
  wire \count_value_i[6]_i_1__1_n_0 ;
  wire \count_value_i[6]_i_2__1_n_0 ;
  wire \count_value_i[7]_i_1__1_n_0 ;
  wire \count_value_i[8]_i_1_n_0 ;
  wire \count_value_i[8]_i_2_n_0 ;
  wire \count_value_i_reg[6]_0 ;
  wire \gwdc.wr_data_count_i[7]_i_2_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_3_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_4_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_5_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_6_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_7_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_8_n_0 ;
  wire \gwdc.wr_data_count_i[7]_i_9_n_0 ;
  wire \gwdc.wr_data_count_i[8]_i_2_n_0 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_0 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_1 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_2 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_3 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_4 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_5 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_6 ;
  wire \gwdc.wr_data_count_i_reg[7]_i_1_n_7 ;
  wire [8:0]\gwdc.wr_data_count_i_reg[8] ;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire wr_pntr_plus1_pf_carry;
  wire wrst_busy;
  wire [7:0]\NLW_gwdc.wr_data_count_i_reg[8]_i_1_CO_UNCONNECTED ;
  wire [7:1]\NLW_gwdc.wr_data_count_i_reg[8]_i_1_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__1 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1__1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\count_value_i[4]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[5]_i_1__1 
       (.I0(Q[3]),
        .I1(\count_value_i[6]_i_2__1_n_0 ),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[5]),
        .O(\count_value_i[5]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[6]_i_1__1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(\count_value_i[6]_i_2__1_n_0 ),
        .I3(Q[3]),
        .I4(Q[5]),
        .I5(Q[6]),
        .O(\count_value_i[6]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000800000000)) 
    \count_value_i[6]_i_2__1 
       (.I0(Q[1]),
        .I1(wr_en),
        .I2(\count_value_i_reg[6]_0 ),
        .I3(wrst_busy),
        .I4(rst_d1),
        .I5(Q[0]),
        .O(\count_value_i[6]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[7]_i_1__1 
       (.I0(Q[5]),
        .I1(\count_value_i[8]_i_2_n_0 ),
        .I2(Q[6]),
        .I3(Q[7]),
        .O(\count_value_i[7]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[8]_i_1 
       (.I0(Q[6]),
        .I1(\count_value_i[8]_i_2_n_0 ),
        .I2(Q[5]),
        .I3(Q[7]),
        .I4(Q[8]),
        .O(\count_value_i[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_value_i[8]_i_2 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(wr_pntr_plus1_pf_carry),
        .I4(Q[1]),
        .I5(Q[3]),
        .O(\count_value_i[8]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[4]_i_1__1_n_0 ),
        .Q(Q[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[5]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[6]_i_1__1_n_0 ),
        .Q(Q[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[7]_i_1__1_n_0 ),
        .Q(Q[7]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[8] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[8]_i_1_n_0 ),
        .Q(Q[8]),
        .R(wrst_busy));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_2 
       (.I0(Q[7]),
        .I1(\gwdc.wr_data_count_i_reg[8] [7]),
        .O(\gwdc.wr_data_count_i[7]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_3 
       (.I0(Q[6]),
        .I1(\gwdc.wr_data_count_i_reg[8] [6]),
        .O(\gwdc.wr_data_count_i[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_4 
       (.I0(Q[5]),
        .I1(\gwdc.wr_data_count_i_reg[8] [5]),
        .O(\gwdc.wr_data_count_i[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_5 
       (.I0(Q[4]),
        .I1(\gwdc.wr_data_count_i_reg[8] [4]),
        .O(\gwdc.wr_data_count_i[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_6 
       (.I0(Q[3]),
        .I1(\gwdc.wr_data_count_i_reg[8] [3]),
        .O(\gwdc.wr_data_count_i[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_7 
       (.I0(Q[2]),
        .I1(\gwdc.wr_data_count_i_reg[8] [2]),
        .O(\gwdc.wr_data_count_i[7]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_8 
       (.I0(Q[1]),
        .I1(\gwdc.wr_data_count_i_reg[8] [1]),
        .O(\gwdc.wr_data_count_i[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[7]_i_9 
       (.I0(Q[0]),
        .I1(\gwdc.wr_data_count_i_reg[8] [0]),
        .O(\gwdc.wr_data_count_i[7]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gwdc.wr_data_count_i[8]_i_2 
       (.I0(Q[8]),
        .I1(\gwdc.wr_data_count_i_reg[8] [8]),
        .O(\gwdc.wr_data_count_i[8]_i_2_n_0 ));
  CARRY8 \gwdc.wr_data_count_i_reg[7]_i_1 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\gwdc.wr_data_count_i_reg[7]_i_1_n_0 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_1 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_2 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_3 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_4 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_5 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_6 ,\gwdc.wr_data_count_i_reg[7]_i_1_n_7 }),
        .DI(Q[7:0]),
        .O(D[7:0]),
        .S({\gwdc.wr_data_count_i[7]_i_2_n_0 ,\gwdc.wr_data_count_i[7]_i_3_n_0 ,\gwdc.wr_data_count_i[7]_i_4_n_0 ,\gwdc.wr_data_count_i[7]_i_5_n_0 ,\gwdc.wr_data_count_i[7]_i_6_n_0 ,\gwdc.wr_data_count_i[7]_i_7_n_0 ,\gwdc.wr_data_count_i[7]_i_8_n_0 ,\gwdc.wr_data_count_i[7]_i_9_n_0 }));
  CARRY8 \gwdc.wr_data_count_i_reg[8]_i_1 
       (.CI(\gwdc.wr_data_count_i_reg[7]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO(\NLW_gwdc.wr_data_count_i_reg[8]_i_1_CO_UNCONNECTED [7:0]),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_gwdc.wr_data_count_i_reg[8]_i_1_O_UNCONNECTED [7:1],D[8]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\gwdc.wr_data_count_i[8]_i_2_n_0 }));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized6
   (Q,
    rd_en,
    \count_value_i_reg[5]_0 ,
    SR,
    E,
    rd_clk);
  output [7:0]Q;
  input rd_en;
  input \count_value_i_reg[5]_0 ;
  input [0:0]SR;
  input [0:0]E;
  input rd_clk;

  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SR;
  wire \count_value_i[0]_i_1__3_n_0 ;
  wire \count_value_i[1]_i_1__3_n_0 ;
  wire \count_value_i[2]_i_1__3_n_0 ;
  wire \count_value_i[3]_i_1__3_n_0 ;
  wire \count_value_i[4]_i_1__3_n_0 ;
  wire \count_value_i[5]_i_1__3_n_0 ;
  wire \count_value_i[6]_i_1__3_n_0 ;
  wire \count_value_i[7]_i_1__3_n_0 ;
  wire \count_value_i[7]_i_2__2_n_0 ;
  wire \count_value_i_reg[5]_0 ;
  wire rd_clk;
  wire rd_en;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__3 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__3 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1__3 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\count_value_i[4]_i_1__3_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[5]_i_1__3 
       (.I0(\count_value_i[7]_i_2__2_n_0 ),
        .I1(Q[4]),
        .I2(Q[5]),
        .O(\count_value_i[5]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[6]_i_1__3 
       (.I0(Q[4]),
        .I1(\count_value_i[7]_i_2__2_n_0 ),
        .I2(Q[5]),
        .I3(Q[6]),
        .O(\count_value_i[6]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[7]_i_1__3 
       (.I0(Q[5]),
        .I1(\count_value_i[7]_i_2__2_n_0 ),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[7]),
        .O(\count_value_i[7]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \count_value_i[7]_i_2__2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(rd_en),
        .I3(\count_value_i_reg[5]_0 ),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\count_value_i[7]_i_2__2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[0]_i_1__3_n_0 ),
        .Q(Q[0]),
        .S(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[1]_i_1__3_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[2]_i_1__3_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[3]_i_1__3_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[4]_i_1__3_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[5]_i_1__3_n_0 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[6]_i_1__3_n_0 ),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .D(\count_value_i[7]_i_1__3_n_0 ),
        .Q(Q[7]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "xpm_counter_updn" *) 
module semicap_xpm_counter_updn__parameterized6_31
   (Q,
    d_out_reg,
    wr_pntr_plus1_pf_carry,
    wr_en,
    \count_value_i_reg[6]_0 ,
    wrst_busy,
    rst_d1,
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ,
    leaving_afull,
    rst,
    wr_clk);
  output [7:0]Q;
  output d_out_reg;
  input wr_pntr_plus1_pf_carry;
  input wr_en;
  input \count_value_i_reg[6]_0 ;
  input wrst_busy;
  input rst_d1;
  input [7:0]\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  input leaving_afull;
  input rst;
  input wr_clk;

  wire [7:0]Q;
  wire \count_value_i[0]_i_1__0_n_0 ;
  wire \count_value_i[1]_i_1__0_n_0 ;
  wire \count_value_i[2]_i_1__0_n_0 ;
  wire \count_value_i[3]_i_1__0_n_0 ;
  wire \count_value_i[4]_i_1__0_n_0 ;
  wire \count_value_i[5]_i_1__0_n_0 ;
  wire \count_value_i[6]_i_1__0_n_0 ;
  wire \count_value_i[6]_i_2__0_n_0 ;
  wire \count_value_i[7]_i_1__0_n_0 ;
  wire \count_value_i[7]_i_2__0_n_0 ;
  wire \count_value_i_reg[6]_0 ;
  wire d_out_reg;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_4_n_0 ;
  wire \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_5_n_0 ;
  wire [7:0]\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg ;
  wire leaving_afull;
  wire leaving_full;
  wire rst;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire wr_pntr_plus1_pf_carry;
  wire wrst_busy;

  LUT1 #(
    .INIT(2'h1)) 
    \count_value_i[0]_i_1__0 
       (.I0(Q[0]),
        .O(\count_value_i[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \count_value_i[1]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count_value_i[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \count_value_i[2]_i_1__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\count_value_i[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[3]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(\count_value_i[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[4]_i_1__0 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\count_value_i[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \count_value_i[5]_i_1__0 
       (.I0(Q[3]),
        .I1(\count_value_i[6]_i_2__0_n_0 ),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[5]),
        .O(\count_value_i[5]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \count_value_i[6]_i_1__0 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(\count_value_i[6]_i_2__0_n_0 ),
        .I3(Q[3]),
        .I4(Q[5]),
        .I5(Q[6]),
        .O(\count_value_i[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000800000000)) 
    \count_value_i[6]_i_2__0 
       (.I0(Q[1]),
        .I1(wr_en),
        .I2(\count_value_i_reg[6]_0 ),
        .I3(wrst_busy),
        .I4(rst_d1),
        .I5(Q[0]),
        .O(\count_value_i[6]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h7F80)) 
    \count_value_i[7]_i_1__0 
       (.I0(Q[5]),
        .I1(\count_value_i[7]_i_2__0_n_0 ),
        .I2(Q[6]),
        .I3(Q[7]),
        .O(\count_value_i[7]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \count_value_i[7]_i_2__0 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(wr_pntr_plus1_pf_carry),
        .I4(Q[1]),
        .I5(Q[3]),
        .O(\count_value_i[7]_i_2__0_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \count_value_i_reg[0] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .S(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[1] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[2] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[3] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[4] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[4]_i_1__0_n_0 ),
        .Q(Q[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[5] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[5]_i_1__0_n_0 ),
        .Q(Q[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[6] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[6]_i_1__0_n_0 ),
        .Q(Q[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \count_value_i_reg[7] 
       (.C(wr_clk),
        .CE(wr_pntr_plus1_pf_carry),
        .D(\count_value_i[7]_i_1__0_n_0 ),
        .Q(Q[7]),
        .R(wrst_busy));
  LUT5 #(
    .INIT(32'hEAEA00EA)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_1 
       (.I0(leaving_full),
        .I1(leaving_afull),
        .I2(wr_pntr_plus1_pf_carry),
        .I3(rst_d1),
        .I4(rst),
        .O(d_out_reg));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_2 
       (.I0(Q[7]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg [7]),
        .I2(Q[6]),
        .I3(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg [6]),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_4_n_0 ),
        .I5(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_5_n_0 ),
        .O(leaving_full));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_4 
       (.I0(Q[5]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg [5]),
        .I2(Q[4]),
        .I3(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg [4]),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg [3]),
        .I5(Q[3]),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_5 
       (.I0(Q[2]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg [2]),
        .I2(Q[1]),
        .I3(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg [1]),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg [0]),
        .I5(Q[0]),
        .O(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_5_n_0 ));
endmodule

(* CDC_SYNC_STAGES = "4" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_ASYNC = "16'b0001111100011111" *) (* FIFO_MEMORY_TYPE = "block" *) (* FIFO_READ_LATENCY = "1" *) 
(* FIFO_WRITE_DEPTH = "1024" *) (* FULL_RESET_VALUE = "1" *) (* ORIG_REF_NAME = "xpm_fifo_async" *) 
(* PROG_EMPTY_THRESH = "10" *) (* PROG_FULL_THRESH = "10" *) (* P_COMMON_CLOCK = "0" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "2" *) (* P_READ_MODE = "0" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "11" *) (* READ_DATA_WIDTH = "32" *) 
(* READ_MODE = "std" *) (* RELATED_CLOCKS = "0" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_ADV_FEATURES = "1F1F" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "32" *) 
(* WR_DATA_COUNT_WIDTH = "11" *) (* XPM_MODULE = "TRUE" *) 
module semicap_xpm_fifo_async
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [31:0]din;
  output full;
  output prog_full;
  output [10:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [31:0]dout;
  output empty;
  output prog_empty;
  output [10:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire almost_empty;
  wire almost_full;
  wire data_valid;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire overflow;
  wire prog_empty;
  wire prog_full;
  wire rd_clk;
  wire [10:0]rd_data_count;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire sleep;
  wire underflow;
  wire wr_ack;
  wire wr_clk;
  wire [10:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;
  wire \NLW_gnuram_async_fifo.xpm_fifo_base_inst_dbiterr_UNCONNECTED ;
  wire \NLW_gnuram_async_fifo.xpm_fifo_base_inst_full_n_UNCONNECTED ;
  wire \NLW_gnuram_async_fifo.xpm_fifo_base_inst_sbiterr_UNCONNECTED ;

  assign dbiterr = \<const0> ;
  assign sbiterr = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CDC_DEST_SYNC_FF = "4" *) 
  (* COMMON_CLOCK = "0" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0001111100011111" *) 
  (* EN_AE = "1'b1" *) 
  (* EN_AF = "1'b1" *) 
  (* EN_DVLD = "1'b1" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b1" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "2" *) 
  (* FIFO_MEM_TYPE = "2" *) 
  (* FIFO_READ_DEPTH = "1024" *) 
  (* FIFO_READ_LATENCY = "1" *) 
  (* FIFO_SIZE = "32768" *) 
  (* FIFO_WRITE_DEPTH = "1024" *) 
  (* FULL_RESET_VALUE = "1" *) 
  (* FULL_RST_VAL = "1'b1" *) 
  (* PE_THRESH_ADJ = "10" *) 
  (* PE_THRESH_MAX = "1021" *) 
  (* PE_THRESH_MIN = "3" *) 
  (* PF_THRESH_ADJ = "10" *) 
  (* PF_THRESH_MAX = "1021" *) 
  (* PF_THRESH_MIN = "7" *) 
  (* PROG_EMPTY_THRESH = "10" *) 
  (* PROG_FULL_THRESH = "10" *) 
  (* RD_DATA_COUNT_WIDTH = "11" *) 
  (* RD_DC_WIDTH_EXT = "11" *) 
  (* RD_LATENCY = "1" *) 
  (* RD_MODE = "0" *) 
  (* RD_PNTR_WIDTH = "10" *) 
  (* READ_DATA_WIDTH = "32" *) 
  (* READ_MODE = "0" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "1F1F" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "32" *) 
  (* WR_DATA_COUNT_WIDTH = "11" *) 
  (* WR_DC_WIDTH_EXT = "11" *) 
  (* WR_DEPTH_LOG = "10" *) 
  (* WR_PNTR_WIDTH = "10" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "5" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  semicap_xpm_fifo_base \gnuram_async_fifo.xpm_fifo_base_inst 
       (.almost_empty(almost_empty),
        .almost_full(almost_full),
        .data_valid(data_valid),
        .dbiterr(\NLW_gnuram_async_fifo.xpm_fifo_base_inst_dbiterr_UNCONNECTED ),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(\NLW_gnuram_async_fifo.xpm_fifo_base_inst_full_n_UNCONNECTED ),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(overflow),
        .prog_empty(prog_empty),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .rst(rst),
        .sbiterr(\NLW_gnuram_async_fifo.xpm_fifo_base_inst_sbiterr_UNCONNECTED ),
        .sleep(sleep),
        .underflow(underflow),
        .wr_ack(wr_ack),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CDC_SYNC_STAGES = "4" *) (* DOUT_RESET_VALUE = "0" *) (* ECC_MODE = "no_ecc" *) 
(* EN_ADV_FEATURE_ASYNC = "16'b0001111100011111" *) (* FIFO_MEMORY_TYPE = "block" *) (* FIFO_READ_LATENCY = "1" *) 
(* FIFO_WRITE_DEPTH = "256" *) (* FULL_RESET_VALUE = "1" *) (* ORIG_REF_NAME = "xpm_fifo_async" *) 
(* PROG_EMPTY_THRESH = "10" *) (* PROG_FULL_THRESH = "10" *) (* P_COMMON_CLOCK = "0" *) 
(* P_ECC_MODE = "0" *) (* P_FIFO_MEMORY_TYPE = "2" *) (* P_READ_MODE = "0" *) 
(* P_WAKEUP_TIME = "2" *) (* RD_DATA_COUNT_WIDTH = "9" *) (* READ_DATA_WIDTH = "32" *) 
(* READ_MODE = "std" *) (* RELATED_CLOCKS = "0" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_ADV_FEATURES = "1F1F" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH = "32" *) 
(* WR_DATA_COUNT_WIDTH = "9" *) (* XPM_MODULE = "TRUE" *) 
module semicap_xpm_fifo_async__parameterized1
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [31:0]din;
  output full;
  output prog_full;
  output [8:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [31:0]dout;
  output empty;
  output prog_empty;
  output [8:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire almost_empty;
  wire almost_full;
  wire data_valid;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire overflow;
  wire prog_empty;
  wire prog_full;
  wire rd_clk;
  wire [8:0]rd_data_count;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire sleep;
  wire underflow;
  wire wr_ack;
  wire wr_clk;
  wire [8:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;
  wire \NLW_gnuram_async_fifo.xpm_fifo_base_inst_dbiterr_UNCONNECTED ;
  wire \NLW_gnuram_async_fifo.xpm_fifo_base_inst_full_n_UNCONNECTED ;
  wire \NLW_gnuram_async_fifo.xpm_fifo_base_inst_sbiterr_UNCONNECTED ;

  assign dbiterr = \<const0> ;
  assign sbiterr = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CDC_DEST_SYNC_FF = "4" *) 
  (* COMMON_CLOCK = "0" *) 
  (* DOUT_RESET_VALUE = "0" *) 
  (* ECC_MODE = "0" *) 
  (* ENABLE_ECC = "0" *) 
  (* EN_ADV_FEATURE = "16'b0001111100011111" *) 
  (* EN_AE = "1'b1" *) 
  (* EN_AF = "1'b1" *) 
  (* EN_DVLD = "1'b1" *) 
  (* EN_OF = "1'b1" *) 
  (* EN_PE = "1'b1" *) 
  (* EN_PF = "1'b1" *) 
  (* EN_RDC = "1'b1" *) 
  (* EN_UF = "1'b1" *) 
  (* EN_WACK = "1'b1" *) 
  (* EN_WDC = "1'b1" *) 
  (* FG_EQ_ASYM_DOUT = "1'b0" *) 
  (* FIFO_MEMORY_TYPE = "2" *) 
  (* FIFO_MEM_TYPE = "2" *) 
  (* FIFO_READ_DEPTH = "256" *) 
  (* FIFO_READ_LATENCY = "1" *) 
  (* FIFO_SIZE = "8192" *) 
  (* FIFO_WRITE_DEPTH = "256" *) 
  (* FULL_RESET_VALUE = "1" *) 
  (* FULL_RST_VAL = "1'b1" *) 
  (* PE_THRESH_ADJ = "10" *) 
  (* PE_THRESH_MAX = "253" *) 
  (* PE_THRESH_MIN = "3" *) 
  (* PF_THRESH_ADJ = "10" *) 
  (* PF_THRESH_MAX = "253" *) 
  (* PF_THRESH_MIN = "7" *) 
  (* PROG_EMPTY_THRESH = "10" *) 
  (* PROG_FULL_THRESH = "10" *) 
  (* RD_DATA_COUNT_WIDTH = "9" *) 
  (* RD_DC_WIDTH_EXT = "9" *) 
  (* RD_LATENCY = "1" *) 
  (* RD_MODE = "0" *) 
  (* RD_PNTR_WIDTH = "8" *) 
  (* READ_DATA_WIDTH = "32" *) 
  (* READ_MODE = "0" *) 
  (* RELATED_CLOCKS = "0" *) 
  (* REMOVE_WR_RD_PROT_LOGIC = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_ADV_FEATURES = "1F1F" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WIDTH_RATIO = "1" *) 
  (* WRITE_DATA_WIDTH = "32" *) 
  (* WR_DATA_COUNT_WIDTH = "9" *) 
  (* WR_DC_WIDTH_EXT = "9" *) 
  (* WR_DEPTH_LOG = "8" *) 
  (* WR_PNTR_WIDTH = "8" *) 
  (* WR_RD_RATIO = "0" *) 
  (* WR_WIDTH_LOG = "5" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* both_stages_valid = "3" *) 
  (* invalid = "0" *) 
  (* stage1_valid = "2" *) 
  (* stage2_valid = "1" *) 
  semicap_xpm_fifo_base__parameterized0 \gnuram_async_fifo.xpm_fifo_base_inst 
       (.almost_empty(almost_empty),
        .almost_full(almost_full),
        .data_valid(data_valid),
        .dbiterr(\NLW_gnuram_async_fifo.xpm_fifo_base_inst_dbiterr_UNCONNECTED ),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .full_n(\NLW_gnuram_async_fifo.xpm_fifo_base_inst_full_n_UNCONNECTED ),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .overflow(overflow),
        .prog_empty(prog_empty),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .rst(rst),
        .sbiterr(\NLW_gnuram_async_fifo.xpm_fifo_base_inst_sbiterr_UNCONNECTED ),
        .sleep(sleep),
        .underflow(underflow),
        .wr_ack(wr_ack),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CDC_DEST_SYNC_FF = "4" *) (* COMMON_CLOCK = "0" *) (* DOUT_RESET_VALUE = "0" *) 
(* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) (* EN_ADV_FEATURE = "16'b0001111100011111" *) 
(* EN_AE = "1'b1" *) (* EN_AF = "1'b1" *) (* EN_DVLD = "1'b1" *) 
(* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) (* EN_PF = "1'b1" *) 
(* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) (* EN_WACK = "1'b1" *) 
(* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) (* FIFO_MEMORY_TYPE = "2" *) 
(* FIFO_MEM_TYPE = "2" *) (* FIFO_READ_DEPTH = "1024" *) (* FIFO_READ_LATENCY = "1" *) 
(* FIFO_SIZE = "32768" *) (* FIFO_WRITE_DEPTH = "1024" *) (* FULL_RESET_VALUE = "1" *) 
(* FULL_RST_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) (* PE_THRESH_ADJ = "10" *) 
(* PE_THRESH_MAX = "1021" *) (* PE_THRESH_MIN = "3" *) (* PF_THRESH_ADJ = "10" *) 
(* PF_THRESH_MAX = "1021" *) (* PF_THRESH_MIN = "7" *) (* PROG_EMPTY_THRESH = "10" *) 
(* PROG_FULL_THRESH = "10" *) (* RD_DATA_COUNT_WIDTH = "11" *) (* RD_DC_WIDTH_EXT = "11" *) 
(* RD_LATENCY = "1" *) (* RD_MODE = "0" *) (* RD_PNTR_WIDTH = "10" *) 
(* READ_DATA_WIDTH = "32" *) (* READ_MODE = "0" *) (* RELATED_CLOCKS = "0" *) 
(* REMOVE_WR_RD_PROT_LOGIC = "0" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "1F1F" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) 
(* WRITE_DATA_WIDTH = "32" *) (* WR_DATA_COUNT_WIDTH = "11" *) (* WR_DC_WIDTH_EXT = "11" *) 
(* WR_DEPTH_LOG = "10" *) (* WR_PNTR_WIDTH = "10" *) (* WR_RD_RATIO = "0" *) 
(* WR_WIDTH_LOG = "5" *) (* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) 
(* invalid = "0" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module semicap_xpm_fifo_base
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [31:0]din;
  output full;
  output full_n;
  output prog_full;
  output [10:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [31:0]dout;
  output empty;
  output prog_empty;
  output [10:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire almost_empty;
  wire almost_full;
  wire clr_full;
  wire data_valid;
  wire [9:0]diff_pntr_pe;
  wire [10:2]diff_pntr_pf_q;
  wire [10:2]diff_pntr_pf_q0;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire empty_i0;
  wire full;
  wire \gae_rptr_p2.rdpp2_inst_n_0 ;
  wire \gae_rptr_p2.rdpp2_inst_n_1 ;
  wire \gae_rptr_p2.rdpp2_inst_n_2 ;
  wire \gae_rptr_p2.rdpp2_inst_n_3 ;
  wire \gae_rptr_p2.rdpp2_inst_n_4 ;
  wire \gae_rptr_p2.rdpp2_inst_n_5 ;
  wire \gae_rptr_p2.rdpp2_inst_n_6 ;
  wire \gae_rptr_p2.rdpp2_inst_n_7 ;
  wire \gae_rptr_p2.rdpp2_inst_n_8 ;
  wire \gae_rptr_p2.rdpp2_inst_n_9 ;
  wire \gaf_wptr_p3.wrpp3_inst_n_0 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_0 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_1 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_10 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_2 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_3 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_4 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_5 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_6 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_7 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_8 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_9 ;
  wire \gen_cdc_pntr.rpw_gray_reg_n_0 ;
  wire \gen_cdc_pntr.rpw_gray_reg_n_11 ;
  wire \gen_cdc_pntr.rpw_gray_reg_n_12 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_1 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_2 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_3 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_4 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_5 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_6 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_7 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_8 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_9 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[0] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[1] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[2] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[3] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[4] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[5] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[6] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[7] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[8] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[9] ;
  wire \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_2_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_3_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.prog_full_i_i_2_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.prog_full_i_i_3_n_0 ;
  wire [10:0]\grdc.diff_wr_rd_pntr_rdc0_out ;
  wire [10:0]\gwdc.diff_wr_rd_pntr1_out ;
  wire overflow;
  wire p_1_in;
  wire prog_empty;
  wire prog_full;
  wire ram_aempty_i0;
  wire ram_rd_en_i0;
  wire rd_clk;
  wire [10:0]rd_data_count;
  wire rd_en;
  wire [10:0]rd_pntr_ext;
  wire [9:0]rd_pntr_wr;
  wire [9:0]rd_pntr_wr_cdc;
  wire [10:0]rd_pntr_wr_cdc_dc;
  wire rd_rst_busy;
  wire rdp_inst_n_11;
  wire rdp_inst_n_12;
  wire rdp_inst_n_13;
  wire rdp_inst_n_14;
  wire rdp_inst_n_15;
  wire rdp_inst_n_16;
  wire rdp_inst_n_17;
  wire rdp_inst_n_18;
  wire rdp_inst_n_19;
  wire rdp_inst_n_20;
  wire rdp_inst_n_21;
  wire rdp_inst_n_22;
  wire rdpp1_inst_n_0;
  wire rdpp1_inst_n_1;
  wire rdpp1_inst_n_2;
  wire rdpp1_inst_n_3;
  wire rdpp1_inst_n_4;
  wire rdpp1_inst_n_5;
  wire rdpp1_inst_n_6;
  wire rdpp1_inst_n_7;
  wire rdpp1_inst_n_8;
  wire rdpp1_inst_n_9;
  wire rst;
  wire rst_d1;
  wire rst_d1_inst_n_1;
  wire sleep;
  wire underflow;
  wire underflow_i0;
  wire wr_ack;
  wire wr_clk;
  wire [10:0]wr_data_count;
  wire wr_en;
  wire [10:0]wr_pntr_ext;
  wire [10:7]wr_pntr_plus1_pf;
  wire wr_pntr_plus1_pf_carry;
  wire [9:0]wr_pntr_rd_cdc;
  wire [10:0]wr_pntr_rd_cdc_dc;
  wire wr_rst_busy;
  wire wrpp1_inst_n_13;
  wire wrpp2_inst_n_0;
  wire wrpp2_inst_n_1;
  wire wrpp2_inst_n_2;
  wire wrpp2_inst_n_3;
  wire wrst_busy;
  wire xpm_fifo_rst_inst_n_2;
  wire xpm_fifo_rst_inst_n_5;
  wire xpm_fifo_rst_inst_n_6;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [31:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign sbiterr = \<const0> ;
  GND GND
       (.G(\<const0> ));
  semicap_xpm_counter_updn__parameterized0 \gae_rptr_p2.rdpp2_inst 
       (.Q({\gae_rptr_p2.rdpp2_inst_n_0 ,\gae_rptr_p2.rdpp2_inst_n_1 ,\gae_rptr_p2.rdpp2_inst_n_2 ,\gae_rptr_p2.rdpp2_inst_n_3 ,\gae_rptr_p2.rdpp2_inst_n_4 ,\gae_rptr_p2.rdpp2_inst_n_5 ,\gae_rptr_p2.rdpp2_inst_n_6 ,\gae_rptr_p2.rdpp2_inst_n_7 ,\gae_rptr_p2.rdpp2_inst_n_8 ,\gae_rptr_p2.rdpp2_inst_n_9 }),
        .SR(rd_rst_busy),
        .\count_value_i_reg[0]_0 (rdp_inst_n_11),
        .\count_value_i_reg[5]_0 (empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  semicap_xpm_counter_updn \gaf_wptr_p3.wrpp3_inst 
       (.E(wr_pntr_plus1_pf_carry),
        .Q(rd_pntr_wr),
        .almost_full(almost_full),
        .clr_full(clr_full),
        .\count_value_i_reg[2]_0 (xpm_fifo_rst_inst_n_5),
        .\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg (wrpp2_inst_n_3),
        .\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 (full),
        .\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg (\gaf_wptr_p3.wrpp3_inst_n_0 ),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wrst_busy(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gdvld.data_valid_std_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rdp_inst_n_11),
        .Q(data_valid),
        .R(rd_rst_busy));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* REG_OUTPUT = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "11" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_gray__parameterized0 \gen_cdc_pntr.rd_pntr_cdc_dc_inst 
       (.dest_clk(wr_clk),
        .dest_out_bin(rd_pntr_wr_cdc_dc),
        .src_clk(rd_clk),
        .src_in_bin(rd_pntr_ext));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* REG_OUTPUT = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "10" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_gray \gen_cdc_pntr.rd_pntr_cdc_inst 
       (.dest_clk(wr_clk),
        .dest_out_bin(rd_pntr_wr_cdc),
        .src_clk(rd_clk),
        .src_in_bin(rd_pntr_ext[9:0]));
  semicap_xpm_fifo_reg_vec \gen_cdc_pntr.rpw_gray_reg 
       (.D(rd_pntr_wr_cdc),
        .Q(rd_pntr_wr),
        .S(\gen_cdc_pntr.rpw_gray_reg_n_0 ),
        .\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_3 ({wrpp2_inst_n_0,wrpp2_inst_n_1,wrpp2_inst_n_2}),
        .\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10] (wr_pntr_plus1_pf),
        .\reg_out_i_reg[1]_0 (\gen_cdc_pntr.rpw_gray_reg_n_12 ),
        .\reg_out_i_reg[8]_0 (\gen_cdc_pntr.rpw_gray_reg_n_11 ),
        .wr_clk(wr_clk),
        .wrst_busy(wrst_busy));
  semicap_xpm_fifo_reg_vec__parameterized0 \gen_cdc_pntr.rpw_gray_reg_dc 
       (.D(rd_pntr_wr_cdc_dc),
        .Q({\gen_cdc_pntr.rpw_gray_reg_dc_n_0 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_1 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_2 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_3 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_4 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_5 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_6 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_7 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_8 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_9 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_10 }),
        .wr_clk(wr_clk),
        .wrst_busy(wrst_busy));
  semicap_xpm_fifo_reg_vec_22 \gen_cdc_pntr.wpr_gray_reg 
       (.D(diff_pntr_pe),
        .DI(p_1_in),
        .Q({\gen_cdc_pntr.wpr_gray_reg_n_1 ,\gen_cdc_pntr.wpr_gray_reg_n_2 ,\gen_cdc_pntr.wpr_gray_reg_n_3 ,\gen_cdc_pntr.wpr_gray_reg_n_4 ,\gen_cdc_pntr.wpr_gray_reg_n_5 ,\gen_cdc_pntr.wpr_gray_reg_n_6 ,\gen_cdc_pntr.wpr_gray_reg_n_7 ,\gen_cdc_pntr.wpr_gray_reg_n_8 ,\gen_cdc_pntr.wpr_gray_reg_n_9 }),
        .S({rdp_inst_n_14,rdp_inst_n_15,rdp_inst_n_16,rdp_inst_n_17,rdp_inst_n_18,rdp_inst_n_19,rdp_inst_n_20,rdp_inst_n_21}),
        .SR(rd_rst_busy),
        .empty_i0(empty_i0),
        .\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg ({rdpp1_inst_n_0,rdpp1_inst_n_1,rdpp1_inst_n_2,rdpp1_inst_n_3,rdpp1_inst_n_4,rdpp1_inst_n_5,rdpp1_inst_n_6,rdpp1_inst_n_7,rdpp1_inst_n_8,rdpp1_inst_n_9}),
        .\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 ({\gae_rptr_p2.rdpp2_inst_n_0 ,\gae_rptr_p2.rdpp2_inst_n_1 ,\gae_rptr_p2.rdpp2_inst_n_2 ,\gae_rptr_p2.rdpp2_inst_n_3 ,\gae_rptr_p2.rdpp2_inst_n_4 ,\gae_rptr_p2.rdpp2_inst_n_5 ,\gae_rptr_p2.rdpp2_inst_n_6 ,\gae_rptr_p2.rdpp2_inst_n_7 ,\gae_rptr_p2.rdpp2_inst_n_8 ,\gae_rptr_p2.rdpp2_inst_n_9 }),
        .\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] ({rdp_inst_n_12,rdp_inst_n_13}),
        .\gen_pf_ic_rc.ram_empty_i_reg (rdp_inst_n_11),
        .\gen_pf_ic_rc.ram_empty_i_reg_0 ({rd_pntr_ext[9:6],rd_pntr_ext[4:0]}),
        .\gen_pf_ic_rc.ram_empty_i_reg_1 (rdp_inst_n_22),
        .ram_aempty_i0(ram_aempty_i0),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .\reg_out_i_reg[9]_0 (wr_pntr_rd_cdc));
  semicap_xpm_fifo_reg_vec__parameterized0_23 \gen_cdc_pntr.wpr_gray_reg_dc 
       (.D(\grdc.diff_wr_rd_pntr_rdc0_out ),
        .Q(rd_pntr_ext),
        .SR(rd_rst_busy),
        .rd_clk(rd_clk),
        .\reg_out_i_reg[10]_0 (wr_pntr_rd_cdc_dc));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* REG_OUTPUT = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "11" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_gray__parameterized0__1 \gen_cdc_pntr.wr_pntr_cdc_dc_inst 
       (.dest_clk(rd_clk),
        .dest_out_bin(wr_pntr_rd_cdc_dc),
        .src_clk(wr_clk),
        .src_in_bin(wr_pntr_ext));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* REG_OUTPUT = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "10" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_gray__1 \gen_cdc_pntr.wr_pntr_cdc_inst 
       (.dest_clk(rd_clk),
        .dest_out_bin(wr_pntr_rd_cdc),
        .src_clk(wr_clk),
        .src_in_bin(wr_pntr_ext[9:0]));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg 
       (.C(rd_clk),
        .CE(ram_rd_en_i0),
        .D(ram_aempty_i0),
        .Q(almost_empty),
        .S(rd_rst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gaf_wptr_p3.wrpp3_inst_n_0 ),
        .Q(almost_full),
        .S(wrst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wrpp1_inst_n_13),
        .Q(full),
        .S(wrst_busy));
  LUT2 #(
    .INIT(4'hB)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_2 
       (.I0(empty),
        .I1(rd_en),
        .O(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[0]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[0] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[1]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[1] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[2]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[2] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[3]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[3] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[4]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[4] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[5]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[5] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[6]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[6] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[7]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[7] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[8]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[8] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[9]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[9] ),
        .R(rd_rst_busy));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_1 
       (.I0(empty),
        .O(ram_rd_en_i0));
  LUT5 #(
    .INIT(32'h0000557F)) 
    \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_2 
       (.I0(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[3] ),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[0] ),
        .I2(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[1] ),
        .I3(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[2] ),
        .I4(\gen_pf_ic_rc.gpe_ic.prog_empty_i_i_3_n_0 ),
        .O(\gen_pf_ic_rc.gpe_ic.prog_empty_i_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_3 
       (.I0(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[5] ),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[4] ),
        .I2(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[8] ),
        .I3(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[9] ),
        .I4(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[6] ),
        .I5(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[7] ),
        .O(\gen_pf_ic_rc.gpe_ic.prog_empty_i_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gpe_ic.prog_empty_i_reg 
       (.C(rd_clk),
        .CE(ram_rd_en_i0),
        .D(\gen_pf_ic_rc.gpe_ic.prog_empty_i_i_2_n_0 ),
        .Q(prog_empty),
        .S(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[10]),
        .Q(diff_pntr_pf_q[10]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[2]),
        .Q(diff_pntr_pf_q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[3]),
        .Q(diff_pntr_pf_q[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[4]),
        .Q(diff_pntr_pf_q[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[5]),
        .Q(diff_pntr_pf_q[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[6]),
        .Q(diff_pntr_pf_q[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[7]),
        .Q(diff_pntr_pf_q[7]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[8]),
        .Q(diff_pntr_pf_q[8]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[9] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[9]),
        .Q(diff_pntr_pf_q[9]),
        .R(wrst_busy));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \gen_pf_ic_rc.gpf_ic.prog_full_i_i_2 
       (.I0(diff_pntr_pf_q[6]),
        .I1(diff_pntr_pf_q[7]),
        .I2(diff_pntr_pf_q[5]),
        .I3(\gen_pf_ic_rc.gpf_ic.prog_full_i_i_3_n_0 ),
        .O(\gen_pf_ic_rc.gpf_ic.prog_full_i_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFEEE)) 
    \gen_pf_ic_rc.gpf_ic.prog_full_i_i_3 
       (.I0(diff_pntr_pf_q[9]),
        .I1(diff_pntr_pf_q[8]),
        .I2(diff_pntr_pf_q[4]),
        .I3(diff_pntr_pf_q[2]),
        .I4(diff_pntr_pf_q[3]),
        .I5(diff_pntr_pf_q[10]),
        .O(\gen_pf_ic_rc.gpf_ic.prog_full_i_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gpf_ic.prog_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1_inst_n_1),
        .Q(prog_full),
        .S(wrst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.ram_empty_i_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_i0),
        .Q(empty),
        .S(rd_rst_busy));
  (* ADDR_WIDTH_A = "10" *) 
  (* ADDR_WIDTH_B = "10" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "32" *) 
  (* BYTE_WRITE_WIDTH_B = "32" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "1" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "31" *) 
  (* \MEM.ADDRESS_SPACE_END  = "1023" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "32" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "32768" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "1024" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "32" *) 
  (* P_MIN_WIDTH_DATA_A = "32" *) 
  (* P_MIN_WIDTH_DATA_B = "32" *) 
  (* P_MIN_WIDTH_DATA_ECC = "32" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "no" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "10" *) 
  (* P_WIDTH_ADDR_READ_B = "10" *) 
  (* P_WIDTH_ADDR_WRITE_A = "10" *) 
  (* P_WIDTH_ADDR_WRITE_B = "10" *) 
  (* P_WIDTH_COL_WRITE_A = "32" *) 
  (* P_WIDTH_COL_WRITE_B = "32" *) 
  (* READ_DATA_WIDTH_A = "32" *) 
  (* READ_DATA_WIDTH_B = "32" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "32" *) 
  (* WRITE_DATA_WIDTH_B = "32" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "2" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "32" *) 
  (* rstb_loop_iter = "32" *) 
  semicap_xpm_memory_base \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext[9:0]),
        .addrb(rd_pntr_ext[9:0]),
        .clka(wr_clk),
        .clkb(rd_clk),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [31:0]),
        .doutb(dout),
        .ena(wr_pntr_plus1_pf_carry),
        .enb(rdp_inst_n_11),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(rd_rst_busy),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gof.overflow_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(xpm_fifo_rst_inst_n_6),
        .Q(overflow),
        .R(1'b0));
  FDRE \grdc.rd_data_count_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [0]),
        .Q(rd_data_count[0]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[10] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [10]),
        .Q(rd_data_count[10]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [1]),
        .Q(rd_data_count[1]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [2]),
        .Q(rd_data_count[2]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [3]),
        .Q(rd_data_count[3]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [4]),
        .Q(rd_data_count[4]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [5]),
        .Q(rd_data_count[5]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [6]),
        .Q(rd_data_count[6]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [7]),
        .Q(rd_data_count[7]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [8]),
        .Q(rd_data_count[8]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[9] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [9]),
        .Q(rd_data_count[9]),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \guf.underflow_i_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(underflow_i0),
        .Q(underflow),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gwack.wr_ack_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(xpm_fifo_rst_inst_n_2),
        .Q(wr_ack),
        .R(1'b0));
  FDRE \gwdc.wr_data_count_i_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [0]),
        .Q(wr_data_count[0]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[10] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [10]),
        .Q(wr_data_count[10]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [1]),
        .Q(wr_data_count[1]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [2]),
        .Q(wr_data_count[2]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [3]),
        .Q(wr_data_count[3]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [4]),
        .Q(wr_data_count[4]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [5]),
        .Q(wr_data_count[5]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [6]),
        .Q(wr_data_count[6]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [7]),
        .Q(wr_data_count[7]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [8]),
        .Q(wr_data_count[8]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[9] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [9]),
        .Q(wr_data_count[9]),
        .R(wrst_busy));
  semicap_xpm_counter_updn__parameterized1 rdp_inst
       (.Q(rd_pntr_ext),
        .S({rdp_inst_n_14,rdp_inst_n_15,rdp_inst_n_16,rdp_inst_n_17,rdp_inst_n_18,rdp_inst_n_19,rdp_inst_n_20,rdp_inst_n_21}),
        .SR(rd_rst_busy),
        .\count_value_i_reg[0]_0 (empty),
        .\count_value_i_reg[5]_0 (rdp_inst_n_22),
        .\count_value_i_reg[9]_0 ({rdp_inst_n_12,rdp_inst_n_13}),
        .\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] ({\gen_cdc_pntr.wpr_gray_reg_n_1 ,\gen_cdc_pntr.wpr_gray_reg_n_2 ,\gen_cdc_pntr.wpr_gray_reg_n_3 ,\gen_cdc_pntr.wpr_gray_reg_n_4 ,\gen_cdc_pntr.wpr_gray_reg_n_5 ,\gen_cdc_pntr.wpr_gray_reg_n_6 ,\gen_cdc_pntr.wpr_gray_reg_n_7 ,\gen_cdc_pntr.wpr_gray_reg_n_8 ,\gen_cdc_pntr.wpr_gray_reg_n_9 }),
        .\gen_pf_ic_rc.ram_empty_i_reg (rdp_inst_n_11),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  semicap_xpm_counter_updn__parameterized2 rdpp1_inst
       (.Q({rdpp1_inst_n_0,rdpp1_inst_n_1,rdpp1_inst_n_2,rdpp1_inst_n_3,rdpp1_inst_n_4,rdpp1_inst_n_5,rdpp1_inst_n_6,rdpp1_inst_n_7,rdpp1_inst_n_8,rdpp1_inst_n_9}),
        .SR(rd_rst_busy),
        .\count_value_i_reg[0]_0 (rdp_inst_n_11),
        .\count_value_i_reg[5]_0 (empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  semicap_xpm_fifo_reg_bit rst_d1_inst
       (.E(wr_pntr_plus1_pf_carry),
        .clr_full(clr_full),
        .\count_value_i_reg[9] (full),
        .d_out_reg_0(rst_d1_inst_n_1),
        .\gen_pf_ic_rc.gpf_ic.prog_full_i_reg (\gen_pf_ic_rc.gpf_ic.prog_full_i_i_2_n_0 ),
        .prog_full(prog_full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wrst_busy(wrst_busy));
  semicap_xpm_counter_updn__parameterized1_24 wrp_inst
       (.D(\gwdc.diff_wr_rd_pntr1_out ),
        .E(wr_pntr_plus1_pf_carry),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[2]_0 (xpm_fifo_rst_inst_n_5),
        .\count_value_i_reg[6]_0 (full),
        .\gwdc.wr_data_count_i_reg[10] ({\gen_cdc_pntr.rpw_gray_reg_dc_n_0 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_1 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_2 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_3 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_4 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_5 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_6 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_7 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_8 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_9 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_10 }),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wrst_busy(wrst_busy));
  semicap_xpm_counter_updn__parameterized2_25 wrpp1_inst
       (.D(diff_pntr_pf_q0),
        .E(wr_pntr_plus1_pf_carry),
        .Q(wr_pntr_plus1_pf),
        .S(\gen_cdc_pntr.rpw_gray_reg_n_0 ),
        .\count_value_i_reg[2]_0 (xpm_fifo_rst_inst_n_5),
        .\count_value_i_reg[6]_0 (full),
        .d_out_reg(wrpp1_inst_n_13),
        .\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg (\gen_cdc_pntr.rpw_gray_reg_n_11 ),
        .\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 (rd_pntr_wr),
        .\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_1 (wrpp2_inst_n_3),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wrst_busy(wrst_busy));
  semicap_xpm_counter_updn__parameterized0_26 wrpp2_inst
       (.E(wr_pntr_plus1_pf_carry),
        .Q({wrpp2_inst_n_0,wrpp2_inst_n_1,wrpp2_inst_n_2}),
        .\count_value_i_reg[2]_0 (xpm_fifo_rst_inst_n_5),
        .\count_value_i_reg[6]_0 (full),
        .\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg (\gen_cdc_pntr.rpw_gray_reg_n_12 ),
        .\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg_0 (rd_pntr_wr[9:3]),
        .\reg_out_i_reg[9] (wrpp2_inst_n_3),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wrst_busy(wrst_busy));
  semicap_xpm_fifo_rst__xdcDup__1 xpm_fifo_rst_inst
       (.SR(rd_rst_busy),
        .\gen_rst_ic.fifo_wr_rst_ic_reg_0 (xpm_fifo_rst_inst_n_2),
        .\gen_rst_ic.wr_rst_busy_ic_reg_0 (xpm_fifo_rst_inst_n_5),
        .\gen_rst_ic.wr_rst_busy_ic_reg_1 (xpm_fifo_rst_inst_n_6),
        .\guf.underflow_i_reg (empty),
        .\gwack.wr_ack_i_reg (full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .rst_d1(rst_d1),
        .underflow_i0(underflow_i0),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy),
        .wrst_busy(wrst_busy));
endmodule

(* CDC_DEST_SYNC_FF = "4" *) (* COMMON_CLOCK = "0" *) (* DOUT_RESET_VALUE = "0" *) 
(* ECC_MODE = "0" *) (* ENABLE_ECC = "0" *) (* EN_ADV_FEATURE = "16'b0001111100011111" *) 
(* EN_AE = "1'b1" *) (* EN_AF = "1'b1" *) (* EN_DVLD = "1'b1" *) 
(* EN_OF = "1'b1" *) (* EN_PE = "1'b1" *) (* EN_PF = "1'b1" *) 
(* EN_RDC = "1'b1" *) (* EN_UF = "1'b1" *) (* EN_WACK = "1'b1" *) 
(* EN_WDC = "1'b1" *) (* FG_EQ_ASYM_DOUT = "1'b0" *) (* FIFO_MEMORY_TYPE = "2" *) 
(* FIFO_MEM_TYPE = "2" *) (* FIFO_READ_DEPTH = "256" *) (* FIFO_READ_LATENCY = "1" *) 
(* FIFO_SIZE = "8192" *) (* FIFO_WRITE_DEPTH = "256" *) (* FULL_RESET_VALUE = "1" *) 
(* FULL_RST_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_fifo_base" *) (* PE_THRESH_ADJ = "10" *) 
(* PE_THRESH_MAX = "253" *) (* PE_THRESH_MIN = "3" *) (* PF_THRESH_ADJ = "10" *) 
(* PF_THRESH_MAX = "253" *) (* PF_THRESH_MIN = "7" *) (* PROG_EMPTY_THRESH = "10" *) 
(* PROG_FULL_THRESH = "10" *) (* RD_DATA_COUNT_WIDTH = "9" *) (* RD_DC_WIDTH_EXT = "9" *) 
(* RD_LATENCY = "1" *) (* RD_MODE = "0" *) (* RD_PNTR_WIDTH = "8" *) 
(* READ_DATA_WIDTH = "32" *) (* READ_MODE = "0" *) (* RELATED_CLOCKS = "0" *) 
(* REMOVE_WR_RD_PROT_LOGIC = "0" *) (* SIM_ASSERT_CHK = "0" *) (* USE_ADV_FEATURES = "1F1F" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WIDTH_RATIO = "1" *) 
(* WRITE_DATA_WIDTH = "32" *) (* WR_DATA_COUNT_WIDTH = "9" *) (* WR_DC_WIDTH_EXT = "9" *) 
(* WR_DEPTH_LOG = "8" *) (* WR_PNTR_WIDTH = "8" *) (* WR_RD_RATIO = "0" *) 
(* WR_WIDTH_LOG = "5" *) (* XPM_MODULE = "TRUE" *) (* both_stages_valid = "3" *) 
(* invalid = "0" *) (* stage1_valid = "2" *) (* stage2_valid = "1" *) 
module semicap_xpm_fifo_base__parameterized0
   (sleep,
    rst,
    wr_clk,
    wr_en,
    din,
    full,
    full_n,
    prog_full,
    wr_data_count,
    overflow,
    wr_rst_busy,
    almost_full,
    wr_ack,
    rd_clk,
    rd_en,
    dout,
    empty,
    prog_empty,
    rd_data_count,
    underflow,
    rd_rst_busy,
    almost_empty,
    data_valid,
    injectsbiterr,
    injectdbiterr,
    sbiterr,
    dbiterr);
  input sleep;
  input rst;
  input wr_clk;
  input wr_en;
  input [31:0]din;
  output full;
  output full_n;
  output prog_full;
  output [8:0]wr_data_count;
  output overflow;
  output wr_rst_busy;
  output almost_full;
  output wr_ack;
  input rd_clk;
  input rd_en;
  output [31:0]dout;
  output empty;
  output prog_empty;
  output [8:0]rd_data_count;
  output underflow;
  output rd_rst_busy;
  output almost_empty;
  output data_valid;
  input injectsbiterr;
  input injectdbiterr;
  output sbiterr;
  output dbiterr;

  wire \<const0> ;
  wire almost_empty;
  wire almost_full;
  wire clr_full;
  wire [7:6]count_value_i;
  wire data_valid;
  wire [7:0]diff_pntr_pe;
  wire [8:2]diff_pntr_pf_q;
  wire [8:2]diff_pntr_pf_q0;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire empty_i0;
  wire full;
  wire \gae_rptr_p2.rdpp2_inst_n_0 ;
  wire \gae_rptr_p2.rdpp2_inst_n_1 ;
  wire \gae_rptr_p2.rdpp2_inst_n_2 ;
  wire \gae_rptr_p2.rdpp2_inst_n_3 ;
  wire \gae_rptr_p2.rdpp2_inst_n_4 ;
  wire \gae_rptr_p2.rdpp2_inst_n_5 ;
  wire \gae_rptr_p2.rdpp2_inst_n_6 ;
  wire \gae_rptr_p2.rdpp2_inst_n_7 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_0 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_1 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_2 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_3 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_4 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_5 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_6 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_7 ;
  wire \gen_cdc_pntr.rpw_gray_reg_dc_n_8 ;
  wire \gen_cdc_pntr.rpw_gray_reg_n_15 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_1 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_2 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_3 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_4 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_5 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_6 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_7 ;
  wire \gen_cdc_pntr.wpr_gray_reg_n_8 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[0] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[1] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[2] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[3] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[4] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[5] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[6] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[7] ;
  wire \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_2_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_3_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.prog_full_i_i_2_n_0 ;
  wire going_afull;
  wire [8:0]\grdc.diff_wr_rd_pntr_rdc0_out ;
  wire [8:0]\gwdc.diff_wr_rd_pntr1_out ;
  wire leaving_afull;
  wire overflow;
  wire overflow_i0;
  wire p_1_in;
  wire prog_empty;
  wire prog_full;
  wire ram_aempty_i0;
  wire ram_rd_en_i0;
  wire rd_clk;
  wire [8:0]rd_data_count;
  wire rd_en;
  wire [8:0]rd_pntr_ext;
  wire [7:0]rd_pntr_wr;
  wire [7:0]rd_pntr_wr_cdc;
  wire [8:0]rd_pntr_wr_cdc_dc;
  wire rd_rst_busy;
  wire rdp_inst_n_17;
  wire rdpp1_inst_n_0;
  wire rdpp1_inst_n_1;
  wire rdpp1_inst_n_2;
  wire rdpp1_inst_n_3;
  wire rdpp1_inst_n_4;
  wire rdpp1_inst_n_5;
  wire rdpp1_inst_n_6;
  wire rdpp1_inst_n_7;
  wire rst;
  wire rst_d1;
  wire rst_d1_inst_n_1;
  wire sleep;
  wire underflow;
  wire underflow_i0;
  wire wr_ack;
  wire wr_clk;
  wire [8:0]wr_data_count;
  wire wr_en;
  wire [8:0]wr_pntr_ext;
  wire [8:1]wr_pntr_plus1_pf;
  wire wr_pntr_plus1_pf_carry;
  wire [7:0]wr_pntr_rd_cdc;
  wire [8:0]wr_pntr_rd_cdc_dc;
  wire wr_rst_busy;
  wire wrpp1_inst_n_8;
  wire wrpp2_inst_n_0;
  wire wrst_busy;
  wire xpm_fifo_rst_inst_n_2;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ;
  wire \NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ;
  wire [31:0]\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED ;

  assign dbiterr = \<const0> ;
  assign full_n = \<const0> ;
  assign sbiterr = \<const0> ;
  GND GND
       (.G(\<const0> ));
  semicap_xpm_counter_updn__parameterized4 \gae_rptr_p2.rdpp2_inst 
       (.E(rdp_inst_n_17),
        .Q({\gae_rptr_p2.rdpp2_inst_n_0 ,\gae_rptr_p2.rdpp2_inst_n_1 ,\gae_rptr_p2.rdpp2_inst_n_2 ,\gae_rptr_p2.rdpp2_inst_n_3 ,\gae_rptr_p2.rdpp2_inst_n_4 ,\gae_rptr_p2.rdpp2_inst_n_5 ,\gae_rptr_p2.rdpp2_inst_n_6 ,\gae_rptr_p2.rdpp2_inst_n_7 }),
        .SR(rd_rst_busy),
        .\count_value_i_reg[5]_0 (empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  semicap_xpm_counter_updn__parameterized3 \gaf_wptr_p3.wrpp3_inst 
       (.Q(count_value_i),
        .\count_value_i_reg[6]_0 (full),
        .\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2_0 (rd_pntr_wr[5:0]),
        .\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg (\gen_cdc_pntr.rpw_gray_reg_n_15 ),
        .going_afull(going_afull),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pf_carry(wr_pntr_plus1_pf_carry),
        .wrst_busy(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gdvld.data_valid_std_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rdp_inst_n_17),
        .Q(data_valid),
        .R(rd_rst_busy));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* REG_OUTPUT = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "9" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_gray__parameterized2 \gen_cdc_pntr.rd_pntr_cdc_dc_inst 
       (.dest_clk(wr_clk),
        .dest_out_bin(rd_pntr_wr_cdc_dc),
        .src_clk(rd_clk),
        .src_in_bin(rd_pntr_ext));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* REG_OUTPUT = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "8" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_gray__parameterized1 \gen_cdc_pntr.rd_pntr_cdc_inst 
       (.dest_clk(wr_clk),
        .dest_out_bin(rd_pntr_wr_cdc),
        .src_clk(rd_clk),
        .src_in_bin(rd_pntr_ext[7:0]));
  semicap_xpm_fifo_reg_vec__parameterized1 \gen_cdc_pntr.rpw_gray_reg 
       (.D(diff_pntr_pf_q0),
        .Q(wr_pntr_plus1_pf),
        .\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2 (count_value_i),
        .\reg_out_i_reg[6]_0 (\gen_cdc_pntr.rpw_gray_reg_n_15 ),
        .\reg_out_i_reg[7]_0 (rd_pntr_wr),
        .\reg_out_i_reg[7]_1 (rd_pntr_wr_cdc),
        .wr_clk(wr_clk),
        .wr_pntr_plus1_pf_carry(wr_pntr_plus1_pf_carry),
        .wrst_busy(wrst_busy));
  semicap_xpm_fifo_reg_vec__parameterized2 \gen_cdc_pntr.rpw_gray_reg_dc 
       (.D(rd_pntr_wr_cdc_dc),
        .Q({\gen_cdc_pntr.rpw_gray_reg_dc_n_0 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_1 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_2 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_3 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_4 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_5 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_6 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_7 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_8 }),
        .wr_clk(wr_clk),
        .wrst_busy(wrst_busy));
  semicap_xpm_fifo_reg_vec__parameterized1_27 \gen_cdc_pntr.wpr_gray_reg 
       (.D(wr_pntr_rd_cdc),
        .Q({rdpp1_inst_n_0,rdpp1_inst_n_1,rdpp1_inst_n_2,rdpp1_inst_n_3,rdpp1_inst_n_4,rdpp1_inst_n_5,rdpp1_inst_n_6,rdpp1_inst_n_7}),
        .SR(rd_rst_busy),
        .empty_i0(empty_i0),
        .\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg ({\gae_rptr_p2.rdpp2_inst_n_0 ,\gae_rptr_p2.rdpp2_inst_n_1 ,\gae_rptr_p2.rdpp2_inst_n_2 ,\gae_rptr_p2.rdpp2_inst_n_3 ,\gae_rptr_p2.rdpp2_inst_n_4 ,\gae_rptr_p2.rdpp2_inst_n_5 ,\gae_rptr_p2.rdpp2_inst_n_6 ,\gae_rptr_p2.rdpp2_inst_n_7 }),
        .\gen_pf_ic_rc.ram_empty_i_reg (empty),
        .\gen_pf_ic_rc.ram_empty_i_reg_0 (rd_pntr_ext[7:0]),
        .ram_aempty_i0(ram_aempty_i0),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .\reg_out_i_reg[7]_0 ({\gen_cdc_pntr.wpr_gray_reg_n_1 ,\gen_cdc_pntr.wpr_gray_reg_n_2 ,\gen_cdc_pntr.wpr_gray_reg_n_3 ,\gen_cdc_pntr.wpr_gray_reg_n_4 ,\gen_cdc_pntr.wpr_gray_reg_n_5 ,\gen_cdc_pntr.wpr_gray_reg_n_6 ,\gen_cdc_pntr.wpr_gray_reg_n_7 ,\gen_cdc_pntr.wpr_gray_reg_n_8 }));
  semicap_xpm_fifo_reg_vec__parameterized2_28 \gen_cdc_pntr.wpr_gray_reg_dc 
       (.D(\grdc.diff_wr_rd_pntr_rdc0_out ),
        .Q(rd_pntr_ext),
        .SR(rd_rst_busy),
        .rd_clk(rd_clk),
        .\reg_out_i_reg[8]_0 (wr_pntr_rd_cdc_dc));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* REG_OUTPUT = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "9" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_gray__parameterized2__1 \gen_cdc_pntr.wr_pntr_cdc_dc_inst 
       (.dest_clk(rd_clk),
        .dest_out_bin(wr_pntr_rd_cdc_dc),
        .src_clk(wr_clk),
        .src_in_bin(wr_pntr_ext));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* REG_OUTPUT = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "8" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_gray__parameterized1__1 \gen_cdc_pntr.wr_pntr_cdc_inst 
       (.dest_clk(rd_clk),
        .dest_out_bin(wr_pntr_rd_cdc),
        .src_clk(wr_clk),
        .src_in_bin(wr_pntr_ext[7:0]));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg 
       (.C(rd_clk),
        .CE(ram_rd_en_i0),
        .D(ram_aempty_i0),
        .Q(almost_empty),
        .S(rd_rst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wrpp2_inst_n_0),
        .Q(almost_full),
        .S(wrst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wrpp1_inst_n_8),
        .Q(full),
        .S(wrst_busy));
  LUT2 #(
    .INIT(4'hB)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe[7]_i_2 
       (.I0(empty),
        .I1(rd_en),
        .O(p_1_in));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[0]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[0] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[1]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[1] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[2]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[2] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[3]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[3] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[4]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[4] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[5]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[5] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[6]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[6] ),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(diff_pntr_pe[7]),
        .Q(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[7] ),
        .R(rd_rst_busy));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_1 
       (.I0(empty),
        .O(ram_rd_en_i0));
  LUT5 #(
    .INIT(32'h0000557F)) 
    \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_2 
       (.I0(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[3] ),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[0] ),
        .I2(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[1] ),
        .I3(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[2] ),
        .I4(\gen_pf_ic_rc.gpe_ic.prog_empty_i_i_3_n_0 ),
        .O(\gen_pf_ic_rc.gpe_ic.prog_empty_i_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \gen_pf_ic_rc.gpe_ic.prog_empty_i_i_3 
       (.I0(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[5] ),
        .I1(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[4] ),
        .I2(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[7] ),
        .I3(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg_n_0_[6] ),
        .O(\gen_pf_ic_rc.gpe_ic.prog_empty_i_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gpe_ic.prog_empty_i_reg 
       (.C(rd_clk),
        .CE(ram_rd_en_i0),
        .D(\gen_pf_ic_rc.gpe_ic.prog_empty_i_i_2_n_0 ),
        .Q(prog_empty),
        .S(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[2]),
        .Q(diff_pntr_pf_q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[3]),
        .Q(diff_pntr_pf_q[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[4]),
        .Q(diff_pntr_pf_q[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[5]),
        .Q(diff_pntr_pf_q[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[6]),
        .Q(diff_pntr_pf_q[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[7]),
        .Q(diff_pntr_pf_q[7]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(diff_pntr_pf_q0[8]),
        .Q(diff_pntr_pf_q[8]),
        .R(wrst_busy));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFEEE)) 
    \gen_pf_ic_rc.gpf_ic.prog_full_i_i_2 
       (.I0(diff_pntr_pf_q[7]),
        .I1(diff_pntr_pf_q[6]),
        .I2(diff_pntr_pf_q[4]),
        .I3(diff_pntr_pf_q[2]),
        .I4(diff_pntr_pf_q[3]),
        .I5(diff_pntr_pf_q[8]),
        .O(\gen_pf_ic_rc.gpf_ic.prog_full_i_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.gpf_ic.prog_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1_inst_n_1),
        .Q(prog_full),
        .S(wrst_busy));
  FDSE #(
    .INIT(1'b1)) 
    \gen_pf_ic_rc.ram_empty_i_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_i0),
        .Q(empty),
        .S(rd_rst_busy));
  (* ADDR_WIDTH_A = "8" *) 
  (* ADDR_WIDTH_B = "8" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "32" *) 
  (* BYTE_WRITE_WIDTH_B = "32" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "1" *) 
  (* ECC_MODE = "0" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "31" *) 
  (* \MEM.ADDRESS_SPACE_END  = "511" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "32" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "" *) 
  (* MEMORY_OPTIMIZATION = "true" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "8192" *) 
  (* MEMORY_TYPE = "1" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "256" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "32" *) 
  (* P_MIN_WIDTH_DATA_A = "32" *) 
  (* P_MIN_WIDTH_DATA_B = "32" *) 
  (* P_MIN_WIDTH_DATA_ECC = "32" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "no" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "8" *) 
  (* P_WIDTH_ADDR_READ_B = "8" *) 
  (* P_WIDTH_ADDR_WRITE_A = "8" *) 
  (* P_WIDTH_ADDR_WRITE_B = "8" *) 
  (* P_WIDTH_COL_WRITE_A = "32" *) 
  (* P_WIDTH_COL_WRITE_B = "32" *) 
  (* READ_DATA_WIDTH_A = "32" *) 
  (* READ_DATA_WIDTH_B = "32" *) 
  (* READ_LATENCY_A = "2" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "32" *) 
  (* WRITE_DATA_WIDTH_B = "32" *) 
  (* WRITE_MODE_A = "2" *) 
  (* WRITE_MODE_B = "2" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "32" *) 
  (* rstb_loop_iter = "32" *) 
  semicap_xpm_memory_base__parameterized0 \gen_sdpram.xpm_memory_base_inst 
       (.addra(wr_pntr_ext[7:0]),
        .addrb(rd_pntr_ext[7:0]),
        .clka(wr_clk),
        .clkb(rd_clk),
        .dbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterra_UNCONNECTED ),
        .dbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_dbiterrb_UNCONNECTED ),
        .dina(din),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(\NLW_gen_sdpram.xpm_memory_base_inst_douta_UNCONNECTED [31:0]),
        .doutb(dout),
        .ena(wr_pntr_plus1_pf_carry),
        .enb(rdp_inst_n_17),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(1'b0),
        .regceb(1'b0),
        .rsta(1'b0),
        .rstb(rd_rst_busy),
        .sbiterra(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterra_UNCONNECTED ),
        .sbiterrb(\NLW_gen_sdpram.xpm_memory_base_inst_sbiterrb_UNCONNECTED ),
        .sleep(sleep),
        .wea(1'b0),
        .web(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gof.overflow_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(overflow_i0),
        .Q(overflow),
        .R(1'b0));
  FDRE \grdc.rd_data_count_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [0]),
        .Q(rd_data_count[0]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [1]),
        .Q(rd_data_count[1]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [2]),
        .Q(rd_data_count[2]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [3]),
        .Q(rd_data_count[3]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [4]),
        .Q(rd_data_count[4]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [5]),
        .Q(rd_data_count[5]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [6]),
        .Q(rd_data_count[6]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [7]),
        .Q(rd_data_count[7]),
        .R(rd_rst_busy));
  FDRE \grdc.rd_data_count_i_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\grdc.diff_wr_rd_pntr_rdc0_out [8]),
        .Q(rd_data_count[8]),
        .R(rd_rst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \guf.underflow_i_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(underflow_i0),
        .Q(underflow),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gwack.wr_ack_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(xpm_fifo_rst_inst_n_2),
        .Q(wr_ack),
        .R(1'b0));
  FDRE \gwdc.wr_data_count_i_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [0]),
        .Q(wr_data_count[0]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [1]),
        .Q(wr_data_count[1]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [2]),
        .Q(wr_data_count[2]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [3]),
        .Q(wr_data_count[3]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [4]),
        .Q(wr_data_count[4]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [5]),
        .Q(wr_data_count[5]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [6]),
        .Q(wr_data_count[6]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [7]),
        .Q(wr_data_count[7]),
        .R(wrst_busy));
  FDRE \gwdc.wr_data_count_i_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gwdc.diff_wr_rd_pntr1_out [8]),
        .Q(wr_data_count[8]),
        .R(wrst_busy));
  semicap_xpm_counter_updn__parameterized5 rdp_inst
       (.D(diff_pntr_pe),
        .DI(p_1_in),
        .E(rdp_inst_n_17),
        .Q(rd_pntr_ext),
        .SR(rd_rst_busy),
        .\count_value_i_reg[0]_0 (empty),
        .\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7] ({\gen_cdc_pntr.wpr_gray_reg_n_1 ,\gen_cdc_pntr.wpr_gray_reg_n_2 ,\gen_cdc_pntr.wpr_gray_reg_n_3 ,\gen_cdc_pntr.wpr_gray_reg_n_4 ,\gen_cdc_pntr.wpr_gray_reg_n_5 ,\gen_cdc_pntr.wpr_gray_reg_n_6 ,\gen_cdc_pntr.wpr_gray_reg_n_7 ,\gen_cdc_pntr.wpr_gray_reg_n_8 }),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  semicap_xpm_counter_updn__parameterized6 rdpp1_inst
       (.E(rdp_inst_n_17),
        .Q({rdpp1_inst_n_0,rdpp1_inst_n_1,rdpp1_inst_n_2,rdpp1_inst_n_3,rdpp1_inst_n_4,rdpp1_inst_n_5,rdpp1_inst_n_6,rdpp1_inst_n_7}),
        .SR(rd_rst_busy),
        .\count_value_i_reg[5]_0 (empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  semicap_xpm_fifo_reg_bit_29 rst_d1_inst
       (.Q(diff_pntr_pf_q[5]),
        .clr_full(clr_full),
        .\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[5] (rst_d1_inst_n_1),
        .\gen_pf_ic_rc.gpf_ic.prog_full_i_reg (\gen_pf_ic_rc.gpf_ic.prog_full_i_i_2_n_0 ),
        .\gen_pf_ic_rc.gpf_ic.prog_full_i_reg_0 (full),
        .overflow_i0(overflow_i0),
        .prog_full(prog_full),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wrst_busy(wrst_busy));
  semicap_xpm_counter_updn__parameterized5_30 wrp_inst
       (.D(\gwdc.diff_wr_rd_pntr1_out ),
        .Q(wr_pntr_ext),
        .\count_value_i_reg[6]_0 (full),
        .\gwdc.wr_data_count_i_reg[8] ({\gen_cdc_pntr.rpw_gray_reg_dc_n_0 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_1 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_2 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_3 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_4 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_5 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_6 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_7 ,\gen_cdc_pntr.rpw_gray_reg_dc_n_8 }),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pf_carry(wr_pntr_plus1_pf_carry),
        .wrst_busy(wrst_busy));
  semicap_xpm_counter_updn__parameterized6_31 wrpp1_inst
       (.Q(wr_pntr_plus1_pf),
        .\count_value_i_reg[6]_0 (full),
        .d_out_reg(wrpp1_inst_n_8),
        .\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg (rd_pntr_wr),
        .leaving_afull(leaving_afull),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pf_carry(wr_pntr_plus1_pf_carry),
        .wrst_busy(wrst_busy));
  semicap_xpm_counter_updn__parameterized4_32 wrpp2_inst
       (.almost_full(almost_full),
        .clr_full(clr_full),
        .\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg (full),
        .\gen_pf_ic_rc.gaf_ic.ram_afull_i_reg_0 (rd_pntr_wr),
        .\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_reg (wrpp2_inst_n_0),
        .going_afull(going_afull),
        .leaving_afull(leaving_afull),
        .rst(rst),
        .rst_d1(rst_d1),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pf_carry(wr_pntr_plus1_pf_carry),
        .wrst_busy(wrst_busy));
  semicap_xpm_fifo_rst xpm_fifo_rst_inst
       (.SR(rd_rst_busy),
        .d_out_reg(xpm_fifo_rst_inst_n_2),
        .\guf.underflow_i_reg (empty),
        .\gwack.wr_ack_i_reg (full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .rst_d1(rst_d1),
        .underflow_i0(underflow_i0),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pf_carry(wr_pntr_plus1_pf_carry),
        .wr_rst_busy(wr_rst_busy),
        .wrst_busy(wrst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module semicap_xpm_fifo_reg_bit
   (rst_d1,
    d_out_reg_0,
    E,
    clr_full,
    wrst_busy,
    wr_clk,
    \gen_pf_ic_rc.gpf_ic.prog_full_i_reg ,
    rst,
    \count_value_i_reg[9] ,
    prog_full,
    wr_en);
  output rst_d1;
  output d_out_reg_0;
  output [0:0]E;
  output clr_full;
  input wrst_busy;
  input wr_clk;
  input \gen_pf_ic_rc.gpf_ic.prog_full_i_reg ;
  input rst;
  input \count_value_i_reg[9] ;
  input prog_full;
  input wr_en;

  wire [0:0]E;
  wire clr_full;
  wire \count_value_i_reg[9] ;
  wire d_out_reg_0;
  wire \gen_pf_ic_rc.gpf_ic.prog_full_i_reg ;
  wire prog_full;
  wire rst;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire wrst_busy;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(wrst_busy),
        .Q(rst_d1),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h02)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_3 
       (.I0(rst_d1),
        .I1(wrst_busy),
        .I2(rst),
        .O(clr_full));
  LUT5 #(
    .INIT(32'hCF8A008A)) 
    \gen_pf_ic_rc.gpf_ic.prog_full_i_i_1 
       (.I0(\gen_pf_ic_rc.gpf_ic.prog_full_i_reg ),
        .I1(rst),
        .I2(rst_d1),
        .I3(\count_value_i_reg[9] ),
        .I4(prog_full),
        .O(d_out_reg_0));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(\count_value_i_reg[9] ),
        .I2(rst_d1),
        .I3(wrst_busy),
        .O(E));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_bit" *) 
module semicap_xpm_fifo_reg_bit_29
   (rst_d1,
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[5] ,
    clr_full,
    overflow_i0,
    wrst_busy,
    wr_clk,
    \gen_pf_ic_rc.gpf_ic.prog_full_i_reg ,
    Q,
    \gen_pf_ic_rc.gpf_ic.prog_full_i_reg_0 ,
    prog_full,
    wr_en,
    rst);
  output rst_d1;
  output \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[5] ;
  output clr_full;
  output overflow_i0;
  input wrst_busy;
  input wr_clk;
  input \gen_pf_ic_rc.gpf_ic.prog_full_i_reg ;
  input [0:0]Q;
  input \gen_pf_ic_rc.gpf_ic.prog_full_i_reg_0 ;
  input prog_full;
  input wr_en;
  input rst;

  wire [0:0]Q;
  wire clr_full;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[5] ;
  wire \gen_pf_ic_rc.gpf_ic.prog_full_i_reg ;
  wire \gen_pf_ic_rc.gpf_ic.prog_full_i_reg_0 ;
  wire overflow_i0;
  wire prog_full;
  wire rst;
  wire rst_d1;
  wire wr_clk;
  wire wr_en;
  wire wrst_busy;

  FDRE #(
    .INIT(1'b0)) 
    d_out_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(wrst_busy),
        .Q(rst_d1),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0F0E000E)) 
    \gen_pf_ic_rc.gpf_ic.prog_full_i_i_1 
       (.I0(\gen_pf_ic_rc.gpf_ic.prog_full_i_reg ),
        .I1(Q),
        .I2(clr_full),
        .I3(\gen_pf_ic_rc.gpf_ic.prog_full_i_reg_0 ),
        .I4(prog_full),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \gen_pf_ic_rc.gpf_ic.prog_full_i_i_3 
       (.I0(rst),
        .I1(rst_d1),
        .I2(wrst_busy),
        .O(clr_full));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \gof.overflow_i_i_1 
       (.I0(rst_d1),
        .I1(wrst_busy),
        .I2(\gen_pf_ic_rc.gpf_ic.prog_full_i_reg_0 ),
        .I3(wr_en),
        .O(overflow_i0));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_vec" *) 
module semicap_xpm_fifo_reg_vec
   (S,
    Q,
    \reg_out_i_reg[8]_0 ,
    \reg_out_i_reg[1]_0 ,
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10] ,
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_3 ,
    wrst_busy,
    D,
    wr_clk);
  output [0:0]S;
  output [9:0]Q;
  output \reg_out_i_reg[8]_0 ;
  output \reg_out_i_reg[1]_0 ;
  input [3:0]\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10] ;
  input [2:0]\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_3 ;
  input wrst_busy;
  input [9:0]D;
  input wr_clk;

  wire [9:0]D;
  wire [9:0]Q;
  wire [0:0]S;
  wire [2:0]\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_3 ;
  wire [3:0]\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10] ;
  wire \reg_out_i_reg[1]_0 ;
  wire \reg_out_i_reg[8]_0 ;
  wire wr_clk;
  wire wrst_busy;

  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_10 
       (.I0(Q[1]),
        .I1(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_3 [1]),
        .I2(Q[2]),
        .I3(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_3 [2]),
        .I4(\gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_3 [0]),
        .I5(Q[0]),
        .O(\reg_out_i_reg[1]_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_6 
       (.I0(Q[8]),
        .I1(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10] [2]),
        .I2(Q[7]),
        .I3(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10] [1]),
        .I4(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10] [0]),
        .I5(Q[6]),
        .O(\reg_out_i_reg[8]_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[10]_i_2 
       (.I0(Q[9]),
        .I1(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[10] [3]),
        .O(S));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(Q[0]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(Q[1]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(Q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(Q[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[4]),
        .Q(Q[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[5]),
        .Q(Q[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[6]),
        .Q(Q[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[7]),
        .Q(Q[7]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[8]),
        .Q(Q[8]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[9] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[9]),
        .Q(Q[9]),
        .R(wrst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_vec" *) 
module semicap_xpm_fifo_reg_vec_22
   (empty_i0,
    Q,
    ram_aempty_i0,
    D,
    \gen_pf_ic_rc.ram_empty_i_reg ,
    \gen_pf_ic_rc.ram_empty_i_reg_0 ,
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg ,
    \gen_pf_ic_rc.ram_empty_i_reg_1 ,
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 ,
    rd_en,
    DI,
    S,
    \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] ,
    SR,
    \reg_out_i_reg[9]_0 ,
    rd_clk);
  output empty_i0;
  output [8:0]Q;
  output ram_aempty_i0;
  output [9:0]D;
  input \gen_pf_ic_rc.ram_empty_i_reg ;
  input [8:0]\gen_pf_ic_rc.ram_empty_i_reg_0 ;
  input [9:0]\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg ;
  input \gen_pf_ic_rc.ram_empty_i_reg_1 ;
  input [9:0]\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 ;
  input rd_en;
  input [0:0]DI;
  input [7:0]S;
  input [1:0]\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] ;
  input [0:0]SR;
  input [9:0]\reg_out_i_reg[9]_0 ;
  input rd_clk;

  wire [9:0]D;
  wire [0:0]DI;
  wire [8:0]Q;
  wire [7:0]S;
  wire [0:0]SR;
  wire empty_i0;
  wire \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_3_n_0 ;
  wire \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_4_n_0 ;
  wire \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_5_n_0 ;
  wire [9:0]\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg ;
  wire [9:0]\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_0 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_1 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_2 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_3 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_4 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_5 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_6 ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_7 ;
  wire [1:0]\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] ;
  wire \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9]_i_1_n_7 ;
  wire \gen_pf_ic_rc.ram_empty_i_i_3_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_i_4_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_i_5_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_i_6_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_i_7_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_i_9_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_reg ;
  wire [8:0]\gen_pf_ic_rc.ram_empty_i_reg_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_reg_1 ;
  wire going_aempty0;
  wire leaving_aempty;
  wire ram_aempty_i0;
  wire rd_clk;
  wire rd_en;
  wire [9:0]\reg_out_i_reg[9]_0 ;
  wire \reg_out_i_reg_n_0_[0] ;
  wire [7:1]\NLW_gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9]_i_1_CO_UNCONNECTED ;
  wire [7:2]\NLW_gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9]_i_1_O_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hF8)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_1 
       (.I0(rd_en),
        .I1(going_aempty0),
        .I2(leaving_aempty),
        .O(ram_aempty_i0));
  LUT5 #(
    .INIT(32'h82000000)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_2 
       (.I0(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_3_n_0 ),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [9]),
        .I2(Q[8]),
        .I3(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_4_n_0 ),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_5_n_0 ),
        .O(going_aempty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_3 
       (.I0(\reg_out_i_reg_n_0_[0] ),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [0]),
        .I2(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [2]),
        .I3(Q[1]),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [1]),
        .I5(Q[0]),
        .O(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_4 
       (.I0(Q[5]),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [6]),
        .I2(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [8]),
        .I3(Q[7]),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [7]),
        .I5(Q[6]),
        .O(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_5 
       (.I0(Q[2]),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [3]),
        .I2(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [5]),
        .I3(Q[4]),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg_0 [4]),
        .I5(Q[3]),
        .O(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_5_n_0 ));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1 
       (.CI(\reg_out_i_reg_n_0_[0] ),
        .CI_TOP(1'b0),
        .CO({\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_0 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_1 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_2 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_3 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_4 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_5 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_6 ,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_7 }),
        .DI({Q[6:0],DI}),
        .O(D[7:0]),
        .S(S));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9]_i_1 
       (.CI(\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[7]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9]_i_1_CO_UNCONNECTED [7:1],\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,Q[7]}),
        .O({\NLW_gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9]_i_1_O_UNCONNECTED [7:2],D[9:8]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\gen_pf_ic_rc.gpe_ic.diff_pntr_pe_reg[9] }));
  LUT6 #(
    .INIT(64'h8F88888F88888888)) 
    \gen_pf_ic_rc.ram_empty_i_i_1 
       (.I0(\gen_pf_ic_rc.ram_empty_i_reg ),
        .I1(leaving_aempty),
        .I2(\gen_pf_ic_rc.ram_empty_i_i_3_n_0 ),
        .I3(Q[8]),
        .I4(\gen_pf_ic_rc.ram_empty_i_reg_0 [8]),
        .I5(\gen_pf_ic_rc.ram_empty_i_i_4_n_0 ),
        .O(empty_i0));
  LUT5 #(
    .INIT(32'h82000000)) 
    \gen_pf_ic_rc.ram_empty_i_i_2 
       (.I0(\gen_pf_ic_rc.ram_empty_i_i_5_n_0 ),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [9]),
        .I2(Q[8]),
        .I3(\gen_pf_ic_rc.ram_empty_i_i_6_n_0 ),
        .I4(\gen_pf_ic_rc.ram_empty_i_i_7_n_0 ),
        .O(leaving_aempty));
  LUT6 #(
    .INIT(64'h6FFFFF6FFFFFFFFF)) 
    \gen_pf_ic_rc.ram_empty_i_i_3 
       (.I0(Q[3]),
        .I1(\gen_pf_ic_rc.ram_empty_i_reg_0 [4]),
        .I2(\gen_pf_ic_rc.ram_empty_i_reg_1 ),
        .I3(\gen_pf_ic_rc.ram_empty_i_reg_0 [3]),
        .I4(Q[2]),
        .I5(\gen_pf_ic_rc.ram_empty_i_i_9_n_0 ),
        .O(\gen_pf_ic_rc.ram_empty_i_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.ram_empty_i_i_4 
       (.I0(\reg_out_i_reg_n_0_[0] ),
        .I1(\gen_pf_ic_rc.ram_empty_i_reg_0 [0]),
        .I2(\gen_pf_ic_rc.ram_empty_i_reg_0 [2]),
        .I3(Q[1]),
        .I4(\gen_pf_ic_rc.ram_empty_i_reg_0 [1]),
        .I5(Q[0]),
        .O(\gen_pf_ic_rc.ram_empty_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.ram_empty_i_i_5 
       (.I0(\reg_out_i_reg_n_0_[0] ),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [0]),
        .I2(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [2]),
        .I3(Q[1]),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [1]),
        .I5(Q[0]),
        .O(\gen_pf_ic_rc.ram_empty_i_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.ram_empty_i_i_6 
       (.I0(Q[5]),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [6]),
        .I2(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [8]),
        .I3(Q[7]),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [7]),
        .I5(Q[6]),
        .O(\gen_pf_ic_rc.ram_empty_i_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.ram_empty_i_i_7 
       (.I0(Q[2]),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [3]),
        .I2(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [5]),
        .I3(Q[4]),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [4]),
        .I5(Q[3]),
        .O(\gen_pf_ic_rc.ram_empty_i_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.ram_empty_i_i_9 
       (.I0(Q[5]),
        .I1(\gen_pf_ic_rc.ram_empty_i_reg_0 [5]),
        .I2(\gen_pf_ic_rc.ram_empty_i_reg_0 [7]),
        .I3(Q[7]),
        .I4(\gen_pf_ic_rc.ram_empty_i_reg_0 [6]),
        .I5(Q[6]),
        .O(\gen_pf_ic_rc.ram_empty_i_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [0]),
        .Q(\reg_out_i_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [1]),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [2]),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [3]),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [4]),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [5]),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [6]),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [7]),
        .Q(Q[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [8]),
        .Q(Q[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[9] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[9]_0 [9]),
        .Q(Q[8]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_vec" *) 
module semicap_xpm_fifo_reg_vec__parameterized0
   (Q,
    wrst_busy,
    D,
    wr_clk);
  output [10:0]Q;
  input wrst_busy;
  input [10:0]D;
  input wr_clk;

  wire [10:0]D;
  wire [10:0]Q;
  wire wr_clk;
  wire wrst_busy;

  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(Q[0]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[10] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[10]),
        .Q(Q[10]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(Q[1]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(Q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(Q[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[4]),
        .Q(Q[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[5]),
        .Q(Q[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[6]),
        .Q(Q[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[7]),
        .Q(Q[7]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[8]),
        .Q(Q[8]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[9] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[9]),
        .Q(Q[9]),
        .R(wrst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_vec" *) 
module semicap_xpm_fifo_reg_vec__parameterized0_23
   (D,
    Q,
    SR,
    \reg_out_i_reg[10]_0 ,
    rd_clk);
  output [10:0]D;
  input [10:0]Q;
  input [0:0]SR;
  input [10:0]\reg_out_i_reg[10]_0 ;
  input rd_clk;

  wire [10:0]D;
  wire [10:0]Q;
  wire [0:0]SR;
  wire \grdc.rd_data_count_i[10]_i_2_n_0 ;
  wire \grdc.rd_data_count_i[10]_i_3_n_0 ;
  wire \grdc.rd_data_count_i[10]_i_4_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_2_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_3_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_4_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_5_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_6_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_7_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_8_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_9_n_0 ;
  wire \grdc.rd_data_count_i_reg[10]_i_1_n_6 ;
  wire \grdc.rd_data_count_i_reg[10]_i_1_n_7 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_0 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_1 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_2 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_3 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_4 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_5 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_6 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_7 ;
  wire rd_clk;
  wire [10:0]\reg_out_i_reg[10]_0 ;
  wire \reg_out_i_reg_n_0_[0] ;
  wire \reg_out_i_reg_n_0_[10] ;
  wire \reg_out_i_reg_n_0_[1] ;
  wire \reg_out_i_reg_n_0_[2] ;
  wire \reg_out_i_reg_n_0_[3] ;
  wire \reg_out_i_reg_n_0_[4] ;
  wire \reg_out_i_reg_n_0_[5] ;
  wire \reg_out_i_reg_n_0_[6] ;
  wire \reg_out_i_reg_n_0_[7] ;
  wire \reg_out_i_reg_n_0_[8] ;
  wire \reg_out_i_reg_n_0_[9] ;
  wire [7:2]\NLW_grdc.rd_data_count_i_reg[10]_i_1_CO_UNCONNECTED ;
  wire [7:3]\NLW_grdc.rd_data_count_i_reg[10]_i_1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[10]_i_2 
       (.I0(\reg_out_i_reg_n_0_[10] ),
        .I1(Q[10]),
        .O(\grdc.rd_data_count_i[10]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[10]_i_3 
       (.I0(\reg_out_i_reg_n_0_[9] ),
        .I1(Q[9]),
        .O(\grdc.rd_data_count_i[10]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[10]_i_4 
       (.I0(\reg_out_i_reg_n_0_[8] ),
        .I1(Q[8]),
        .O(\grdc.rd_data_count_i[10]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_2 
       (.I0(\reg_out_i_reg_n_0_[7] ),
        .I1(Q[7]),
        .O(\grdc.rd_data_count_i[7]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_3 
       (.I0(\reg_out_i_reg_n_0_[6] ),
        .I1(Q[6]),
        .O(\grdc.rd_data_count_i[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_4 
       (.I0(\reg_out_i_reg_n_0_[5] ),
        .I1(Q[5]),
        .O(\grdc.rd_data_count_i[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_5 
       (.I0(\reg_out_i_reg_n_0_[4] ),
        .I1(Q[4]),
        .O(\grdc.rd_data_count_i[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_6 
       (.I0(\reg_out_i_reg_n_0_[3] ),
        .I1(Q[3]),
        .O(\grdc.rd_data_count_i[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_7 
       (.I0(\reg_out_i_reg_n_0_[2] ),
        .I1(Q[2]),
        .O(\grdc.rd_data_count_i[7]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_8 
       (.I0(\reg_out_i_reg_n_0_[1] ),
        .I1(Q[1]),
        .O(\grdc.rd_data_count_i[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_9 
       (.I0(\reg_out_i_reg_n_0_[0] ),
        .I1(Q[0]),
        .O(\grdc.rd_data_count_i[7]_i_9_n_0 ));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \grdc.rd_data_count_i_reg[10]_i_1 
       (.CI(\grdc.rd_data_count_i_reg[7]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_grdc.rd_data_count_i_reg[10]_i_1_CO_UNCONNECTED [7:2],\grdc.rd_data_count_i_reg[10]_i_1_n_6 ,\grdc.rd_data_count_i_reg[10]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\reg_out_i_reg_n_0_[9] ,\reg_out_i_reg_n_0_[8] }),
        .O({\NLW_grdc.rd_data_count_i_reg[10]_i_1_O_UNCONNECTED [7:3],D[10:8]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,\grdc.rd_data_count_i[10]_i_2_n_0 ,\grdc.rd_data_count_i[10]_i_3_n_0 ,\grdc.rd_data_count_i[10]_i_4_n_0 }));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \grdc.rd_data_count_i_reg[7]_i_1 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\grdc.rd_data_count_i_reg[7]_i_1_n_0 ,\grdc.rd_data_count_i_reg[7]_i_1_n_1 ,\grdc.rd_data_count_i_reg[7]_i_1_n_2 ,\grdc.rd_data_count_i_reg[7]_i_1_n_3 ,\grdc.rd_data_count_i_reg[7]_i_1_n_4 ,\grdc.rd_data_count_i_reg[7]_i_1_n_5 ,\grdc.rd_data_count_i_reg[7]_i_1_n_6 ,\grdc.rd_data_count_i_reg[7]_i_1_n_7 }),
        .DI({\reg_out_i_reg_n_0_[7] ,\reg_out_i_reg_n_0_[6] ,\reg_out_i_reg_n_0_[5] ,\reg_out_i_reg_n_0_[4] ,\reg_out_i_reg_n_0_[3] ,\reg_out_i_reg_n_0_[2] ,\reg_out_i_reg_n_0_[1] ,\reg_out_i_reg_n_0_[0] }),
        .O(D[7:0]),
        .S({\grdc.rd_data_count_i[7]_i_2_n_0 ,\grdc.rd_data_count_i[7]_i_3_n_0 ,\grdc.rd_data_count_i[7]_i_4_n_0 ,\grdc.rd_data_count_i[7]_i_5_n_0 ,\grdc.rd_data_count_i[7]_i_6_n_0 ,\grdc.rd_data_count_i[7]_i_7_n_0 ,\grdc.rd_data_count_i[7]_i_8_n_0 ,\grdc.rd_data_count_i[7]_i_9_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [0]),
        .Q(\reg_out_i_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[10] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [10]),
        .Q(\reg_out_i_reg_n_0_[10] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [1]),
        .Q(\reg_out_i_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [2]),
        .Q(\reg_out_i_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [3]),
        .Q(\reg_out_i_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [4]),
        .Q(\reg_out_i_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [5]),
        .Q(\reg_out_i_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [6]),
        .Q(\reg_out_i_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [7]),
        .Q(\reg_out_i_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [8]),
        .Q(\reg_out_i_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[9] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[10]_0 [9]),
        .Q(\reg_out_i_reg_n_0_[9] ),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_vec" *) 
module semicap_xpm_fifo_reg_vec__parameterized1
   (D,
    \reg_out_i_reg[7]_0 ,
    \reg_out_i_reg[6]_0 ,
    wr_pntr_plus1_pf_carry,
    Q,
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2 ,
    wrst_busy,
    \reg_out_i_reg[7]_1 ,
    wr_clk);
  output [6:0]D;
  output [7:0]\reg_out_i_reg[7]_0 ;
  output \reg_out_i_reg[6]_0 ;
  input wr_pntr_plus1_pf_carry;
  input [7:0]Q;
  input [1:0]\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2 ;
  input wrst_busy;
  input [7:0]\reg_out_i_reg[7]_1 ;
  input wr_clk;

  wire [6:0]D;
  wire [7:0]Q;
  wire [1:0]\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_2_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_3_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_4_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_5_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_6_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_7_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_8_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_9_n_0 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_1 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_2 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_3 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_4 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_5 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_6 ;
  wire \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_7 ;
  wire \reg_out_i_reg[6]_0 ;
  wire [7:0]\reg_out_i_reg[7]_0 ;
  wire [7:0]\reg_out_i_reg[7]_1 ;
  wire wr_clk;
  wire wr_pntr_plus1_pf_carry;
  wire wrst_busy;
  wire [7:7]\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_CO_UNCONNECTED ;
  wire [0:0]\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_O_UNCONNECTED ;

  LUT4 #(
    .INIT(16'h6FF6)) 
    \gen_pf_ic_rc.gaf_ic.ram_afull_i_i_5 
       (.I0(\reg_out_i_reg[7]_0 [6]),
        .I1(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2 [0]),
        .I2(\reg_out_i_reg[7]_0 [7]),
        .I3(\gen_pf_ic_rc.gaf_ic.ram_afull_i_i_2 [1]),
        .O(\reg_out_i_reg[6]_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_2 
       (.I0(\reg_out_i_reg[7]_0 [7]),
        .I1(Q[7]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_3 
       (.I0(\reg_out_i_reg[7]_0 [6]),
        .I1(Q[6]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_4 
       (.I0(\reg_out_i_reg[7]_0 [5]),
        .I1(Q[5]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_5 
       (.I0(\reg_out_i_reg[7]_0 [4]),
        .I1(Q[4]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_6 
       (.I0(\reg_out_i_reg[7]_0 [3]),
        .I1(Q[3]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_7 
       (.I0(\reg_out_i_reg[7]_0 [2]),
        .I1(Q[2]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_8 
       (.I0(\reg_out_i_reg[7]_0 [1]),
        .I1(Q[1]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_9 
       (.I0(\reg_out_i_reg[7]_0 [0]),
        .I1(Q[0]),
        .O(\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_9_n_0 ));
  CARRY8 \gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1 
       (.CI(wr_pntr_plus1_pf_carry),
        .CI_TOP(1'b0),
        .CO({\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_CO_UNCONNECTED [7],\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_1 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_2 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_3 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_4 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_5 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_6 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_n_7 }),
        .DI({1'b0,Q[6:0]}),
        .O({D,\NLW_gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q_reg[8]_i_1_O_UNCONNECTED [0]}),
        .S({\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_2_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_3_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_4_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_5_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_6_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_7_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_8_n_0 ,\gen_pf_ic_rc.gpf_ic.diff_pntr_pf_q[8]_i_9_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[7]_1 [0]),
        .Q(\reg_out_i_reg[7]_0 [0]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[7]_1 [1]),
        .Q(\reg_out_i_reg[7]_0 [1]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[7]_1 [2]),
        .Q(\reg_out_i_reg[7]_0 [2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[7]_1 [3]),
        .Q(\reg_out_i_reg[7]_0 [3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[7]_1 [4]),
        .Q(\reg_out_i_reg[7]_0 [4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[7]_1 [5]),
        .Q(\reg_out_i_reg[7]_0 [5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[7]_1 [6]),
        .Q(\reg_out_i_reg[7]_0 [6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[7]_1 [7]),
        .Q(\reg_out_i_reg[7]_0 [7]),
        .R(wrst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_vec" *) 
module semicap_xpm_fifo_reg_vec__parameterized1_27
   (empty_i0,
    \reg_out_i_reg[7]_0 ,
    ram_aempty_i0,
    rd_en,
    \gen_pf_ic_rc.ram_empty_i_reg ,
    Q,
    \gen_pf_ic_rc.ram_empty_i_reg_0 ,
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg ,
    SR,
    D,
    rd_clk);
  output empty_i0;
  output [7:0]\reg_out_i_reg[7]_0 ;
  output ram_aempty_i0;
  input rd_en;
  input \gen_pf_ic_rc.ram_empty_i_reg ;
  input [7:0]Q;
  input [7:0]\gen_pf_ic_rc.ram_empty_i_reg_0 ;
  input [7:0]\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg ;
  input [0:0]SR;
  input [7:0]D;
  input rd_clk;

  wire [7:0]D;
  wire [7:0]Q;
  wire [0:0]SR;
  wire empty_i0;
  wire \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_3_n_0 ;
  wire \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_4_n_0 ;
  wire [7:0]\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg ;
  wire \gen_pf_ic_rc.ram_empty_i_i_4_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_i_5_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_i_6_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_i_7_n_0 ;
  wire \gen_pf_ic_rc.ram_empty_i_reg ;
  wire [7:0]\gen_pf_ic_rc.ram_empty_i_reg_0 ;
  wire going_aempty0;
  wire leaving_aempty;
  wire leaving_empty;
  wire ram_aempty_i0;
  wire rd_clk;
  wire rd_en;
  wire [7:0]\reg_out_i_reg[7]_0 ;

  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_1 
       (.I0(rd_en),
        .I1(going_aempty0),
        .I2(leaving_aempty),
        .O(ram_aempty_i0));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_2 
       (.I0(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [7]),
        .I1(\reg_out_i_reg[7]_0 [7]),
        .I2(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [6]),
        .I3(\reg_out_i_reg[7]_0 [6]),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_3_n_0 ),
        .I5(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_4_n_0 ),
        .O(going_aempty0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_3 
       (.I0(\reg_out_i_reg[7]_0 [3]),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [3]),
        .I2(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [5]),
        .I3(\reg_out_i_reg[7]_0 [5]),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [4]),
        .I5(\reg_out_i_reg[7]_0 [4]),
        .O(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_4 
       (.I0(\reg_out_i_reg[7]_0 [0]),
        .I1(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [0]),
        .I2(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [2]),
        .I3(\reg_out_i_reg[7]_0 [2]),
        .I4(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_reg [1]),
        .I5(\reg_out_i_reg[7]_0 [1]),
        .O(\gen_pf_ic_rc.gae_ic_std.ram_aempty_i_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'hFF20)) 
    \gen_pf_ic_rc.ram_empty_i_i_1 
       (.I0(rd_en),
        .I1(\gen_pf_ic_rc.ram_empty_i_reg ),
        .I2(leaving_aempty),
        .I3(leaving_empty),
        .O(empty_i0));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \gen_pf_ic_rc.ram_empty_i_i_2 
       (.I0(Q[7]),
        .I1(\reg_out_i_reg[7]_0 [7]),
        .I2(Q[6]),
        .I3(\reg_out_i_reg[7]_0 [6]),
        .I4(\gen_pf_ic_rc.ram_empty_i_i_4_n_0 ),
        .I5(\gen_pf_ic_rc.ram_empty_i_i_5_n_0 ),
        .O(leaving_aempty));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \gen_pf_ic_rc.ram_empty_i_i_3 
       (.I0(\gen_pf_ic_rc.ram_empty_i_reg_0 [7]),
        .I1(\reg_out_i_reg[7]_0 [7]),
        .I2(\gen_pf_ic_rc.ram_empty_i_reg_0 [6]),
        .I3(\reg_out_i_reg[7]_0 [6]),
        .I4(\gen_pf_ic_rc.ram_empty_i_i_6_n_0 ),
        .I5(\gen_pf_ic_rc.ram_empty_i_i_7_n_0 ),
        .O(leaving_empty));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.ram_empty_i_i_4 
       (.I0(\reg_out_i_reg[7]_0 [3]),
        .I1(Q[3]),
        .I2(Q[5]),
        .I3(\reg_out_i_reg[7]_0 [5]),
        .I4(Q[4]),
        .I5(\reg_out_i_reg[7]_0 [4]),
        .O(\gen_pf_ic_rc.ram_empty_i_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.ram_empty_i_i_5 
       (.I0(\reg_out_i_reg[7]_0 [0]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(\reg_out_i_reg[7]_0 [2]),
        .I4(Q[1]),
        .I5(\reg_out_i_reg[7]_0 [1]),
        .O(\gen_pf_ic_rc.ram_empty_i_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.ram_empty_i_i_6 
       (.I0(\reg_out_i_reg[7]_0 [3]),
        .I1(\gen_pf_ic_rc.ram_empty_i_reg_0 [3]),
        .I2(\gen_pf_ic_rc.ram_empty_i_reg_0 [5]),
        .I3(\reg_out_i_reg[7]_0 [5]),
        .I4(\gen_pf_ic_rc.ram_empty_i_reg_0 [4]),
        .I5(\reg_out_i_reg[7]_0 [4]),
        .O(\gen_pf_ic_rc.ram_empty_i_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \gen_pf_ic_rc.ram_empty_i_i_7 
       (.I0(\reg_out_i_reg[7]_0 [0]),
        .I1(\gen_pf_ic_rc.ram_empty_i_reg_0 [0]),
        .I2(\gen_pf_ic_rc.ram_empty_i_reg_0 [2]),
        .I3(\reg_out_i_reg[7]_0 [2]),
        .I4(\gen_pf_ic_rc.ram_empty_i_reg_0 [1]),
        .I5(\reg_out_i_reg[7]_0 [1]),
        .O(\gen_pf_ic_rc.ram_empty_i_i_7_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\reg_out_i_reg[7]_0 [0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\reg_out_i_reg[7]_0 [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\reg_out_i_reg[7]_0 [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\reg_out_i_reg[7]_0 [3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\reg_out_i_reg[7]_0 [4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(D[5]),
        .Q(\reg_out_i_reg[7]_0 [5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(D[6]),
        .Q(\reg_out_i_reg[7]_0 [6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(D[7]),
        .Q(\reg_out_i_reg[7]_0 [7]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_vec" *) 
module semicap_xpm_fifo_reg_vec__parameterized2
   (Q,
    wrst_busy,
    D,
    wr_clk);
  output [8:0]Q;
  input wrst_busy;
  input [8:0]D;
  input wr_clk;

  wire [8:0]D;
  wire [8:0]Q;
  wire wr_clk;
  wire wrst_busy;

  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(Q[0]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(Q[1]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(Q[2]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(Q[3]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[4]),
        .Q(Q[4]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[5]),
        .Q(Q[5]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[6]),
        .Q(Q[6]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[7]),
        .Q(Q[7]),
        .R(wrst_busy));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(D[8]),
        .Q(Q[8]),
        .R(wrst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_reg_vec" *) 
module semicap_xpm_fifo_reg_vec__parameterized2_28
   (D,
    Q,
    SR,
    \reg_out_i_reg[8]_0 ,
    rd_clk);
  output [8:0]D;
  input [8:0]Q;
  input [0:0]SR;
  input [8:0]\reg_out_i_reg[8]_0 ;
  input rd_clk;

  wire [8:0]D;
  wire [8:0]Q;
  wire [0:0]SR;
  wire \grdc.rd_data_count_i[7]_i_2_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_3_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_4_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_5_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_6_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_7_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_8_n_0 ;
  wire \grdc.rd_data_count_i[7]_i_9_n_0 ;
  wire \grdc.rd_data_count_i[8]_i_2_n_0 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_0 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_1 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_2 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_3 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_4 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_5 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_6 ;
  wire \grdc.rd_data_count_i_reg[7]_i_1_n_7 ;
  wire rd_clk;
  wire [8:0]\reg_out_i_reg[8]_0 ;
  wire \reg_out_i_reg_n_0_[0] ;
  wire \reg_out_i_reg_n_0_[1] ;
  wire \reg_out_i_reg_n_0_[2] ;
  wire \reg_out_i_reg_n_0_[3] ;
  wire \reg_out_i_reg_n_0_[4] ;
  wire \reg_out_i_reg_n_0_[5] ;
  wire \reg_out_i_reg_n_0_[6] ;
  wire \reg_out_i_reg_n_0_[7] ;
  wire \reg_out_i_reg_n_0_[8] ;
  wire [7:0]\NLW_grdc.rd_data_count_i_reg[8]_i_1_CO_UNCONNECTED ;
  wire [7:1]\NLW_grdc.rd_data_count_i_reg[8]_i_1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_2 
       (.I0(\reg_out_i_reg_n_0_[7] ),
        .I1(Q[7]),
        .O(\grdc.rd_data_count_i[7]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_3 
       (.I0(\reg_out_i_reg_n_0_[6] ),
        .I1(Q[6]),
        .O(\grdc.rd_data_count_i[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_4 
       (.I0(\reg_out_i_reg_n_0_[5] ),
        .I1(Q[5]),
        .O(\grdc.rd_data_count_i[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_5 
       (.I0(\reg_out_i_reg_n_0_[4] ),
        .I1(Q[4]),
        .O(\grdc.rd_data_count_i[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_6 
       (.I0(\reg_out_i_reg_n_0_[3] ),
        .I1(Q[3]),
        .O(\grdc.rd_data_count_i[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_7 
       (.I0(\reg_out_i_reg_n_0_[2] ),
        .I1(Q[2]),
        .O(\grdc.rd_data_count_i[7]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_8 
       (.I0(\reg_out_i_reg_n_0_[1] ),
        .I1(Q[1]),
        .O(\grdc.rd_data_count_i[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[7]_i_9 
       (.I0(\reg_out_i_reg_n_0_[0] ),
        .I1(Q[0]),
        .O(\grdc.rd_data_count_i[7]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \grdc.rd_data_count_i[8]_i_2 
       (.I0(\reg_out_i_reg_n_0_[8] ),
        .I1(Q[8]),
        .O(\grdc.rd_data_count_i[8]_i_2_n_0 ));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \grdc.rd_data_count_i_reg[7]_i_1 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\grdc.rd_data_count_i_reg[7]_i_1_n_0 ,\grdc.rd_data_count_i_reg[7]_i_1_n_1 ,\grdc.rd_data_count_i_reg[7]_i_1_n_2 ,\grdc.rd_data_count_i_reg[7]_i_1_n_3 ,\grdc.rd_data_count_i_reg[7]_i_1_n_4 ,\grdc.rd_data_count_i_reg[7]_i_1_n_5 ,\grdc.rd_data_count_i_reg[7]_i_1_n_6 ,\grdc.rd_data_count_i_reg[7]_i_1_n_7 }),
        .DI({\reg_out_i_reg_n_0_[7] ,\reg_out_i_reg_n_0_[6] ,\reg_out_i_reg_n_0_[5] ,\reg_out_i_reg_n_0_[4] ,\reg_out_i_reg_n_0_[3] ,\reg_out_i_reg_n_0_[2] ,\reg_out_i_reg_n_0_[1] ,\reg_out_i_reg_n_0_[0] }),
        .O(D[7:0]),
        .S({\grdc.rd_data_count_i[7]_i_2_n_0 ,\grdc.rd_data_count_i[7]_i_3_n_0 ,\grdc.rd_data_count_i[7]_i_4_n_0 ,\grdc.rd_data_count_i[7]_i_5_n_0 ,\grdc.rd_data_count_i[7]_i_6_n_0 ,\grdc.rd_data_count_i[7]_i_7_n_0 ,\grdc.rd_data_count_i[7]_i_8_n_0 ,\grdc.rd_data_count_i[7]_i_9_n_0 }));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \grdc.rd_data_count_i_reg[8]_i_1 
       (.CI(\grdc.rd_data_count_i_reg[7]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO(\NLW_grdc.rd_data_count_i_reg[8]_i_1_CO_UNCONNECTED [7:0]),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_grdc.rd_data_count_i_reg[8]_i_1_O_UNCONNECTED [7:1],D[8]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\grdc.rd_data_count_i[8]_i_2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[8]_0 [0]),
        .Q(\reg_out_i_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[8]_0 [1]),
        .Q(\reg_out_i_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[8]_0 [2]),
        .Q(\reg_out_i_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[8]_0 [3]),
        .Q(\reg_out_i_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[8]_0 [4]),
        .Q(\reg_out_i_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[8]_0 [5]),
        .Q(\reg_out_i_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[8]_0 [6]),
        .Q(\reg_out_i_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[8]_0 [7]),
        .Q(\reg_out_i_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \reg_out_i_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\reg_out_i_reg[8]_0 [8]),
        .Q(\reg_out_i_reg_n_0_[8] ),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module semicap_xpm_fifo_rst
   (SR,
    wrst_busy,
    d_out_reg,
    wr_pntr_plus1_pf_carry,
    wr_rst_busy,
    underflow_i0,
    rd_clk,
    wr_clk,
    rst,
    rst_d1,
    \gwack.wr_ack_i_reg ,
    wr_en,
    \guf.underflow_i_reg ,
    rd_en);
  output [0:0]SR;
  output wrst_busy;
  output d_out_reg;
  output wr_pntr_plus1_pf_carry;
  output wr_rst_busy;
  output underflow_i0;
  input rd_clk;
  input wr_clk;
  input rst;
  input rst_d1;
  input \gwack.wr_ack_i_reg ;
  input wr_en;
  input \guf.underflow_i_reg ;
  input rd_en;

  wire \/i__n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[0]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_2_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[2]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[3]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_2_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ;
  wire [0:0]SR;
  wire d_out_reg;
  wire [1:0]\gen_rst_ic.curr_rrst_state ;
  wire \gen_rst_ic.fifo_rd_rst_i ;
  wire \gen_rst_ic.fifo_rd_rst_wr_i ;
  wire \gen_rst_ic.fifo_wr_rst_ic ;
  wire \gen_rst_ic.fifo_wr_rst_ic_i_1_n_0 ;
  wire \gen_rst_ic.fifo_wr_rst_ic_i_3_n_0 ;
  wire \gen_rst_ic.fifo_wr_rst_rd ;
  wire [1:0]\gen_rst_ic.next_rrst_state ;
  wire \gen_rst_ic.rst_seq_reentered_i_1_n_0 ;
  wire \gen_rst_ic.rst_seq_reentered_i_2_n_0 ;
  wire \gen_rst_ic.rst_seq_reentered_reg_n_0 ;
  wire \gen_rst_ic.wr_rst_busy_ic_i_1_n_0 ;
  wire \gen_rst_ic.wr_rst_busy_ic_i_2_n_0 ;
  wire \guf.underflow_i_reg ;
  wire \gwack.wr_ack_i_reg ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire rst_d1;
  wire rst_i__0;
  wire underflow_i0;
  wire wr_clk;
  wire wr_en;
  wire wr_pntr_plus1_pf_carry;
  wire wr_rst_busy;
  wire wrst_busy;

  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \/i_ 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .O(\/i__n_0 ));
  LUT6 #(
    .INIT(64'h03030200FFFFFFFF)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[0]_i_1 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I1(p_0_in),
        .I2(rst),
        .I3(\gen_rst_ic.rst_seq_reentered_reg_n_0 ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I5(\/i__n_0 ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'hFEFEFEEE)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_1 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_2_n_0 ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I3(rst),
        .I4(p_0_in),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF0EEE0FFFFEEE0)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_2 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I2(rst),
        .I3(p_0_in),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I5(\gen_rst_ic.fifo_rd_rst_wr_i ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT5 #(
    .INIT(32'h03000200)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[2]_i_1 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I1(rst),
        .I2(p_0_in),
        .I3(\gen_rst_ic.fifo_rd_rst_wr_i ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[3]_i_1 
       (.I0(\gen_rst_ic.fifo_rd_rst_wr_i ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I2(rst),
        .I3(p_0_in),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[3]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1 
       (.I0(\/i__n_0 ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_2 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I1(p_0_in),
        .I2(rst),
        .I3(\gen_rst_ic.rst_seq_reentered_reg_n_0 ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_2_n_0 ));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[0]_i_1_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .R(1'b0));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_1_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .R(\FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[2]_i_1_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .R(\FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[3]_i_1_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .R(\FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_2_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .R(\FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \FSM_sequential_gen_rst_ic.curr_rrst_state[1]_i_1 
       (.I0(\gen_rst_ic.curr_rrst_state [0]),
        .I1(\gen_rst_ic.curr_rrst_state [1]),
        .O(\gen_rst_ic.next_rrst_state [1]));
  (* FSM_ENCODED_STATES = "RRST_IDLE:00,RRST_IN:01,RRST_OUT:10,RRST_EXIT:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_rst_ic.curr_rrst_state_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.next_rrst_state [0]),
        .Q(\gen_rst_ic.curr_rrst_state [0]),
        .R(1'b0));
  (* FSM_ENCODED_STATES = "RRST_IDLE:00,RRST_IN:01,RRST_OUT:10,RRST_EXIT:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_rst_ic.curr_rrst_state_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.next_rrst_state [1]),
        .Q(\gen_rst_ic.curr_rrst_state [1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT3 #(
    .INIT(8'h06)) 
    \__0/i_ 
       (.I0(\gen_rst_ic.fifo_wr_rst_rd ),
        .I1(\gen_rst_ic.curr_rrst_state [1]),
        .I2(\gen_rst_ic.curr_rrst_state [0]),
        .O(\gen_rst_ic.next_rrst_state [0]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT3 #(
    .INIT(8'h3E)) 
    \gen_rst_ic.fifo_rd_rst_ic_i_1 
       (.I0(\gen_rst_ic.fifo_wr_rst_rd ),
        .I1(\gen_rst_ic.curr_rrst_state [1]),
        .I2(\gen_rst_ic.curr_rrst_state [0]),
        .O(\gen_rst_ic.fifo_rd_rst_i ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rst_ic.fifo_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.fifo_rd_rst_i ),
        .Q(SR),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFEAFFFFFFEA0000)) 
    \gen_rst_ic.fifo_wr_rst_ic_i_1 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I2(rst_i__0),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I4(\gen_rst_ic.fifo_wr_rst_ic_i_3_n_0 ),
        .I5(\gen_rst_ic.fifo_wr_rst_ic ),
        .O(\gen_rst_ic.fifo_wr_rst_ic_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \gen_rst_ic.fifo_wr_rst_ic_i_2 
       (.I0(p_0_in),
        .I1(rst),
        .O(rst_i__0));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \gen_rst_ic.fifo_wr_rst_ic_i_3 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .O(\gen_rst_ic.fifo_wr_rst_ic_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rst_ic.fifo_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.fifo_wr_rst_ic_i_1_n_0 ),
        .Q(\gen_rst_ic.fifo_wr_rst_ic ),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "4" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_sync_rst \gen_rst_ic.rrst_wr_inst 
       (.dest_clk(wr_clk),
        .dest_rst(\gen_rst_ic.fifo_rd_rst_wr_i ),
        .src_rst(SR));
  LUT3 #(
    .INIT(8'h02)) 
    \gen_rst_ic.rst_seq_reentered_i_1 
       (.I0(\gen_rst_ic.rst_seq_reentered_i_2_n_0 ),
        .I1(rst),
        .I2(p_0_in),
        .O(\gen_rst_ic.rst_seq_reentered_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00010000)) 
    \gen_rst_ic.rst_seq_reentered_i_2 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .I5(\gen_rst_ic.rst_seq_reentered_reg_n_0 ),
        .O(\gen_rst_ic.rst_seq_reentered_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rst_ic.rst_seq_reentered_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.rst_seq_reentered_i_1_n_0 ),
        .Q(\gen_rst_ic.rst_seq_reentered_reg_n_0 ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEFFFEF00)) 
    \gen_rst_ic.wr_rst_busy_ic_i_1 
       (.I0(rst),
        .I1(p_0_in),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I3(\gen_rst_ic.wr_rst_busy_ic_i_2_n_0 ),
        .I4(wrst_busy),
        .O(\gen_rst_ic.wr_rst_busy_ic_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000116)) 
    \gen_rst_ic.wr_rst_busy_ic_i_2 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .O(\gen_rst_ic.wr_rst_busy_ic_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rst_ic.wr_rst_busy_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.wr_rst_busy_ic_i_1_n_0 ),
        .Q(wrst_busy),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "4" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_sync_rst__6 \gen_rst_ic.wrst_rd_inst 
       (.dest_clk(rd_clk),
        .dest_rst(\gen_rst_ic.fifo_wr_rst_rd ),
        .src_rst(\gen_rst_ic.fifo_wr_rst_ic ));
  LUT4 #(
    .INIT(16'h0002)) 
    \gen_sdpram.xpm_memory_base_inst_i_1 
       (.I0(wr_en),
        .I1(\gwack.wr_ack_i_reg ),
        .I2(wrst_busy),
        .I3(rst_d1),
        .O(wr_pntr_plus1_pf_carry));
  LUT3 #(
    .INIT(8'hE0)) 
    \guf.underflow_i_i_1 
       (.I0(\guf.underflow_i_reg ),
        .I1(SR),
        .I2(rd_en),
        .O(underflow_i0));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \gwack.wr_ack_i_i_1 
       (.I0(rst_d1),
        .I1(\gwack.wr_ack_i_reg ),
        .I2(wr_en),
        .I3(wrst_busy),
        .I4(\gen_rst_ic.fifo_wr_rst_ic ),
        .I5(rst),
        .O(d_out_reg));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(wrst_busy),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "xpm_fifo_rst" *) 
module semicap_xpm_fifo_rst__xdcDup__1
   (SR,
    wrst_busy,
    \gen_rst_ic.fifo_wr_rst_ic_reg_0 ,
    wr_rst_busy,
    underflow_i0,
    \gen_rst_ic.wr_rst_busy_ic_reg_0 ,
    \gen_rst_ic.wr_rst_busy_ic_reg_1 ,
    rd_clk,
    wr_clk,
    rst,
    wr_en,
    \gwack.wr_ack_i_reg ,
    rst_d1,
    \guf.underflow_i_reg ,
    rd_en);
  output [0:0]SR;
  output wrst_busy;
  output \gen_rst_ic.fifo_wr_rst_ic_reg_0 ;
  output wr_rst_busy;
  output underflow_i0;
  output \gen_rst_ic.wr_rst_busy_ic_reg_0 ;
  output \gen_rst_ic.wr_rst_busy_ic_reg_1 ;
  input rd_clk;
  input wr_clk;
  input rst;
  input wr_en;
  input \gwack.wr_ack_i_reg ;
  input rst_d1;
  input \guf.underflow_i_reg ;
  input rd_en;

  wire \/i__n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[0]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_2_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[2]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[3]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1_n_0 ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ;
  wire \FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ;
  wire [0:0]SR;
  wire [1:0]\gen_rst_ic.curr_rrst_state ;
  wire \gen_rst_ic.fifo_rd_rst_i ;
  wire \gen_rst_ic.fifo_rd_rst_wr_i ;
  wire \gen_rst_ic.fifo_wr_rst_ic ;
  wire \gen_rst_ic.fifo_wr_rst_ic_i_1_n_0 ;
  wire \gen_rst_ic.fifo_wr_rst_ic_i_2_n_0 ;
  wire \gen_rst_ic.fifo_wr_rst_ic_i_3_n_0 ;
  wire \gen_rst_ic.fifo_wr_rst_ic_reg_0 ;
  wire \gen_rst_ic.fifo_wr_rst_rd ;
  wire [1:0]\gen_rst_ic.next_rrst_state ;
  wire \gen_rst_ic.rst_seq_reentered ;
  wire \gen_rst_ic.rst_seq_reentered_i_1_n_0 ;
  wire \gen_rst_ic.rst_seq_reentered_reg_n_0 ;
  wire \gen_rst_ic.wr_rst_busy_ic_i_1_n_0 ;
  wire \gen_rst_ic.wr_rst_busy_ic_i_2_n_0 ;
  wire \gen_rst_ic.wr_rst_busy_ic_reg_0 ;
  wire \gen_rst_ic.wr_rst_busy_ic_reg_1 ;
  wire \guf.underflow_i_reg ;
  wire \gwack.wr_ack_i_reg ;
  wire p_0_in;
  wire \power_on_rst_reg_n_0_[0] ;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire rst_d1;
  wire underflow_i0;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;
  wire wrst_busy;

  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \/i_ 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .O(\/i__n_0 ));
  LUT6 #(
    .INIT(64'h333F333B333B333B)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[0]_i_1 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I1(\/i__n_0 ),
        .I2(p_0_in),
        .I3(rst),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I5(\gen_rst_ic.rst_seq_reentered_reg_n_0 ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA8A8A888A8A8A8A8)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_1 
       (.I0(\/i__n_0 ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_2_n_0 ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I3(rst),
        .I4(p_0_in),
        .I5(\gen_rst_ic.fifo_rd_rst_wr_i ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFE00)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_2 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I3(p_0_in),
        .I4(rst),
        .I5(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0200020002000000)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[2]_i_1 
       (.I0(\/i__n_0 ),
        .I1(rst),
        .I2(p_0_in),
        .I3(\gen_rst_ic.fifo_rd_rst_wr_i ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I5(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[3]_i_1 
       (.I0(\/i__n_0 ),
        .I1(rst),
        .I2(p_0_in),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I4(\gen_rst_ic.fifo_rd_rst_wr_i ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT5 #(
    .INIT(32'h00000200)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1 
       (.I0(\/i__n_0 ),
        .I1(rst),
        .I2(p_0_in),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I4(\gen_rst_ic.rst_seq_reentered_reg_n_0 ),
        .O(\FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[0]_i_1_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .R(1'b0));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[1]_i_1_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .R(1'b0));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[2]_i_1_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .R(1'b0));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[3]_i_1_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .R(1'b0));
  (* FSM_ENCODED_STATES = "WRST_OUT:00100,WRST_IN:00010,WRST_GO2IDLE:10000,WRST_EXIT:01000,WRST_IDLE:00001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_gen_rst_ic.curr_wrst_state_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\FSM_onehot_gen_rst_ic.curr_wrst_state[4]_i_1_n_0 ),
        .Q(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \FSM_sequential_gen_rst_ic.curr_rrst_state[1]_i_1 
       (.I0(\gen_rst_ic.curr_rrst_state [0]),
        .I1(\gen_rst_ic.curr_rrst_state [1]),
        .O(\gen_rst_ic.next_rrst_state [1]));
  (* FSM_ENCODED_STATES = "RRST_IDLE:00,RRST_IN:01,RRST_OUT:10,RRST_EXIT:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_rst_ic.curr_rrst_state_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.next_rrst_state [0]),
        .Q(\gen_rst_ic.curr_rrst_state [0]),
        .R(1'b0));
  (* FSM_ENCODED_STATES = "RRST_IDLE:00,RRST_IN:01,RRST_OUT:10,RRST_EXIT:11" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_gen_rst_ic.curr_rrst_state_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.next_rrst_state [1]),
        .Q(\gen_rst_ic.curr_rrst_state [1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'h06)) 
    \__0/i_ 
       (.I0(\gen_rst_ic.fifo_wr_rst_rd ),
        .I1(\gen_rst_ic.curr_rrst_state [1]),
        .I2(\gen_rst_ic.curr_rrst_state [0]),
        .O(\gen_rst_ic.next_rrst_state [0]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'hFEFF)) 
    \gen_pf_ic_rc.gen_full_rst_val.ram_full_i_i_4 
       (.I0(wrst_busy),
        .I1(rst_d1),
        .I2(\gwack.wr_ack_i_reg ),
        .I3(wr_en),
        .O(\gen_rst_ic.wr_rst_busy_ic_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'h3E)) 
    \gen_rst_ic.fifo_rd_rst_ic_i_1 
       (.I0(\gen_rst_ic.fifo_wr_rst_rd ),
        .I1(\gen_rst_ic.curr_rrst_state [1]),
        .I2(\gen_rst_ic.curr_rrst_state [0]),
        .O(\gen_rst_ic.fifo_rd_rst_i ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rst_ic.fifo_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.fifo_rd_rst_i ),
        .Q(SR),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFAEFFFFFFAE0000)) 
    \gen_rst_ic.fifo_wr_rst_ic_i_1 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I2(\gen_rst_ic.fifo_wr_rst_ic_i_2_n_0 ),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .I4(\gen_rst_ic.fifo_wr_rst_ic_i_3_n_0 ),
        .I5(\gen_rst_ic.fifo_wr_rst_ic ),
        .O(\gen_rst_ic.fifo_wr_rst_ic_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \gen_rst_ic.fifo_wr_rst_ic_i_2 
       (.I0(rst),
        .I1(p_0_in),
        .O(\gen_rst_ic.fifo_wr_rst_ic_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    \gen_rst_ic.fifo_wr_rst_ic_i_3 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .O(\gen_rst_ic.fifo_wr_rst_ic_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rst_ic.fifo_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.fifo_wr_rst_ic_i_1_n_0 ),
        .Q(\gen_rst_ic.fifo_wr_rst_ic ),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "4" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_sync_rst__5 \gen_rst_ic.rrst_wr_inst 
       (.dest_clk(wr_clk),
        .dest_rst(\gen_rst_ic.fifo_rd_rst_wr_i ),
        .src_rst(SR));
  LUT4 #(
    .INIT(16'h000E)) 
    \gen_rst_ic.rst_seq_reentered_i_1 
       (.I0(\gen_rst_ic.rst_seq_reentered_reg_n_0 ),
        .I1(\gen_rst_ic.rst_seq_reentered ),
        .I2(p_0_in),
        .I3(rst),
        .O(\gen_rst_ic.rst_seq_reentered_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'h00000100)) 
    \gen_rst_ic.rst_seq_reentered_i_2 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .O(\gen_rst_ic.rst_seq_reentered ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rst_ic.rst_seq_reentered_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.rst_seq_reentered_i_1_n_0 ),
        .Q(\gen_rst_ic.rst_seq_reentered_reg_n_0 ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEFFFEF00)) 
    \gen_rst_ic.wr_rst_busy_ic_i_1 
       (.I0(rst),
        .I1(p_0_in),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I3(\gen_rst_ic.wr_rst_busy_ic_i_2_n_0 ),
        .I4(wrst_busy),
        .O(\gen_rst_ic.wr_rst_busy_ic_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'h00000116)) 
    \gen_rst_ic.wr_rst_busy_ic_i_2 
       (.I0(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[2] ),
        .I1(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[3] ),
        .I2(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[1] ),
        .I3(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[0] ),
        .I4(\FSM_onehot_gen_rst_ic.curr_wrst_state_reg_n_0_[4] ),
        .O(\gen_rst_ic.wr_rst_busy_ic_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gen_rst_ic.wr_rst_busy_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gen_rst_ic.wr_rst_busy_ic_i_1_n_0 ),
        .Q(wrst_busy),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "4" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  semicap_xpm_cdc_sync_rst__4 \gen_rst_ic.wrst_rd_inst 
       (.dest_clk(rd_clk),
        .dest_rst(\gen_rst_ic.fifo_wr_rst_rd ),
        .src_rst(\gen_rst_ic.fifo_wr_rst_ic ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    \gof.overflow_i_i_1 
       (.I0(wrst_busy),
        .I1(rst_d1),
        .I2(\gwack.wr_ack_i_reg ),
        .I3(wr_en),
        .O(\gen_rst_ic.wr_rst_busy_ic_reg_1 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \guf.underflow_i_i_1 
       (.I0(\guf.underflow_i_reg ),
        .I1(SR),
        .I2(rd_en),
        .O(underflow_i0));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \gwack.wr_ack_i_i_1 
       (.I0(rst),
        .I1(\gen_rst_ic.fifo_wr_rst_ic ),
        .I2(wr_en),
        .I3(\gwack.wr_ack_i_reg ),
        .I4(rst_d1),
        .I5(wrst_busy),
        .O(\gen_rst_ic.fifo_wr_rst_ic_reg_0 ));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\power_on_rst_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    \power_on_rst_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\power_on_rst_reg_n_0_[0] ),
        .Q(p_0_in),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    wr_rst_busy_INST_0
       (.I0(wrst_busy),
        .I1(rst_d1),
        .O(wr_rst_busy));
endmodule

(* ADDR_WIDTH_A = "10" *) (* ADDR_WIDTH_B = "10" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "32" *) (* BYTE_WRITE_WIDTH_B = "32" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "1" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "32768" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "1024" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "block" *) 
(* P_MIN_WIDTH_DATA = "32" *) (* P_MIN_WIDTH_DATA_A = "32" *) (* P_MIN_WIDTH_DATA_B = "32" *) 
(* P_MIN_WIDTH_DATA_ECC = "32" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "no" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "10" *) 
(* P_WIDTH_ADDR_READ_B = "10" *) (* P_WIDTH_ADDR_WRITE_A = "10" *) (* P_WIDTH_ADDR_WRITE_B = "10" *) 
(* P_WIDTH_COL_WRITE_A = "32" *) (* P_WIDTH_COL_WRITE_B = "32" *) (* READ_DATA_WIDTH_A = "32" *) 
(* READ_DATA_WIDTH_B = "32" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "1" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* VERSION = "0" *) (* WAKEUP_TIME = "0" *) 
(* WRITE_DATA_WIDTH_A = "32" *) (* WRITE_DATA_WIDTH_B = "32" *) (* WRITE_MODE_A = "2" *) 
(* WRITE_MODE_B = "2" *) (* XPM_MODULE = "TRUE" *) (* rsta_loop_iter = "32" *) 
(* rstb_loop_iter = "32" *) 
module semicap_xpm_memory_base
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [9:0]addra;
  input [31:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [31:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [9:0]addrb;
  input [31:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [31:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [9:0]addra;
  wire [9:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire \gen_wr_a.gen_word_narrow.mem_reg_bram_0_i_1_n_0 ;
  wire rstb;
  wire sleep;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_DBITERR_UNCONNECTED ;
  wire \NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_DOUTADOUT_UNCONNECTED ;
  wire [3:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_DOUTPADOUTP_UNCONNECTED ;
  wire [3:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_RDADDRECC_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "1023" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p0_d32" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "31" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "1023" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d32" *) 
  (* \MEM.PORTB.DATA_LSB  = "0" *) 
  (* \MEM.PORTB.DATA_MSB  = "31" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* RDADDR_COLLISION_HWCONFIG = "DELAYED_WRITE" *) 
  (* RTL_RAM_BITS = "32768" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* bram_addr_begin = "0" *) 
  (* bram_addr_end = "1023" *) 
  (* bram_slice_begin = "0" *) 
  (* bram_slice_end = "31" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "1023" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "31" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("TRUE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("NO_CHANGE"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \gen_wr_a.gen_word_narrow.mem_reg_bram_0 
       (.ADDRARDADDR({addra,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({addrb,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b1),
        .CASDOMUXEN_B(1'b1),
        .CASDOUTA(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b1),
        .CASOREGIMUXEN_B(1'b1),
        .CASOUTDBITERR(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clkb),
        .DBITERR(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_DBITERR_UNCONNECTED ),
        .DINADIN(dina),
        .DINBDIN({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT(doutb),
        .DOUTPADOUTP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_DOUTPBDOUTP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b1),
        .ENARDEN(ena),
        .ENBWREN(\gen_wr_a.gen_word_narrow.mem_reg_bram_0_i_1_n_0 ),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(rstb),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_gen_wr_a.gen_word_narrow.mem_reg_bram_0_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({ena,ena,ena,ena}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_bram_0_i_1 
       (.I0(rstb),
        .I1(enb),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_bram_0_i_1_n_0 ));
endmodule

(* ADDR_WIDTH_A = "8" *) (* ADDR_WIDTH_B = "8" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "32" *) (* BYTE_WRITE_WIDTH_B = "32" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "1" *) (* ECC_MODE = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "" *) (* MEMORY_OPTIMIZATION = "true" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "8192" *) (* MEMORY_TYPE = "1" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "no_ecc" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "256" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "block" *) 
(* P_MIN_WIDTH_DATA = "32" *) (* P_MIN_WIDTH_DATA_A = "32" *) (* P_MIN_WIDTH_DATA_B = "32" *) 
(* P_MIN_WIDTH_DATA_ECC = "32" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "32" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "no" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "8" *) 
(* P_WIDTH_ADDR_READ_B = "8" *) (* P_WIDTH_ADDR_WRITE_A = "8" *) (* P_WIDTH_ADDR_WRITE_B = "8" *) 
(* P_WIDTH_COL_WRITE_A = "32" *) (* P_WIDTH_COL_WRITE_B = "32" *) (* READ_DATA_WIDTH_A = "32" *) 
(* READ_DATA_WIDTH_B = "32" *) (* READ_LATENCY_A = "2" *) (* READ_LATENCY_B = "1" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "0" *) (* VERSION = "0" *) (* WAKEUP_TIME = "0" *) 
(* WRITE_DATA_WIDTH_A = "32" *) (* WRITE_DATA_WIDTH_B = "32" *) (* WRITE_MODE_A = "2" *) 
(* WRITE_MODE_B = "2" *) (* XPM_MODULE = "TRUE" *) (* rsta_loop_iter = "32" *) 
(* rstb_loop_iter = "32" *) 
module semicap_xpm_memory_base__parameterized0
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [7:0]addra;
  input [31:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [31:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [7:0]addrb;
  input [31:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [31:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [7:0]addra;
  wire [7:0]addrb;
  wire clka;
  wire clkb;
  wire [31:0]dina;
  wire [31:0]doutb;
  wire ena;
  wire enb;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ;
  wire rstb;
  wire sleep;
  wire [15:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_CASDOUTA_UNCONNECTED ;
  wire [15:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_CASDOUTB_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_CASDOUTPA_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_CASDOUTPB_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOUTPADOUTP_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOUTPBDOUTP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign douta[31] = \<const0> ;
  assign douta[30] = \<const0> ;
  assign douta[29] = \<const0> ;
  assign douta[28] = \<const0> ;
  assign douta[27] = \<const0> ;
  assign douta[26] = \<const0> ;
  assign douta[25] = \<const0> ;
  assign douta[24] = \<const0> ;
  assign douta[23] = \<const0> ;
  assign douta[22] = \<const0> ;
  assign douta[21] = \<const0> ;
  assign douta[20] = \<const0> ;
  assign douta[19] = \<const0> ;
  assign douta[18] = \<const0> ;
  assign douta[17] = \<const0> ;
  assign douta[16] = \<const0> ;
  assign douta[15] = \<const0> ;
  assign douta[14] = \<const0> ;
  assign douta[13] = \<const0> ;
  assign douta[12] = \<const0> ;
  assign douta[11] = \<const0> ;
  assign douta[10] = \<const0> ;
  assign douta[9] = \<const0> ;
  assign douta[8] = \<const0> ;
  assign douta[7] = \<const0> ;
  assign douta[6] = \<const0> ;
  assign douta[5] = \<const0> ;
  assign douta[4] = \<const0> ;
  assign douta[3] = \<const0> ;
  assign douta[2] = \<const0> ;
  assign douta[1] = \<const0> ;
  assign douta[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "511" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p0_d32" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "31" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "511" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d32" *) 
  (* \MEM.PORTB.DATA_LSB  = "0" *) 
  (* \MEM.PORTB.DATA_MSB  = "31" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* RDADDR_COLLISION_HWCONFIG = "DELAYED_WRITE" *) 
  (* RTL_RAM_BITS = "8192" *) 
  (* RTL_RAM_NAME = "gen_wr_a.gen_word_narrow.mem" *) 
  (* bram_addr_begin = "0" *) 
  (* bram_addr_end = "511" *) 
  (* bram_slice_begin = "0" *) 
  (* bram_slice_end = "31" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "511" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "31" *) 
  RAMB18E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("TRUE"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("NO_CHANGE"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \gen_wr_a.gen_word_narrow.mem_reg 
       (.ADDRARDADDR({1'b0,addrb,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b0,addra,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b1),
        .CASDOMUXEN_B(1'b1),
        .CASDOUTA(\NLW_gen_wr_a.gen_word_narrow.mem_reg_CASDOUTA_UNCONNECTED [15:0]),
        .CASDOUTB(\NLW_gen_wr_a.gen_word_narrow.mem_reg_CASDOUTB_UNCONNECTED [15:0]),
        .CASDOUTPA(\NLW_gen_wr_a.gen_word_narrow.mem_reg_CASDOUTPA_UNCONNECTED [1:0]),
        .CASDOUTPB(\NLW_gen_wr_a.gen_word_narrow.mem_reg_CASDOUTPB_UNCONNECTED [1:0]),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b1),
        .CASOREGIMUXEN_B(1'b1),
        .CLKARDCLK(clkb),
        .CLKBWRCLK(clka),
        .DINADIN(dina[15:0]),
        .DINBDIN(dina[31:16]),
        .DINPADINP({1'b1,1'b1}),
        .DINPBDINP({1'b1,1'b1}),
        .DOUTADOUT(doutb[15:0]),
        .DOUTBDOUT(doutb[31:16]),
        .DOUTPADOUTP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOUTPADOUTP_UNCONNECTED [1:0]),
        .DOUTPBDOUTP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOUTPBDOUTP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .ENBWREN(ena),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(rstb),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({ena,ena,ena,ena}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_1 
       (.I0(rstb),
        .I1(enb),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "builtin_extdepth" *) 
module semicap_builtin_extdepth
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  (* async_reg = "true" *) (* msgon = "true" *) wire [1:0]srst_qr;
  wire wr_en;
  wire wr_rst_busy;

  semicap_builtin_prim \gonep.inst_prim 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
  LUT1 #(
    .INIT(2'h2)) 
    \rst_val_sym.gextw_sym[1].inst_extdi_0 
       (.I0(1'b1),
        .O(srst_qr[1]));
  LUT1 #(
    .INIT(2'h2)) 
    \rst_val_sym.gextw_sym[1].inst_extdi_1 
       (.I0(1'b1),
        .O(srst_qr[0]));
endmodule

(* ORIG_REF_NAME = "builtin_extdepth" *) 
module semicap_builtin_extdepth_4
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  (* async_reg = "true" *) (* msgon = "true" *) wire [1:0]srst_qr;
  wire wr_en;
  wire wr_rst_busy;

  semicap_builtin_prim_5 \gonep.inst_prim 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
  LUT1 #(
    .INIT(2'h2)) 
    \rst_val_sym.gextw_sym[1].inst_extdi_0 
       (.I0(1'b1),
        .O(srst_qr[1]));
  LUT1 #(
    .INIT(2'h2)) 
    \rst_val_sym.gextw_sym[1].inst_extdi_1 
       (.I0(1'b1),
        .O(srst_qr[0]));
endmodule

(* ORIG_REF_NAME = "builtin_prim" *) 
module semicap_builtin_prim
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire \gf18e2_inst.sngfifo18e2_n_0 ;
  wire \gf18e2_inst.sngfifo18e2_n_1 ;
  wire \gf18e2_inst.sngfifo18e2_n_10 ;
  wire \gf18e2_inst.sngfifo18e2_n_102 ;
  wire \gf18e2_inst.sngfifo18e2_n_103 ;
  wire \gf18e2_inst.sngfifo18e2_n_106 ;
  wire \gf18e2_inst.sngfifo18e2_n_107 ;
  wire \gf18e2_inst.sngfifo18e2_n_11 ;
  wire \gf18e2_inst.sngfifo18e2_n_12 ;
  wire \gf18e2_inst.sngfifo18e2_n_13 ;
  wire \gf18e2_inst.sngfifo18e2_n_14 ;
  wire \gf18e2_inst.sngfifo18e2_n_15 ;
  wire \gf18e2_inst.sngfifo18e2_n_16 ;
  wire \gf18e2_inst.sngfifo18e2_n_17 ;
  wire \gf18e2_inst.sngfifo18e2_n_18 ;
  wire \gf18e2_inst.sngfifo18e2_n_19 ;
  wire \gf18e2_inst.sngfifo18e2_n_20 ;
  wire \gf18e2_inst.sngfifo18e2_n_21 ;
  wire \gf18e2_inst.sngfifo18e2_n_22 ;
  wire \gf18e2_inst.sngfifo18e2_n_23 ;
  wire \gf18e2_inst.sngfifo18e2_n_24 ;
  wire \gf18e2_inst.sngfifo18e2_n_25 ;
  wire \gf18e2_inst.sngfifo18e2_n_26 ;
  wire \gf18e2_inst.sngfifo18e2_n_27 ;
  wire \gf18e2_inst.sngfifo18e2_n_28 ;
  wire \gf18e2_inst.sngfifo18e2_n_29 ;
  wire \gf18e2_inst.sngfifo18e2_n_30 ;
  wire \gf18e2_inst.sngfifo18e2_n_31 ;
  wire \gf18e2_inst.sngfifo18e2_n_32 ;
  wire \gf18e2_inst.sngfifo18e2_n_33 ;
  wire \gf18e2_inst.sngfifo18e2_n_34 ;
  wire \gf18e2_inst.sngfifo18e2_n_35 ;
  wire \gf18e2_inst.sngfifo18e2_n_4 ;
  wire \gf18e2_inst.sngfifo18e2_n_5 ;
  wire \gf18e2_inst.sngfifo18e2_n_52 ;
  wire \gf18e2_inst.sngfifo18e2_n_53 ;
  wire \gf18e2_inst.sngfifo18e2_n_54 ;
  wire \gf18e2_inst.sngfifo18e2_n_55 ;
  wire \gf18e2_inst.sngfifo18e2_n_56 ;
  wire \gf18e2_inst.sngfifo18e2_n_57 ;
  wire \gf18e2_inst.sngfifo18e2_n_58 ;
  wire \gf18e2_inst.sngfifo18e2_n_59 ;
  wire \gf18e2_inst.sngfifo18e2_n_60 ;
  wire \gf18e2_inst.sngfifo18e2_n_61 ;
  wire \gf18e2_inst.sngfifo18e2_n_62 ;
  wire \gf18e2_inst.sngfifo18e2_n_63 ;
  wire \gf18e2_inst.sngfifo18e2_n_64 ;
  wire \gf18e2_inst.sngfifo18e2_n_65 ;
  wire \gf18e2_inst.sngfifo18e2_n_66 ;
  wire \gf18e2_inst.sngfifo18e2_n_67 ;
  wire \gf18e2_inst.sngfifo18e2_n_84 ;
  wire \gf18e2_inst.sngfifo18e2_n_85 ;
  wire \gf18e2_inst.sngfifo18e2_n_86 ;
  wire \gf18e2_inst.sngfifo18e2_n_87 ;
  wire \gf18e2_inst.sngfifo18e2_n_88 ;
  wire \gf18e2_inst.sngfifo18e2_n_89 ;
  wire \gf18e2_inst.sngfifo18e2_n_90 ;
  wire \gf18e2_inst.sngfifo18e2_n_91 ;
  wire p_6_out;
  wire p_7_out;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire [31:16]\NLW_gf18e2_inst.sngfifo18e2_CASDOUT_UNCONNECTED ;
  wire [3:2]\NLW_gf18e2_inst.sngfifo18e2_CASDOUTP_UNCONNECTED ;
  wire [31:16]\NLW_gf18e2_inst.sngfifo18e2_DOUT_UNCONNECTED ;
  wire [3:2]\NLW_gf18e2_inst.sngfifo18e2_DOUTP_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  FIFO18E2 #(
    .CASCADE_ORDER("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .FIRST_WORD_FALL_THROUGH("TRUE"),
    .INIT(36'h000000000),
    .IS_RDCLK_INVERTED(1'b0),
    .IS_RDEN_INVERTED(1'b0),
    .IS_RSTREG_INVERTED(1'b0),
    .IS_RST_INVERTED(1'b0),
    .IS_WRCLK_INVERTED(1'b0),
    .IS_WREN_INVERTED(1'b0),
    .PROG_EMPTY_THRESH(4),
    .PROG_FULL_THRESH(1023),
    .RDCOUNT_TYPE("EXTENDED_DATACOUNT"),
    .READ_WIDTH(18),
    .REGISTER_MODE("REGISTERED"),
    .RSTREG_PRIORITY("REGCE"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL(36'h000000000),
    .WRCOUNT_TYPE("EXTENDED_DATACOUNT"),
    .WRITE_WIDTH(18)) 
    \gf18e2_inst.sngfifo18e2 
       (.CASDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINP({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUX(1'b0),
        .CASDOMUXEN(1'b1),
        .CASDOUT({\NLW_gf18e2_inst.sngfifo18e2_CASDOUT_UNCONNECTED [31:16],\gf18e2_inst.sngfifo18e2_n_52 ,\gf18e2_inst.sngfifo18e2_n_53 ,\gf18e2_inst.sngfifo18e2_n_54 ,\gf18e2_inst.sngfifo18e2_n_55 ,\gf18e2_inst.sngfifo18e2_n_56 ,\gf18e2_inst.sngfifo18e2_n_57 ,\gf18e2_inst.sngfifo18e2_n_58 ,\gf18e2_inst.sngfifo18e2_n_59 ,\gf18e2_inst.sngfifo18e2_n_60 ,\gf18e2_inst.sngfifo18e2_n_61 ,\gf18e2_inst.sngfifo18e2_n_62 ,\gf18e2_inst.sngfifo18e2_n_63 ,\gf18e2_inst.sngfifo18e2_n_64 ,\gf18e2_inst.sngfifo18e2_n_65 ,\gf18e2_inst.sngfifo18e2_n_66 ,\gf18e2_inst.sngfifo18e2_n_67 }),
        .CASDOUTP({\NLW_gf18e2_inst.sngfifo18e2_CASDOUTP_UNCONNECTED [3:2],\gf18e2_inst.sngfifo18e2_n_102 ,\gf18e2_inst.sngfifo18e2_n_103 }),
        .CASNXTEMPTY(\gf18e2_inst.sngfifo18e2_n_0 ),
        .CASNXTRDEN(1'b0),
        .CASOREGIMUX(1'b0),
        .CASOREGIMUXEN(1'b1),
        .CASPRVEMPTY(1'b0),
        .CASPRVRDEN(\gf18e2_inst.sngfifo18e2_n_1 ),
        .DIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din}),
        .DINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUT({\NLW_gf18e2_inst.sngfifo18e2_DOUT_UNCONNECTED [31:16],\gf18e2_inst.sngfifo18e2_n_84 ,\gf18e2_inst.sngfifo18e2_n_85 ,\gf18e2_inst.sngfifo18e2_n_86 ,\gf18e2_inst.sngfifo18e2_n_87 ,\gf18e2_inst.sngfifo18e2_n_88 ,\gf18e2_inst.sngfifo18e2_n_89 ,\gf18e2_inst.sngfifo18e2_n_90 ,\gf18e2_inst.sngfifo18e2_n_91 ,dout}),
        .DOUTP({\NLW_gf18e2_inst.sngfifo18e2_DOUTP_UNCONNECTED [3:2],\gf18e2_inst.sngfifo18e2_n_106 ,\gf18e2_inst.sngfifo18e2_n_107 }),
        .EMPTY(empty),
        .FULL(full),
        .PROGEMPTY(\gf18e2_inst.sngfifo18e2_n_4 ),
        .PROGFULL(\gf18e2_inst.sngfifo18e2_n_5 ),
        .RDCLK(clk),
        .RDCOUNT({\gf18e2_inst.sngfifo18e2_n_10 ,\gf18e2_inst.sngfifo18e2_n_11 ,\gf18e2_inst.sngfifo18e2_n_12 ,\gf18e2_inst.sngfifo18e2_n_13 ,\gf18e2_inst.sngfifo18e2_n_14 ,\gf18e2_inst.sngfifo18e2_n_15 ,\gf18e2_inst.sngfifo18e2_n_16 ,\gf18e2_inst.sngfifo18e2_n_17 ,\gf18e2_inst.sngfifo18e2_n_18 ,\gf18e2_inst.sngfifo18e2_n_19 ,\gf18e2_inst.sngfifo18e2_n_20 ,\gf18e2_inst.sngfifo18e2_n_21 ,\gf18e2_inst.sngfifo18e2_n_22 }),
        .RDEN(rd_en),
        .RDERR(p_6_out),
        .RDRSTBUSY(rd_rst_busy),
        .REGCE(rd_en),
        .RST(srst),
        .RSTREG(srst),
        .SLEEP(1'b0),
        .WRCLK(clk),
        .WRCOUNT({\gf18e2_inst.sngfifo18e2_n_23 ,\gf18e2_inst.sngfifo18e2_n_24 ,\gf18e2_inst.sngfifo18e2_n_25 ,\gf18e2_inst.sngfifo18e2_n_26 ,\gf18e2_inst.sngfifo18e2_n_27 ,\gf18e2_inst.sngfifo18e2_n_28 ,\gf18e2_inst.sngfifo18e2_n_29 ,\gf18e2_inst.sngfifo18e2_n_30 ,\gf18e2_inst.sngfifo18e2_n_31 ,\gf18e2_inst.sngfifo18e2_n_32 ,\gf18e2_inst.sngfifo18e2_n_33 ,\gf18e2_inst.sngfifo18e2_n_34 ,\gf18e2_inst.sngfifo18e2_n_35 }),
        .WREN(wr_en),
        .WRERR(p_7_out),
        .WRRSTBUSY(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "builtin_prim" *) 
module semicap_builtin_prim_5
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire \gf18e2_inst.sngfifo18e2_n_0 ;
  wire \gf18e2_inst.sngfifo18e2_n_1 ;
  wire \gf18e2_inst.sngfifo18e2_n_10 ;
  wire \gf18e2_inst.sngfifo18e2_n_102 ;
  wire \gf18e2_inst.sngfifo18e2_n_103 ;
  wire \gf18e2_inst.sngfifo18e2_n_106 ;
  wire \gf18e2_inst.sngfifo18e2_n_107 ;
  wire \gf18e2_inst.sngfifo18e2_n_11 ;
  wire \gf18e2_inst.sngfifo18e2_n_12 ;
  wire \gf18e2_inst.sngfifo18e2_n_13 ;
  wire \gf18e2_inst.sngfifo18e2_n_14 ;
  wire \gf18e2_inst.sngfifo18e2_n_15 ;
  wire \gf18e2_inst.sngfifo18e2_n_16 ;
  wire \gf18e2_inst.sngfifo18e2_n_17 ;
  wire \gf18e2_inst.sngfifo18e2_n_18 ;
  wire \gf18e2_inst.sngfifo18e2_n_19 ;
  wire \gf18e2_inst.sngfifo18e2_n_20 ;
  wire \gf18e2_inst.sngfifo18e2_n_21 ;
  wire \gf18e2_inst.sngfifo18e2_n_22 ;
  wire \gf18e2_inst.sngfifo18e2_n_23 ;
  wire \gf18e2_inst.sngfifo18e2_n_24 ;
  wire \gf18e2_inst.sngfifo18e2_n_25 ;
  wire \gf18e2_inst.sngfifo18e2_n_26 ;
  wire \gf18e2_inst.sngfifo18e2_n_27 ;
  wire \gf18e2_inst.sngfifo18e2_n_28 ;
  wire \gf18e2_inst.sngfifo18e2_n_29 ;
  wire \gf18e2_inst.sngfifo18e2_n_30 ;
  wire \gf18e2_inst.sngfifo18e2_n_31 ;
  wire \gf18e2_inst.sngfifo18e2_n_32 ;
  wire \gf18e2_inst.sngfifo18e2_n_33 ;
  wire \gf18e2_inst.sngfifo18e2_n_34 ;
  wire \gf18e2_inst.sngfifo18e2_n_35 ;
  wire \gf18e2_inst.sngfifo18e2_n_4 ;
  wire \gf18e2_inst.sngfifo18e2_n_5 ;
  wire \gf18e2_inst.sngfifo18e2_n_52 ;
  wire \gf18e2_inst.sngfifo18e2_n_53 ;
  wire \gf18e2_inst.sngfifo18e2_n_54 ;
  wire \gf18e2_inst.sngfifo18e2_n_55 ;
  wire \gf18e2_inst.sngfifo18e2_n_56 ;
  wire \gf18e2_inst.sngfifo18e2_n_57 ;
  wire \gf18e2_inst.sngfifo18e2_n_58 ;
  wire \gf18e2_inst.sngfifo18e2_n_59 ;
  wire \gf18e2_inst.sngfifo18e2_n_60 ;
  wire \gf18e2_inst.sngfifo18e2_n_61 ;
  wire \gf18e2_inst.sngfifo18e2_n_62 ;
  wire \gf18e2_inst.sngfifo18e2_n_63 ;
  wire \gf18e2_inst.sngfifo18e2_n_64 ;
  wire \gf18e2_inst.sngfifo18e2_n_65 ;
  wire \gf18e2_inst.sngfifo18e2_n_66 ;
  wire \gf18e2_inst.sngfifo18e2_n_67 ;
  wire \gf18e2_inst.sngfifo18e2_n_84 ;
  wire \gf18e2_inst.sngfifo18e2_n_85 ;
  wire \gf18e2_inst.sngfifo18e2_n_86 ;
  wire \gf18e2_inst.sngfifo18e2_n_87 ;
  wire \gf18e2_inst.sngfifo18e2_n_88 ;
  wire \gf18e2_inst.sngfifo18e2_n_89 ;
  wire \gf18e2_inst.sngfifo18e2_n_90 ;
  wire \gf18e2_inst.sngfifo18e2_n_91 ;
  wire p_6_out;
  wire p_7_out;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire [31:16]\NLW_gf18e2_inst.sngfifo18e2_CASDOUT_UNCONNECTED ;
  wire [3:2]\NLW_gf18e2_inst.sngfifo18e2_CASDOUTP_UNCONNECTED ;
  wire [31:16]\NLW_gf18e2_inst.sngfifo18e2_DOUT_UNCONNECTED ;
  wire [3:2]\NLW_gf18e2_inst.sngfifo18e2_DOUTP_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  FIFO18E2 #(
    .CASCADE_ORDER("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .FIRST_WORD_FALL_THROUGH("TRUE"),
    .INIT(36'h000000000),
    .IS_RDCLK_INVERTED(1'b0),
    .IS_RDEN_INVERTED(1'b0),
    .IS_RSTREG_INVERTED(1'b0),
    .IS_RST_INVERTED(1'b0),
    .IS_WRCLK_INVERTED(1'b0),
    .IS_WREN_INVERTED(1'b0),
    .PROG_EMPTY_THRESH(4),
    .PROG_FULL_THRESH(1023),
    .RDCOUNT_TYPE("EXTENDED_DATACOUNT"),
    .READ_WIDTH(18),
    .REGISTER_MODE("REGISTERED"),
    .RSTREG_PRIORITY("REGCE"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL(36'h000000000),
    .WRCOUNT_TYPE("EXTENDED_DATACOUNT"),
    .WRITE_WIDTH(18)) 
    \gf18e2_inst.sngfifo18e2 
       (.CASDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINP({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUX(1'b0),
        .CASDOMUXEN(1'b1),
        .CASDOUT({\NLW_gf18e2_inst.sngfifo18e2_CASDOUT_UNCONNECTED [31:16],\gf18e2_inst.sngfifo18e2_n_52 ,\gf18e2_inst.sngfifo18e2_n_53 ,\gf18e2_inst.sngfifo18e2_n_54 ,\gf18e2_inst.sngfifo18e2_n_55 ,\gf18e2_inst.sngfifo18e2_n_56 ,\gf18e2_inst.sngfifo18e2_n_57 ,\gf18e2_inst.sngfifo18e2_n_58 ,\gf18e2_inst.sngfifo18e2_n_59 ,\gf18e2_inst.sngfifo18e2_n_60 ,\gf18e2_inst.sngfifo18e2_n_61 ,\gf18e2_inst.sngfifo18e2_n_62 ,\gf18e2_inst.sngfifo18e2_n_63 ,\gf18e2_inst.sngfifo18e2_n_64 ,\gf18e2_inst.sngfifo18e2_n_65 ,\gf18e2_inst.sngfifo18e2_n_66 ,\gf18e2_inst.sngfifo18e2_n_67 }),
        .CASDOUTP({\NLW_gf18e2_inst.sngfifo18e2_CASDOUTP_UNCONNECTED [3:2],\gf18e2_inst.sngfifo18e2_n_102 ,\gf18e2_inst.sngfifo18e2_n_103 }),
        .CASNXTEMPTY(\gf18e2_inst.sngfifo18e2_n_0 ),
        .CASNXTRDEN(1'b0),
        .CASOREGIMUX(1'b0),
        .CASOREGIMUXEN(1'b1),
        .CASPRVEMPTY(1'b0),
        .CASPRVRDEN(\gf18e2_inst.sngfifo18e2_n_1 ),
        .DIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din}),
        .DINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUT({\NLW_gf18e2_inst.sngfifo18e2_DOUT_UNCONNECTED [31:16],\gf18e2_inst.sngfifo18e2_n_84 ,\gf18e2_inst.sngfifo18e2_n_85 ,\gf18e2_inst.sngfifo18e2_n_86 ,\gf18e2_inst.sngfifo18e2_n_87 ,\gf18e2_inst.sngfifo18e2_n_88 ,\gf18e2_inst.sngfifo18e2_n_89 ,\gf18e2_inst.sngfifo18e2_n_90 ,\gf18e2_inst.sngfifo18e2_n_91 ,dout}),
        .DOUTP({\NLW_gf18e2_inst.sngfifo18e2_DOUTP_UNCONNECTED [3:2],\gf18e2_inst.sngfifo18e2_n_106 ,\gf18e2_inst.sngfifo18e2_n_107 }),
        .EMPTY(empty),
        .FULL(full),
        .PROGEMPTY(\gf18e2_inst.sngfifo18e2_n_4 ),
        .PROGFULL(\gf18e2_inst.sngfifo18e2_n_5 ),
        .RDCLK(clk),
        .RDCOUNT({\gf18e2_inst.sngfifo18e2_n_10 ,\gf18e2_inst.sngfifo18e2_n_11 ,\gf18e2_inst.sngfifo18e2_n_12 ,\gf18e2_inst.sngfifo18e2_n_13 ,\gf18e2_inst.sngfifo18e2_n_14 ,\gf18e2_inst.sngfifo18e2_n_15 ,\gf18e2_inst.sngfifo18e2_n_16 ,\gf18e2_inst.sngfifo18e2_n_17 ,\gf18e2_inst.sngfifo18e2_n_18 ,\gf18e2_inst.sngfifo18e2_n_19 ,\gf18e2_inst.sngfifo18e2_n_20 ,\gf18e2_inst.sngfifo18e2_n_21 ,\gf18e2_inst.sngfifo18e2_n_22 }),
        .RDEN(rd_en),
        .RDERR(p_6_out),
        .RDRSTBUSY(rd_rst_busy),
        .REGCE(rd_en),
        .RST(srst),
        .RSTREG(srst),
        .SLEEP(1'b0),
        .WRCLK(clk),
        .WRCOUNT({\gf18e2_inst.sngfifo18e2_n_23 ,\gf18e2_inst.sngfifo18e2_n_24 ,\gf18e2_inst.sngfifo18e2_n_25 ,\gf18e2_inst.sngfifo18e2_n_26 ,\gf18e2_inst.sngfifo18e2_n_27 ,\gf18e2_inst.sngfifo18e2_n_28 ,\gf18e2_inst.sngfifo18e2_n_29 ,\gf18e2_inst.sngfifo18e2_n_30 ,\gf18e2_inst.sngfifo18e2_n_31 ,\gf18e2_inst.sngfifo18e2_n_32 ,\gf18e2_inst.sngfifo18e2_n_33 ,\gf18e2_inst.sngfifo18e2_n_34 ,\gf18e2_inst.sngfifo18e2_n_35 }),
        .WREN(wr_en),
        .WRERR(p_7_out),
        .WRRSTBUSY(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "builtin_top" *) 
module semicap_builtin_top
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  semicap_builtin_extdepth \rst_val_sym.gextw_sym[1].inst_extd 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "builtin_top" *) 
module semicap_builtin_top_3
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  semicap_builtin_extdepth_4 \rst_val_sym.gextw_sym[1].inst_extd 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module semicap_fifo_generator_top
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  semicap_fifo_generator_v13_2_4_builtin \gbi.bi 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module semicap_fifo_generator_top_1
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  semicap_fifo_generator_v13_2_4_builtin_2 \gbi.bi 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "10" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "8" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "8" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "kintexu" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "6" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "4" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "1kx18" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "1022" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "10" *) 
(* C_RD_DEPTH = "1024" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "10" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "1" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "10" *) 
(* C_WR_DEPTH = "1024" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "10" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_4" *) 
module semicap_fifo_generator_v13_2_4
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [7:0]din;
  input wr_en;
  input rd_en;
  input [9:0]prog_empty_thresh;
  input [9:0]prog_empty_thresh_assert;
  input [9:0]prog_empty_thresh_negate;
  input [9:0]prog_full_thresh;
  input [9:0]prog_full_thresh_assert;
  input [9:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [7:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [9:0]data_count;
  output [9:0]rd_data_count;
  output [9:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[9] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  semicap_fifo_generator_v13_2_4_synth inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "10" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "8" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "8" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "kintexu" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "6" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "4" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "1kx18" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "1022" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "10" *) 
(* C_RD_DEPTH = "1024" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "10" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "1" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "10" *) 
(* C_WR_DEPTH = "1024" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "10" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_4" *) 
module semicap_fifo_generator_v13_2_4__1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [7:0]din;
  input wr_en;
  input rd_en;
  input [9:0]prog_empty_thresh;
  input [9:0]prog_empty_thresh_assert;
  input [9:0]prog_empty_thresh_negate;
  input [9:0]prog_full_thresh;
  input [9:0]prog_full_thresh_assert;
  input [9:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [7:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [9:0]data_count;
  output [9:0]rd_data_count;
  output [9:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[9] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  semicap_fifo_generator_v13_2_4_synth_0 inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_4_builtin" *) 
module semicap_fifo_generator_v13_2_4_builtin
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  semicap_builtin_top \v8_fifo.fblk 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_4_builtin" *) 
module semicap_fifo_generator_v13_2_4_builtin_2
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  semicap_builtin_top_3 \v8_fifo.fblk 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_4_synth" *) 
module semicap_fifo_generator_v13_2_4_synth
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  semicap_fifo_generator_top \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_4_synth" *) 
module semicap_fifo_generator_v13_2_4_synth_0
   (empty,
    full,
    rd_rst_busy,
    wr_rst_busy,
    dout,
    clk,
    rd_en,
    srst,
    wr_en,
    din);
  output empty;
  output full;
  output rd_rst_busy;
  output wr_rst_busy;
  output [7:0]dout;
  input clk;
  input rd_en;
  input srst;
  input wr_en;
  input [7:0]din;

  wire clk;
  wire [7:0]din;
  wire [7:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  semicap_fifo_generator_top_1 \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rd_rst_busy(rd_rst_busy),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_FAMILY = "kintexu" *) (* ORIG_REF_NAME = "sem_ultra_v3_1_11" *) (* TCQ = "1" *) 
(* b_cosim = "0" *) (* b_debug = "0" *) (* b_dfset = "0" *) 
(* c_arch = "0" *) (* c_command_code_width = "40" *) (* c_config_prim_loc = "1" *) 
(* c_extra_checks = "4" *) (* c_feature_set = "3" *) (* c_fecc_far_width = "26" *) 
(* c_has_error_injection = "1" *) (* c_helper_block_loc = "1" *) (* c_vusp_slr = "0" *) 
module semicap_sem_ultra_v3_1_11
   (slr0_status_heartbeat,
    slr1_status_heartbeat,
    slr2_status_heartbeat,
    slr3_status_heartbeat,
    status_heartbeat,
    status_initialization,
    status_observation,
    status_correction,
    status_classification,
    status_injection,
    status_essential,
    status_uncorrectable,
    status_diagnostic_scan,
    status_detect_only,
    fetch_txdata,
    fetch_txwrite,
    fetch_txfull,
    fetch_rxdata,
    fetch_rxread,
    fetch_rxempty,
    fetch_tbladdr,
    monitor_txdata,
    monitor_txwrite,
    monitor_txfull,
    monitor_rxdata,
    monitor_rxread,
    monitor_rxempty,
    command_strobe,
    command_busy,
    command_code,
    icap_clk,
    icap_o,
    icap_csib,
    icap_rdwrb,
    icap_i,
    icap_prerror,
    icap_prdone,
    icap_avail,
    cap_rel,
    cap_gnt,
    cap_req,
    fecc_eccerrornotsingle,
    fecc_eccerrorsingle,
    fecc_endofframe,
    fecc_endofscan,
    fecc_crcerror,
    fecc_far,
    fecc_farsel,
    slr0_fecc_eccerrornotsingle,
    slr0_fecc_eccerrorsingle,
    slr0_fecc_endofframe,
    slr0_fecc_endofscan,
    slr0_fecc_crcerror,
    slr0_fecc_far,
    slr0_fecc_farsel,
    slr1_fecc_eccerrornotsingle,
    slr1_fecc_eccerrorsingle,
    slr1_fecc_endofframe,
    slr1_fecc_endofscan,
    slr1_fecc_crcerror,
    slr1_fecc_far,
    slr1_fecc_farsel,
    slr2_fecc_eccerrornotsingle,
    slr2_fecc_eccerrorsingle,
    slr2_fecc_endofframe,
    slr2_fecc_endofscan,
    slr2_fecc_crcerror,
    slr2_fecc_far,
    slr2_fecc_farsel,
    slr3_fecc_eccerrornotsingle,
    slr3_fecc_eccerrorsingle,
    slr3_fecc_endofframe,
    slr3_fecc_endofscan,
    slr3_fecc_crcerror,
    slr3_fecc_far,
    slr3_fecc_farsel,
    aux_error_cr_ne,
    aux_error_cr_es,
    aux_error_uc);
  output slr0_status_heartbeat;
  output slr1_status_heartbeat;
  output slr2_status_heartbeat;
  output slr3_status_heartbeat;
  output status_heartbeat;
  output status_initialization;
  output status_observation;
  output status_correction;
  output status_classification;
  output status_injection;
  output status_essential;
  output status_uncorrectable;
  output status_diagnostic_scan;
  output status_detect_only;
  output [7:0]fetch_txdata;
  output fetch_txwrite;
  input fetch_txfull;
  input [7:0]fetch_rxdata;
  output fetch_rxread;
  input fetch_rxempty;
  input [31:0]fetch_tbladdr;
  output [7:0]monitor_txdata;
  output monitor_txwrite;
  input monitor_txfull;
  input [7:0]monitor_rxdata;
  output monitor_rxread;
  input monitor_rxempty;
  input command_strobe;
  output command_busy;
  input [39:0]command_code;
  input icap_clk;
  input [31:0]icap_o;
  output icap_csib;
  output icap_rdwrb;
  output [31:0]icap_i;
  input icap_prerror;
  input icap_prdone;
  input icap_avail;
  input cap_rel;
  input cap_gnt;
  output cap_req;
  input fecc_eccerrornotsingle;
  input fecc_eccerrorsingle;
  input fecc_endofframe;
  input fecc_endofscan;
  input fecc_crcerror;
  input [25:0]fecc_far;
  output [1:0]fecc_farsel;
  input slr0_fecc_eccerrornotsingle;
  input slr0_fecc_eccerrorsingle;
  input slr0_fecc_endofframe;
  input slr0_fecc_endofscan;
  input slr0_fecc_crcerror;
  input [25:0]slr0_fecc_far;
  output [1:0]slr0_fecc_farsel;
  input slr1_fecc_eccerrornotsingle;
  input slr1_fecc_eccerrorsingle;
  input slr1_fecc_endofframe;
  input slr1_fecc_endofscan;
  input slr1_fecc_crcerror;
  input [25:0]slr1_fecc_far;
  output [1:0]slr1_fecc_farsel;
  input slr2_fecc_eccerrornotsingle;
  input slr2_fecc_eccerrorsingle;
  input slr2_fecc_endofframe;
  input slr2_fecc_endofscan;
  input slr2_fecc_crcerror;
  input [25:0]slr2_fecc_far;
  output [1:0]slr2_fecc_farsel;
  input slr3_fecc_eccerrornotsingle;
  input slr3_fecc_eccerrorsingle;
  input slr3_fecc_endofframe;
  input slr3_fecc_endofscan;
  input slr3_fecc_crcerror;
  input [25:0]slr3_fecc_far;
  output [1:0]slr3_fecc_farsel;
  input aux_error_cr_ne;
  input aux_error_cr_es;
  input aux_error_uc;

  wire \<const0> ;
  wire aux_error_cr_es;
  wire aux_error_cr_ne;
  wire aux_error_uc;
  wire cap_gnt;
  wire cap_rel;
  wire cap_req;
  wire command_busy;
  wire [39:0]command_code;
  wire command_strobe;
  wire fecc_crcerror;
  wire fecc_eccerrornotsingle;
  wire fecc_eccerrorsingle;
  wire fecc_endofframe;
  wire fecc_endofscan;
  wire [7:0]fetch_rxdata;
  wire fetch_rxempty;
  wire fetch_rxread;
  wire [31:0]fetch_tbladdr;
  wire [7:0]fetch_txdata;
  wire fetch_txfull;
  wire fetch_txwrite;
  wire icap_avail;
  wire icap_clk;
  wire icap_csib;
  wire [31:0]icap_i;
  wire [31:0]icap_o;
  wire icap_prdone;
  wire icap_prerror;
  wire icap_rdwrb;
  wire [7:0]monitor_rxdata;
  wire monitor_rxempty;
  wire monitor_rxread;
  wire monitor_txfull;
  wire monitor_txwrite;
  wire status_classification;
  wire status_correction;
  wire status_detect_only;
  wire status_diagnostic_scan;
  wire status_essential;
  wire status_initialization;
  wire status_injection;
  wire status_observation;
  wire status_uncorrectable;

  assign fecc_farsel[1] = \<const0> ;
  assign fecc_farsel[0] = \<const0> ;
  assign monitor_txdata[7] = \<const0> ;
  assign monitor_txdata[6] = \<const0> ;
  assign monitor_txdata[5] = \<const0> ;
  assign monitor_txdata[4] = \<const0> ;
  assign monitor_txdata[3] = \<const0> ;
  assign monitor_txdata[2] = \<const0> ;
  assign monitor_txdata[1] = \<const0> ;
  assign monitor_txdata[0] = \<const0> ;
  assign slr0_fecc_farsel[1] = \<const0> ;
  assign slr0_fecc_farsel[0] = \<const0> ;
  assign slr0_status_heartbeat = \<const0> ;
  assign slr1_fecc_farsel[1] = \<const0> ;
  assign slr1_fecc_farsel[0] = \<const0> ;
  assign slr1_status_heartbeat = \<const0> ;
  assign slr2_fecc_farsel[1] = \<const0> ;
  assign slr2_fecc_farsel[0] = \<const0> ;
  assign slr2_status_heartbeat = \<const0> ;
  assign slr3_fecc_farsel[1] = \<const0> ;
  assign slr3_fecc_farsel[0] = \<const0> ;
  assign slr3_status_heartbeat = \<const0> ;
  assign status_heartbeat = \<const0> ;
  GND GND
       (.G(\<const0> ));
  semicap_sem_ultra_v3_1_11_controller controller
       (.Q({status_essential,status_uncorrectable,status_injection,status_classification,status_correction,status_observation,status_initialization}),
        .aux_error_cr_es(aux_error_cr_es),
        .aux_error_cr_ne(aux_error_cr_ne),
        .aux_error_uc(aux_error_uc),
        .cap_gnt(cap_gnt),
        .cap_rel(cap_rel),
        .cap_req(cap_req),
        .cgo_flag_reg_0(command_busy),
        .command_code(command_code),
        .command_strobe(command_strobe),
        .fecc_crcerror(fecc_crcerror),
        .fecc_eccerrornotsingle(fecc_eccerrornotsingle),
        .fecc_eccerrorsingle(fecc_eccerrorsingle),
        .fecc_endofframe(fecc_endofframe),
        .fecc_endofscan(fecc_endofscan),
        .fetch_rxdata(fetch_rxdata),
        .fetch_rxempty(fetch_rxempty),
        .fetch_rxread(fetch_rxread),
        .fetch_tbladdr(fetch_tbladdr),
        .fetch_txfull(fetch_txfull),
        .fetch_txwrite(fetch_txwrite),
        .icap_avail(icap_avail),
        .icap_clk(icap_clk),
        .icap_csib(icap_csib),
        .icap_i(icap_i),
        .icap_o(icap_o),
        .icap_prdone(icap_prdone),
        .icap_prerror(icap_prerror),
        .icap_rdwrb(icap_rdwrb),
        .monitor_rxdata(monitor_rxdata),
        .monitor_rxempty(monitor_rxempty),
        .monitor_rxread(monitor_rxread),
        .monitor_txdata(fetch_txdata),
        .monitor_txfull(monitor_txfull),
        .monitor_txwrite(monitor_txwrite),
        .\status_reg2_reg[1]_0 ({status_diagnostic_scan,status_detect_only}));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_controller" *) 
module semicap_sem_ultra_v3_1_11_controller
   (cgo_flag_reg_0,
    monitor_txdata,
    icap_csib,
    icap_rdwrb,
    icap_i,
    Q,
    \status_reg2_reg[1]_0 ,
    cap_req,
    monitor_txwrite,
    fetch_txwrite,
    monitor_rxread,
    fetch_rxread,
    command_code,
    icap_clk,
    cap_gnt,
    cap_rel,
    icap_prerror,
    icap_prdone,
    icap_avail,
    aux_error_cr_ne,
    aux_error_cr_es,
    aux_error_uc,
    icap_o,
    command_strobe,
    monitor_rxdata,
    fetch_rxdata,
    fetch_tbladdr,
    monitor_txfull,
    monitor_rxempty,
    fetch_txfull,
    fetch_rxempty,
    fecc_endofframe,
    fecc_endofscan,
    fecc_crcerror,
    fecc_eccerrornotsingle,
    fecc_eccerrorsingle);
  output cgo_flag_reg_0;
  output [7:0]monitor_txdata;
  output icap_csib;
  output icap_rdwrb;
  output [31:0]icap_i;
  output [6:0]Q;
  output [1:0]\status_reg2_reg[1]_0 ;
  output cap_req;
  output monitor_txwrite;
  output fetch_txwrite;
  output monitor_rxread;
  output fetch_rxread;
  input [39:0]command_code;
  input icap_clk;
  input cap_gnt;
  input cap_rel;
  input icap_prerror;
  input icap_prdone;
  input icap_avail;
  input aux_error_cr_ne;
  input aux_error_cr_es;
  input aux_error_uc;
  input [31:0]icap_o;
  input command_strobe;
  input [7:0]monitor_rxdata;
  input [7:0]fetch_rxdata;
  input [31:0]fetch_tbladdr;
  input monitor_txfull;
  input monitor_rxempty;
  input fetch_txfull;
  input fetch_rxempty;
  input fecc_endofframe;
  input fecc_endofscan;
  input fecc_crcerror;
  input fecc_eccerrornotsingle;
  input fecc_eccerrorsingle;

  wire \FSM_onehot_state[0]_i_1_n_0 ;
  wire \FSM_onehot_state[1]_i_1_n_0 ;
  wire \FSM_onehot_state[3]_i_1_n_0 ;
  wire \FSM_onehot_state[4]_i_1_n_0 ;
  wire \FSM_onehot_state[4]_i_4_n_0 ;
  wire \FSM_onehot_state[5]_i_1_n_0 ;
  wire \FSM_onehot_state[6]_i_1_n_0 ;
  wire \FSM_onehot_state[7]_i_1_n_0 ;
  wire \FSM_onehot_state[8]_i_1_n_0 ;
  wire \FSM_onehot_state_reg_n_0_[0] ;
  wire \FSM_onehot_state_reg_n_0_[1] ;
  wire \FSM_onehot_state_reg_n_0_[2] ;
  wire \FSM_onehot_state_reg_n_0_[3] ;
  wire \FSM_onehot_state_reg_n_0_[4] ;
  wire \FSM_onehot_state_reg_n_0_[5] ;
  wire \FSM_onehot_state_reg_n_0_[6] ;
  wire \FSM_onehot_state_reg_n_0_[7] ;
  wire \FSM_onehot_state_reg_n_0_[8] ;
  wire \FSM_onehot_state_reg_n_0_[9] ;
  wire [6:0]Q;
  wire [8:0]addrb;
  wire [11:0]address;
  wire aux_cr_es_err;
  wire aux_cr_ne_err;
  wire aux_error_cr_es;
  wire aux_error_cr_es_sync;
  wire aux_error_cr_ne;
  wire aux_error_cr_ne_sync;
  wire aux_error_uc;
  wire aux_error_uc_sync;
  wire aux_uc_err;
  wire bgo_strobe;
  wire bgo_strobe0;
  wire bram2_en;
  wire bram_enable;
  wire bram_wr_en0;
  wire bram_wr_en1;
  wire bram_wr_en2;
  wire cap_gnt;
  wire cap_rel;
  wire cap_req;
  wire cap_req_i_2_n_0;
  wire casdomux2;
  wire cgo_flag017_out;
  wire cgo_flag_reg_0;
  wire [39:0]command_code;
  wire [39:0]command_code_int;
  wire \command_reg[2]_i_1_n_0 ;
  wire \command_reg[39]_i_4_n_0 ;
  wire \command_reg[3]_i_1_n_0 ;
  wire \command_reg_reg_n_0_[0] ;
  wire \command_reg_reg_n_0_[1] ;
  wire \command_reg_reg_n_0_[2] ;
  wire \command_reg_reg_n_0_[3] ;
  wire \command_reg_reg_n_0_[4] ;
  wire \command_reg_reg_n_0_[5] ;
  wire \command_reg_reg_n_0_[6] ;
  wire \command_reg_reg_n_0_[7] ;
  wire command_strobe;
  wire controller_dbuffer_n_10;
  wire controller_dbuffer_n_45;
  wire controller_dbuffer_n_46;
  wire controller_dbuffer_n_47;
  wire controller_dbuffer_n_48;
  wire controller_dbuffer_n_49;
  wire controller_dbuffer_n_50;
  wire controller_dbuffer_n_51;
  wire controller_dbuffer_n_60;
  wire controller_dbuffer_n_61;
  wire controller_dbuffer_n_62;
  wire controller_dbuffer_n_63;
  wire controller_dbuffer_n_64;
  wire controller_dbuffer_n_65;
  wire controller_dbuffer_n_66;
  wire controller_dbuffer_n_67;
  wire controller_dbuffer_n_68;
  wire controller_dbuffer_n_9;
  wire controller_picocpu_n_18;
  wire controller_picocpu_n_20;
  wire controller_picocpu_n_21;
  wire controller_picocpu_n_22;
  wire controller_picocpu_n_23;
  wire controller_picocpu_n_24;
  wire controller_picocpu_n_25;
  wire controller_picocpu_n_26;
  wire controller_picocpu_n_27;
  wire controller_picocpu_n_28;
  wire controller_picocpu_n_38;
  wire controller_picocpu_n_39;
  wire controller_picocpu_n_46;
  wire controller_picocpu_n_53;
  wire controller_picocpu_n_54;
  wire controller_picocpu_n_57;
  wire controller_picocpu_n_58;
  wire controller_picocpu_n_59;
  wire controller_picocpu_n_60;
  wire controller_picocpu_n_61;
  wire controller_picocpu_n_62;
  wire controller_picocpu_n_63;
  wire controller_picocpu_n_64;
  wire controller_picocpu_n_65;
  wire controller_synchro_icap_avail_n_0;
  wire controller_synchro_icap_prdone_n_0;
  wire controller_synchro_icap_prerror_n_0;
  wire controller_timer_n_0;
  wire [7:0]data11;
  wire [7:0]data12;
  wire [7:0]data13;
  wire [7:0]data14;
  wire end_ptr1;
  wire eof_flag;
  wire eos_flag;
  wire fecc_crcerror;
  wire fecc_eccerrornotsingle;
  wire fecc_eccerrorsingle;
  wire fecc_endofframe;
  wire fecc_endofscan;
  wire [7:0]fetch_rxdata;
  wire fetch_rxempty;
  wire fetch_rxread;
  wire [31:0]fetch_tbladdr;
  wire fetch_txfull;
  wire fetch_txwrite;
  wire icap_avail;
  wire icap_clk;
  wire icap_csib;
  wire icap_grant_sync;
  wire [31:0]icap_i;
  wire [31:0]icap_o;
  wire icap_prdone;
  wire icap_prerror;
  wire icap_rdwrb;
  wire icap_rel_sync;
  wire icap_request;
  wire inc1__5;
  wire [17:0]instruction;
  wire [7:0]mem_read_byte;
  wire [7:0]monitor_rxdata;
  wire monitor_rxempty;
  wire monitor_rxread;
  wire [7:0]monitor_txdata;
  wire monitor_txfull;
  wire monitor_txwrite;
  wire mux_sel;
  wire next_request;
  wire next_request0;
  wire ns_state1__4;
  wire p_1_in;
  wire [6:5]p_7_in;
  wire [2:0]port_id;
  wire pr_done;
  wire pr_trigger;
  wire rdbk_crc;
  wire rom_cr_ne_err;
  wire rom_error;
  wire sem_idle__2;
  wire sleep;
  wire sta_ptr12_out;
  wire sta_ptr1__0;
  wire status_reg0;
  wire status_reg20;
  wire [1:0]\status_reg2_reg[1]_0 ;
  wire \status_reg_reg_n_0_[7] ;
  wire sync_init;
  wire [7:0]timer_byte;
  wire timer_snap0;
  wire wr_b_dat__0;

  LUT5 #(
    .INIT(32'hBBBFAAAA)) 
    \FSM_onehot_state[0]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[9] ),
        .I1(pr_trigger),
        .I2(ns_state1__4),
        .I3(sem_idle__2),
        .I4(\FSM_onehot_state_reg_n_0_[0] ),
        .O(\FSM_onehot_state[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \FSM_onehot_state[1]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[0] ),
        .I1(pr_trigger),
        .I2(ns_state1__4),
        .O(\FSM_onehot_state[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hBA)) 
    \FSM_onehot_state[3]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[2] ),
        .I1(sem_idle__2),
        .I2(\FSM_onehot_state_reg_n_0_[3] ),
        .O(\FSM_onehot_state[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT5 #(
    .INIT(32'hFF004000)) 
    \FSM_onehot_state[4]_i_1 
       (.I0(ns_state1__4),
        .I1(pr_trigger),
        .I2(\FSM_onehot_state_reg_n_0_[0] ),
        .I3(sem_idle__2),
        .I4(\FSM_onehot_state_reg_n_0_[3] ),
        .O(\FSM_onehot_state[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0010FFFFFFFF0010)) 
    \FSM_onehot_state[4]_i_2 
       (.I0(Q[0]),
        .I1(\FSM_onehot_state[4]_i_4_n_0 ),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(\status_reg2_reg[1]_0 [1]),
        .I5(\status_reg2_reg[1]_0 [0]),
        .O(ns_state1__4));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \FSM_onehot_state[4]_i_3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[4]),
        .I4(Q[2]),
        .O(sem_idle__2));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_state[4]_i_4 
       (.I0(Q[4]),
        .I1(Q[2]),
        .O(\FSM_onehot_state[4]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \FSM_onehot_state[5]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[4] ),
        .I1(next_request),
        .I2(\FSM_onehot_state_reg_n_0_[5] ),
        .O(\FSM_onehot_state[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_state[6]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[5] ),
        .I1(next_request),
        .O(\FSM_onehot_state[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \FSM_onehot_state[7]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[6] ),
        .I1(pr_done),
        .I2(\FSM_onehot_state_reg_n_0_[7] ),
        .O(\FSM_onehot_state[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_state[8]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[7] ),
        .I1(pr_done),
        .O(\FSM_onehot_state[8]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_state_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state[0]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[0] ),
        .S(sync_init));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state[1]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[1] ),
        .R(sync_init));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state_reg_n_0_[1] ),
        .Q(\FSM_onehot_state_reg_n_0_[2] ),
        .R(sync_init));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state[3]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[3] ),
        .R(sync_init));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state[4]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[4] ),
        .R(sync_init));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state[5]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[5] ),
        .R(sync_init));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state[6]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[6] ),
        .R(sync_init));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state[7]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[7] ),
        .R(sync_init));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[8] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state[8]_i_1_n_0 ),
        .Q(\FSM_onehot_state_reg_n_0_[8] ),
        .R(sync_init));
  (* FSM_ENCODED_STATES = "RELEASE_REQUEST:0000010000,WAIT_SEM_IDLE:0000001000,CMD_IDLE:0000000100,SET_MUX:0000000010,IDLE:0000000001,BACK_IDLE:1000000000,WAIT_DONE:0010000000,SET_REQUEST:0001000000,CMD_RESTART:0100000000,WAIT_RELEASE:0000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_state_reg[9] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\FSM_onehot_state_reg_n_0_[8] ),
        .Q(\FSM_onehot_state_reg_n_0_[9] ),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    aux_cr_es_err_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(controller_picocpu_n_61),
        .Q(aux_cr_es_err),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    aux_cr_ne_err_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(controller_picocpu_n_60),
        .Q(aux_cr_ne_err),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    aux_uc_err_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(controller_picocpu_n_62),
        .Q(aux_uc_err),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    bgo_strobe_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(bgo_strobe0),
        .Q(bgo_strobe),
        .R(sync_init));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    cap_req_i_1
       (.I0(\FSM_onehot_state_reg_n_0_[7] ),
        .I1(\FSM_onehot_state_reg_n_0_[6] ),
        .I2(\FSM_onehot_state_reg_n_0_[8] ),
        .I3(\FSM_onehot_state_reg_n_0_[9] ),
        .I4(cap_req_i_2_n_0),
        .O(icap_request));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    cap_req_i_2
       (.I0(\FSM_onehot_state_reg_n_0_[2] ),
        .I1(\FSM_onehot_state_reg_n_0_[3] ),
        .I2(\FSM_onehot_state_reg_n_0_[0] ),
        .I3(\FSM_onehot_state_reg_n_0_[1] ),
        .O(cap_req_i_2_n_0));
  FDSE #(
    .INIT(1'b1)) 
    cap_req_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_request),
        .Q(cap_req),
        .S(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    cgo_flag_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(controller_picocpu_n_57),
        .Q(cgo_flag_reg_0),
        .R(sync_init));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \command_reg[0]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[8] ),
        .I1(mux_sel),
        .I2(command_code[0]),
        .O(command_code_int[0]));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[10]_i_1 
       (.I0(command_code[10]),
        .I1(mux_sel),
        .O(command_code_int[10]));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[11]_i_1 
       (.I0(command_code[11]),
        .I1(mux_sel),
        .O(command_code_int[11]));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[12]_i_1 
       (.I0(command_code[12]),
        .I1(mux_sel),
        .O(command_code_int[12]));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[13]_i_1 
       (.I0(command_code[13]),
        .I1(mux_sel),
        .O(command_code_int[13]));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[14]_i_1 
       (.I0(command_code[14]),
        .I1(mux_sel),
        .O(command_code_int[14]));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[15]_i_1 
       (.I0(command_code[15]),
        .I1(mux_sel),
        .O(command_code_int[15]));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[16]_i_1 
       (.I0(command_code[16]),
        .I1(mux_sel),
        .O(command_code_int[16]));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[17]_i_1 
       (.I0(command_code[17]),
        .I1(mux_sel),
        .O(command_code_int[17]));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[18]_i_1 
       (.I0(command_code[18]),
        .I1(mux_sel),
        .O(command_code_int[18]));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[19]_i_1 
       (.I0(command_code[19]),
        .I1(mux_sel),
        .O(command_code_int[19]));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \command_reg[1]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[8] ),
        .I1(mux_sel),
        .I2(command_code[1]),
        .O(command_code_int[1]));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[20]_i_1 
       (.I0(command_code[20]),
        .I1(mux_sel),
        .O(command_code_int[20]));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[21]_i_1 
       (.I0(command_code[21]),
        .I1(mux_sel),
        .O(command_code_int[21]));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[22]_i_1 
       (.I0(command_code[22]),
        .I1(mux_sel),
        .O(command_code_int[22]));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[23]_i_1 
       (.I0(command_code[23]),
        .I1(mux_sel),
        .O(command_code_int[23]));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[24]_i_1 
       (.I0(command_code[24]),
        .I1(mux_sel),
        .O(command_code_int[24]));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[25]_i_1 
       (.I0(command_code[25]),
        .I1(mux_sel),
        .O(command_code_int[25]));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[26]_i_1 
       (.I0(command_code[26]),
        .I1(mux_sel),
        .O(command_code_int[26]));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[27]_i_1 
       (.I0(command_code[27]),
        .I1(mux_sel),
        .O(command_code_int[27]));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[28]_i_1 
       (.I0(command_code[28]),
        .I1(mux_sel),
        .O(command_code_int[28]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[29]_i_1 
       (.I0(command_code[29]),
        .I1(mux_sel),
        .O(command_code_int[29]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[2]_i_1 
       (.I0(command_code[2]),
        .I1(mux_sel),
        .O(\command_reg[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[30]_i_1 
       (.I0(command_code[30]),
        .I1(mux_sel),
        .O(command_code_int[30]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[31]_i_1 
       (.I0(command_code[31]),
        .I1(mux_sel),
        .O(command_code_int[31]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[32]_i_1 
       (.I0(command_code[32]),
        .I1(mux_sel),
        .O(command_code_int[32]));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[33]_i_1 
       (.I0(command_code[33]),
        .I1(mux_sel),
        .O(command_code_int[33]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[34]_i_1 
       (.I0(command_code[34]),
        .I1(mux_sel),
        .O(command_code_int[34]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[35]_i_1 
       (.I0(command_code[35]),
        .I1(mux_sel),
        .O(command_code_int[35]));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \command_reg[36]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[8] ),
        .I1(mux_sel),
        .I2(command_code[36]),
        .O(command_code_int[36]));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \command_reg[37]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[2] ),
        .I1(\FSM_onehot_state_reg_n_0_[8] ),
        .I2(mux_sel),
        .I3(command_code[37]),
        .O(command_code_int[37]));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \command_reg[38]_i_1 
       (.I0(\FSM_onehot_state_reg_n_0_[2] ),
        .I1(mux_sel),
        .I2(command_code[38]),
        .O(command_code_int[38]));
  LUT5 #(
    .INIT(32'h0000EEE2)) 
    \command_reg[39]_i_1 
       (.I0(command_strobe),
        .I1(mux_sel),
        .I2(\FSM_onehot_state_reg_n_0_[8] ),
        .I3(\FSM_onehot_state_reg_n_0_[2] ),
        .I4(cgo_flag_reg_0),
        .O(cgo_flag017_out));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT4 #(
    .INIT(16'hEFE0)) 
    \command_reg[39]_i_2 
       (.I0(\FSM_onehot_state_reg_n_0_[2] ),
        .I1(\FSM_onehot_state_reg_n_0_[8] ),
        .I2(mux_sel),
        .I3(command_code[39]),
        .O(command_code_int[39]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \command_reg[39]_i_3 
       (.I0(\FSM_onehot_state_reg_n_0_[6] ),
        .I1(\FSM_onehot_state_reg_n_0_[5] ),
        .I2(\FSM_onehot_state_reg_n_0_[7] ),
        .I3(\FSM_onehot_state_reg_n_0_[8] ),
        .I4(\command_reg[39]_i_4_n_0 ),
        .O(mux_sel));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \command_reg[39]_i_4 
       (.I0(\FSM_onehot_state_reg_n_0_[3] ),
        .I1(\FSM_onehot_state_reg_n_0_[4] ),
        .I2(\FSM_onehot_state_reg_n_0_[1] ),
        .I3(\FSM_onehot_state_reg_n_0_[2] ),
        .O(\command_reg[39]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[3]_i_1 
       (.I0(command_code[3]),
        .I1(mux_sel),
        .O(\command_reg[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[4]_i_1 
       (.I0(command_code[4]),
        .I1(mux_sel),
        .O(command_code_int[4]));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[5]_i_1 
       (.I0(command_code[5]),
        .I1(mux_sel),
        .O(command_code_int[5]));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[6]_i_1 
       (.I0(command_code[6]),
        .I1(mux_sel),
        .O(command_code_int[6]));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[7]_i_1 
       (.I0(command_code[7]),
        .I1(mux_sel),
        .O(command_code_int[7]));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[8]_i_1 
       (.I0(command_code[8]),
        .I1(mux_sel),
        .O(command_code_int[8]));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \command_reg[9]_i_1 
       (.I0(command_code[9]),
        .I1(mux_sel),
        .O(command_code_int[9]));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[0] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[0]),
        .Q(\command_reg_reg_n_0_[0] ),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[10] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[10]),
        .Q(data11[2]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[11] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[11]),
        .Q(data11[3]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[12] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[12]),
        .Q(data11[4]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[13] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[13]),
        .Q(data11[5]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[14] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[14]),
        .Q(data11[6]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[15] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[15]),
        .Q(data11[7]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[16] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[16]),
        .Q(data12[0]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[17] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[17]),
        .Q(data12[1]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[18] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[18]),
        .Q(data12[2]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[19] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[19]),
        .Q(data12[3]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[1] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[1]),
        .Q(\command_reg_reg_n_0_[1] ),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[20] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[20]),
        .Q(data12[4]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[21] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[21]),
        .Q(data12[5]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[22] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[22]),
        .Q(data12[6]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[23] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[23]),
        .Q(data12[7]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[24] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[24]),
        .Q(data13[0]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[25] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[25]),
        .Q(data13[1]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[26] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[26]),
        .Q(data13[2]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[27] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[27]),
        .Q(data13[3]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[28] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[28]),
        .Q(data13[4]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[29] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[29]),
        .Q(data13[5]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[2] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(\command_reg[2]_i_1_n_0 ),
        .Q(\command_reg_reg_n_0_[2] ),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[30] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[30]),
        .Q(data13[6]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[31] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[31]),
        .Q(data13[7]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[32] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[32]),
        .Q(data14[0]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[33] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[33]),
        .Q(data14[1]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[34] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[34]),
        .Q(data14[2]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[35] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[35]),
        .Q(data14[3]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[36] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[36]),
        .Q(data14[4]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[37] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[37]),
        .Q(data14[5]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[38] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[38]),
        .Q(data14[6]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[39] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[39]),
        .Q(data14[7]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[3] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(\command_reg[3]_i_1_n_0 ),
        .Q(\command_reg_reg_n_0_[3] ),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[4] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[4]),
        .Q(\command_reg_reg_n_0_[4] ),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[5] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[5]),
        .Q(\command_reg_reg_n_0_[5] ),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[6] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[6]),
        .Q(\command_reg_reg_n_0_[6] ),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[7] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[7]),
        .Q(\command_reg_reg_n_0_[7] ),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[8] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[8]),
        .Q(data11[0]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \command_reg_reg[9] 
       (.C(icap_clk),
        .CE(cgo_flag017_out),
        .D(command_code_int[9]),
        .Q(data11[1]),
        .R(sync_init));
  semicap_sem_ultra_v3_1_11_dbuffer controller_dbuffer
       (.D({controller_picocpu_n_20,controller_picocpu_n_21,controller_picocpu_n_22,controller_picocpu_n_23,controller_picocpu_n_24,controller_picocpu_n_25,controller_picocpu_n_26,controller_picocpu_n_27,controller_picocpu_n_28}),
        .E({controller_picocpu_n_38,controller_picocpu_n_39}),
        .Q({addrb,controller_dbuffer_n_9,controller_dbuffer_n_10}),
        .bgo_strobe(bgo_strobe),
        .bram_enable(bram_enable),
        .burst_flag_reg_0(controller_dbuffer_n_51),
        .burst_flag_reg_1(controller_dbuffer_n_60),
        .\end_ptr_reg[10]_0 (controller_dbuffer_n_63),
        .\end_ptr_reg[10]_1 ({controller_picocpu_n_18,end_ptr1}),
        .\end_ptr_reg[11]_0 (controller_dbuffer_n_62),
        .\end_ptr_reg[8]_0 (controller_dbuffer_n_65),
        .\end_ptr_reg[9]_0 (controller_dbuffer_n_64),
        .icap_clk(icap_clk),
        .icap_csib(icap_csib),
        .icap_i(icap_i),
        .icap_o(icap_o),
        .icap_rdwrb(icap_rdwrb),
        .inc1__5(inc1__5),
        .mem_read_byte(mem_read_byte),
        .out_port_reg(monitor_txdata),
        .port_id(port_id),
        .\ports_loop[3].in_port_flop_i_3 (controller_picocpu_n_54),
        .\ports_loop[3].in_port_flop_i_3_0 (controller_picocpu_n_53),
        .sta_ptr12_out(sta_ptr12_out),
        .sta_ptr1__0(sta_ptr1__0),
        .\sta_ptr_reg[10]_0 (controller_dbuffer_n_66),
        .\sta_ptr_reg[11]_0 (controller_dbuffer_n_61),
        .\sta_ptr_reg[2]_0 (controller_dbuffer_n_50),
        .\sta_ptr_reg[3]_0 (controller_dbuffer_n_49),
        .\sta_ptr_reg[4]_0 (controller_dbuffer_n_46),
        .\sta_ptr_reg[7]_0 (controller_dbuffer_n_48),
        .\sta_ptr_reg[8]_0 (controller_dbuffer_n_47),
        .\sta_ptr_reg[8]_1 (controller_dbuffer_n_68),
        .\sta_ptr_reg[9]_0 (controller_dbuffer_n_45),
        .\sta_ptr_reg[9]_1 (controller_dbuffer_n_67),
        .sync_init(sync_init),
        .wr_b_dat__0(wr_b_dat__0));
  semicap_sem_ultra_v3_1_11_instrom controller_instrom
       (.Q(instruction),
        .SR(sync_init),
        .address(address),
        .bram2_en(bram2_en),
        .bram_enable(bram_enable),
        .bram_wr_en0(bram_wr_en0),
        .bram_wr_en1(bram_wr_en1),
        .bram_wr_en2(bram_wr_en2),
        .casdomux2(casdomux2),
        .icap_clk(icap_clk),
        .rom_error(rom_error),
        .sleep(sleep));
  semicap_sem_ultra_v3_1_11_picocpu controller_picocpu
       (.D({controller_picocpu_n_20,controller_picocpu_n_21,controller_picocpu_n_22,controller_picocpu_n_23,controller_picocpu_n_24,controller_picocpu_n_25,controller_picocpu_n_26,controller_picocpu_n_27,controller_picocpu_n_28}),
        .E({controller_picocpu_n_38,controller_picocpu_n_39}),
        .\OUTRegistered.instruction_reg[0] (controller_picocpu_n_53),
        .\OUTRegistered.instruction_reg[2] (port_id),
        .Q({addrb,controller_dbuffer_n_9,controller_dbuffer_n_10}),
        .SR(sync_init),
        .address(address),
        .aux_cr_es_err(aux_cr_es_err),
        .aux_cr_es_err_reg(aux_error_cr_es_sync),
        .aux_cr_ne_err(aux_cr_ne_err),
        .aux_cr_ne_err_reg(aux_error_cr_ne_sync),
        .aux_uc_err(aux_uc_err),
        .aux_uc_err_reg(aux_error_uc_sync),
        .bgo_strobe0(bgo_strobe0),
        .bram2_en(bram2_en),
        .bram_enable(bram_enable),
        .bram_wr_en0(bram_wr_en0),
        .bram_wr_en1(bram_wr_en1),
        .bram_wr_en2(bram_wr_en2),
        .casdomux2(casdomux2),
        .cgo_flag_reg(cgo_flag_reg_0),
        .cgo_flag_reg_0(cgo_flag017_out),
        .const_strobe_flop_0(p_1_in),
        .const_strobe_flop_1(status_reg20),
        .const_strobe_flop_2(status_reg0),
        .eof_flag(eof_flag),
        .eos_flag(eos_flag),
        .fecc_crcerror(fecc_crcerror),
        .fecc_eccerrornotsingle(fecc_eccerrornotsingle),
        .fecc_eccerrorsingle(fecc_eccerrorsingle),
        .fecc_endofframe(fecc_endofframe),
        .fecc_endofscan(fecc_endofscan),
        .fetch_rxdata(fetch_rxdata),
        .fetch_rxempty(fetch_rxempty),
        .fetch_rxread(fetch_rxread),
        .fetch_tbladdr(fetch_tbladdr),
        .fetch_txfull(fetch_txfull),
        .fetch_txwrite(fetch_txwrite),
        .firmware0(controller_picocpu_n_46),
        .flag_enable_flop_0(instruction),
        .icap_clk(icap_clk),
        .inc1__5(inc1__5),
        .mem_read_byte(mem_read_byte),
        .monitor_rxdata(monitor_rxdata),
        .monitor_rxempty(monitor_rxempty),
        .monitor_rxread(monitor_rxread),
        .monitor_txfull(monitor_txfull),
        .monitor_txwrite(monitor_txwrite),
        .out_port_reg(monitor_txdata),
        .p_7_in(p_7_in),
        .\ports_loop[0].in_port_flop_i_3_0 (controller_synchro_icap_avail_n_0),
        .\ports_loop[0].in_port_flop_i_3_1 (controller_dbuffer_n_68),
        .\ports_loop[0].out_port_flop_0 (controller_picocpu_n_58),
        .\ports_loop[0].port_id_flop_0 ({controller_picocpu_n_18,end_ptr1}),
        .\ports_loop[1].in_port_flop_i_3_0 (controller_synchro_icap_prerror_n_0),
        .\ports_loop[1].in_port_flop_i_3_1 (controller_dbuffer_n_67),
        .\ports_loop[1].out_port_flop_0 (controller_picocpu_n_59),
        .\ports_loop[2].in_port_flop_i_3_0 (controller_synchro_icap_prdone_n_0),
        .\ports_loop[2].in_port_flop_i_3_1 (controller_dbuffer_n_66),
        .\ports_loop[2].out_port_flop_0 (controller_picocpu_n_57),
        .\ports_loop[3].in_port_flop_0 (controller_dbuffer_n_60),
        .\ports_loop[3].in_port_flop_i_3_0 (controller_timer_n_0),
        .\ports_loop[3].in_port_flop_i_3_1 (controller_dbuffer_n_61),
        .\ports_loop[4].in_port_flop_i_3_0 (controller_dbuffer_n_65),
        .\ports_loop[5].in_port_flop_i_3_0 (controller_dbuffer_n_64),
        .\ports_loop[6].in_port_flop_i_3_0 (controller_dbuffer_n_63),
        .\ports_loop[7].in_port_flop_i_2_0 ({\status_reg_reg_n_0_[7] ,Q}),
        .\ports_loop[7].in_port_flop_i_3_0 (controller_dbuffer_n_62),
        .\ports_loop[7].in_port_flop_i_4_0 ({data14,data13,data12,data11,\command_reg_reg_n_0_[7] ,\command_reg_reg_n_0_[6] ,\command_reg_reg_n_0_[5] ,\command_reg_reg_n_0_[4] ,\command_reg_reg_n_0_[3] ,\command_reg_reg_n_0_[2] ,\command_reg_reg_n_0_[1] ,\command_reg_reg_n_0_[0] }),
        .\ports_loop[7].in_port_flop_i_6_0 (timer_byte[7:4]),
        .\ports_loop[7].out_port_flop_0 (controller_picocpu_n_63),
        .rdbk_crc(rdbk_crc),
        .rdbk_sbe_reg(controller_picocpu_n_64),
        .rdbk_sbe_reg_0(controller_picocpu_n_65),
        .rom_cr_ne_err(rom_cr_ne_err),
        .rom_error(rom_error),
        .sleep(sleep),
        .sta_ptr12_out(sta_ptr12_out),
        .sta_ptr1__0(sta_ptr1__0),
        .\sta_ptr_reg[10] (controller_dbuffer_n_45),
        .\sta_ptr_reg[10]_0 (controller_dbuffer_n_51),
        .\sta_ptr_reg[3] (controller_picocpu_n_54),
        .\sta_ptr_reg[3]_0 (controller_dbuffer_n_50),
        .\sta_ptr_reg[4] (controller_dbuffer_n_49),
        .\sta_ptr_reg[5] (controller_dbuffer_n_46),
        .\sta_ptr_reg[8] (controller_dbuffer_n_48),
        .\sta_ptr_reg[9] (controller_dbuffer_n_47),
        .sync_g(controller_picocpu_n_60),
        .sync_g_0(controller_picocpu_n_61),
        .sync_g_1(controller_picocpu_n_62),
        .sync_out(icap_grant_sync),
        .timer_snap0(timer_snap0),
        .wr_b_dat__0(wr_b_dat__0));
  semicap_sem_ultra_v3_1_11_synchro controller_synchro_aux_error_cr_es
       (.aux_error_cr_es(aux_error_cr_es),
        .icap_clk(icap_clk),
        .sync_out(aux_error_cr_es_sync));
  semicap_sem_ultra_v3_1_11_synchro_6 controller_synchro_aux_error_cr_ne
       (.aux_error_cr_ne(aux_error_cr_ne),
        .icap_clk(icap_clk),
        .sync_out(aux_error_cr_ne_sync));
  semicap_sem_ultra_v3_1_11_synchro_7 controller_synchro_aux_error_uc
       (.aux_error_uc(aux_error_uc),
        .icap_clk(icap_clk),
        .sync_out(aux_error_uc_sync));
  semicap_sem_ultra_v3_1_11_synchro_8 controller_synchro_icap_avail
       (.Q(timer_byte[0]),
        .icap_avail(icap_avail),
        .icap_clk(icap_clk),
        .\ports_loop[0].in_port_flop_i_6 (port_id[0]),
        .sync_g_0(controller_synchro_icap_avail_n_0));
  semicap_sem_ultra_v3_1_11_synchro_9 controller_synchro_icap_grant
       (.cap_gnt(cap_gnt),
        .icap_clk(icap_clk),
        .sync_out(icap_grant_sync));
  semicap_sem_ultra_v3_1_11_synchro_10 controller_synchro_icap_prdone
       (.Q(timer_byte[2]),
        .icap_clk(icap_clk),
        .icap_prdone(icap_prdone),
        .\ports_loop[2].in_port_flop_i_6 (port_id[0]),
        .sync_g_0(controller_synchro_icap_prdone_n_0));
  semicap_sem_ultra_v3_1_11_synchro_11 controller_synchro_icap_prerror
       (.Q(timer_byte[1]),
        .icap_clk(icap_clk),
        .icap_prerror(icap_prerror),
        .\ports_loop[1].in_port_flop_i_6 (port_id[0]),
        .sync_g_0(controller_synchro_icap_prerror_n_0));
  semicap_sem_ultra_v3_1_11_synchro_12 controller_synchro_icap_rel
       (.cap_rel(cap_rel),
        .icap_clk(icap_clk),
        .next_request0(next_request0),
        .next_request_reg(icap_grant_sync),
        .sync_out(icap_rel_sync));
  semicap_sem_ultra_v3_1_11_timer controller_timer
       (.D(monitor_txdata[1:0]),
        .E(p_1_in),
        .Q({timer_byte[7:4],timer_byte[2:0]}),
        .SR(sync_init),
        .icap_clk(icap_clk),
        .\ports_loop[3].in_port_flop_i_6 (port_id[0]),
        .\timer_byte_reg[3]_0 (controller_timer_n_0),
        .timer_snap0(timer_snap0));
  FDRE #(
    .INIT(1'b0)) 
    eof_flag_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(controller_picocpu_n_58),
        .Q(eof_flag),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    eos_flag_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(controller_picocpu_n_59),
        .Q(eos_flag),
        .R(sync_init));
  FDRE next_request_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(next_request0),
        .Q(next_request),
        .R(sync_init));
  FDRE pr_done_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_grant_sync),
        .Q(pr_done),
        .R(sync_init));
  FDRE pr_trigger_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_rel_sync),
        .Q(pr_trigger),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    rdbk_crc_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(controller_picocpu_n_63),
        .Q(rdbk_crc),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    rdbk_nsb_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(controller_picocpu_n_64),
        .Q(p_7_in[5]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    rdbk_sbe_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(controller_picocpu_n_65),
        .Q(p_7_in[6]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    rom_cr_ne_err_reg
       (.C(icap_clk),
        .CE(controller_picocpu_n_46),
        .D(rom_error),
        .Q(rom_cr_ne_err),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg2_reg[0] 
       (.C(icap_clk),
        .CE(status_reg20),
        .D(monitor_txdata[0]),
        .Q(\status_reg2_reg[1]_0 [0]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg2_reg[1] 
       (.C(icap_clk),
        .CE(status_reg20),
        .D(monitor_txdata[1]),
        .Q(\status_reg2_reg[1]_0 [1]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg_reg[0] 
       (.C(icap_clk),
        .CE(status_reg0),
        .D(monitor_txdata[0]),
        .Q(Q[0]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg_reg[1] 
       (.C(icap_clk),
        .CE(status_reg0),
        .D(monitor_txdata[1]),
        .Q(Q[1]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg_reg[2] 
       (.C(icap_clk),
        .CE(status_reg0),
        .D(monitor_txdata[2]),
        .Q(Q[2]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg_reg[3] 
       (.C(icap_clk),
        .CE(status_reg0),
        .D(monitor_txdata[3]),
        .Q(Q[3]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg_reg[4] 
       (.C(icap_clk),
        .CE(status_reg0),
        .D(monitor_txdata[4]),
        .Q(Q[4]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg_reg[5] 
       (.C(icap_clk),
        .CE(status_reg0),
        .D(monitor_txdata[5]),
        .Q(Q[5]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg_reg[6] 
       (.C(icap_clk),
        .CE(status_reg0),
        .D(monitor_txdata[6]),
        .Q(Q[6]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \status_reg_reg[7] 
       (.C(icap_clk),
        .CE(status_reg0),
        .D(monitor_txdata[7]),
        .Q(\status_reg_reg_n_0_[7] ),
        .R(sync_init));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_dbuffer" *) 
module semicap_sem_ultra_v3_1_11_dbuffer
   (Q,
    icap_csib,
    icap_rdwrb,
    icap_i,
    \sta_ptr_reg[9]_0 ,
    \sta_ptr_reg[4]_0 ,
    \sta_ptr_reg[8]_0 ,
    \sta_ptr_reg[7]_0 ,
    \sta_ptr_reg[3]_0 ,
    \sta_ptr_reg[2]_0 ,
    burst_flag_reg_0,
    mem_read_byte,
    burst_flag_reg_1,
    \sta_ptr_reg[11]_0 ,
    \end_ptr_reg[11]_0 ,
    \end_ptr_reg[10]_0 ,
    \end_ptr_reg[9]_0 ,
    \end_ptr_reg[8]_0 ,
    \sta_ptr_reg[10]_0 ,
    \sta_ptr_reg[9]_1 ,
    \sta_ptr_reg[8]_1 ,
    icap_clk,
    bram_enable,
    sync_init,
    port_id,
    out_port_reg,
    sta_ptr1__0,
    wr_b_dat__0,
    sta_ptr12_out,
    inc1__5,
    \ports_loop[3].in_port_flop_i_3 ,
    \ports_loop[3].in_port_flop_i_3_0 ,
    bgo_strobe,
    E,
    D,
    \end_ptr_reg[10]_1 ,
    icap_o);
  output [10:0]Q;
  output icap_csib;
  output icap_rdwrb;
  output [31:0]icap_i;
  output \sta_ptr_reg[9]_0 ;
  output \sta_ptr_reg[4]_0 ;
  output \sta_ptr_reg[8]_0 ;
  output \sta_ptr_reg[7]_0 ;
  output \sta_ptr_reg[3]_0 ;
  output \sta_ptr_reg[2]_0 ;
  output burst_flag_reg_0;
  output [7:0]mem_read_byte;
  output burst_flag_reg_1;
  output \sta_ptr_reg[11]_0 ;
  output \end_ptr_reg[11]_0 ;
  output \end_ptr_reg[10]_0 ;
  output \end_ptr_reg[9]_0 ;
  output \end_ptr_reg[8]_0 ;
  output \sta_ptr_reg[10]_0 ;
  output \sta_ptr_reg[9]_1 ;
  output \sta_ptr_reg[8]_1 ;
  input icap_clk;
  input bram_enable;
  input sync_init;
  input [2:0]port_id;
  input [7:0]out_port_reg;
  input sta_ptr1__0;
  input wr_b_dat__0;
  input sta_ptr12_out;
  input inc1__5;
  input \ports_loop[3].in_port_flop_i_3 ;
  input \ports_loop[3].in_port_flop_i_3_0 ;
  input bgo_strobe;
  input [1:0]E;
  input [8:0]D;
  input [1:0]\end_ptr_reg[10]_1 ;
  input [31:0]icap_o;

  wire [8:0]D;
  wire [1:0]E;
  wire [10:0]Q;
  wire [9:9]addrb;
  wire bgo_strobe;
  wire bram_enable;
  wire burst;
  wire burst_flag_i_1_n_0;
  wire burst_flag_i_3_n_0;
  wire burst_flag_i_4_n_0;
  wire burst_flag_i_5_n_0;
  wire burst_flag_reg_0;
  wire burst_flag_reg_1;
  wire dbuffer_dbuffer_mem_n_32;
  wire dbuffer_dbuffer_mem_n_33;
  wire dbuffer_dbuffer_mem_n_34;
  wire dbuffer_dbuffer_mem_n_35;
  wire dbuffer_dbuffer_mem_n_45;
  wire dbuffer_dbuffer_mem_n_46;
  wire dbuffer_dbuffer_mem_n_47;
  wire dbuffer_dbuffer_mem_n_48;
  wire dbuffer_dbuffer_mem_n_49;
  wire dbuffer_dbuffer_mem_n_50;
  wire dbuffer_dbuffer_mem_n_51;
  wire dbuffer_dbuffer_mem_n_52;
  wire dbuffer_dbuffer_mem_n_53;
  wire dbuffer_dbuffer_mem_n_54;
  wire [34:0]doutb;
  wire ena;
  wire [11:0]end_ptr;
  wire \end_ptr_reg[10]_0 ;
  wire [1:0]\end_ptr_reg[10]_1 ;
  wire \end_ptr_reg[11]_0 ;
  wire \end_ptr_reg[8]_0 ;
  wire \end_ptr_reg[9]_0 ;
  wire halt__18;
  wire icap_clk;
  wire [31:0]icap_o;
  wire inc1__5;
  wire [7:0]mem_read_byte;
  wire [7:0]out_port_reg;
  wire [2:0]port_id;
  wire \ports_loop[3].in_port_flop_i_14_n_0 ;
  wire \ports_loop[3].in_port_flop_i_3 ;
  wire \ports_loop[3].in_port_flop_i_3_0 ;
  (* DONT_TOUCH *) wire [9:0]reg_fm_icap_addr;
  (* DONT_TOUCH *) wire reg_fm_icap_ena;
  (* DONT_TOUCH *) wire [31:0]reg_fm_icap_o;
  (* DONT_TOUCH *) wire reg_fm_icap_rsv;
  wire reg_fm_icap_rsv_i_1_n_0;
  (* DONT_TOUCH *) wire reg_fm_icap_wc;
  wire reg_fm_icap_wc_i_1_n_0;
  (* DONT_TOUCH *) wire [9:0]reg_to_icap_addr;
  (* DONT_TOUCH *) wire reg_to_icap_csib;
  (* DONT_TOUCH *) wire reg_to_icap_ena;
  (* DONT_TOUCH *) wire [31:0]reg_to_icap_i;
  (* DONT_TOUCH *) wire reg_to_icap_rdwrb;
  (* DONT_TOUCH *) wire reg_to_icap_rsvb;
  (* DONT_TOUCH *) wire reg_to_icap_wcb;
  wire sta_ptr12_out;
  wire sta_ptr1__0;
  wire \sta_ptr[11]_i_2_n_0 ;
  wire \sta_ptr[6]_i_1_n_0 ;
  wire \sta_ptr[7]_i_2_n_0 ;
  wire \sta_ptr_reg[10]_0 ;
  wire \sta_ptr_reg[11]_0 ;
  wire \sta_ptr_reg[2]_0 ;
  wire \sta_ptr_reg[3]_0 ;
  wire \sta_ptr_reg[4]_0 ;
  wire \sta_ptr_reg[7]_0 ;
  wire \sta_ptr_reg[8]_0 ;
  wire \sta_ptr_reg[8]_1 ;
  wire \sta_ptr_reg[9]_0 ;
  wire \sta_ptr_reg[9]_1 ;
  wire sync_init;
  wire wr_b_dat__0;

  assign icap_csib = reg_to_icap_csib;
  assign icap_i[31:0] = reg_to_icap_i;
  assign icap_rdwrb = reg_to_icap_rdwrb;
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    burst_flag_i_1
       (.I0(bgo_strobe),
        .I1(halt__18),
        .I2(burst),
        .O(burst_flag_i_1_n_0));
  LUT5 #(
    .INIT(32'h82000000)) 
    burst_flag_i_2
       (.I0(burst_flag_i_3_n_0),
        .I1(end_ptr[11]),
        .I2(addrb),
        .I3(burst_flag_i_4_n_0),
        .I4(burst_flag_i_5_n_0),
        .O(halt__18));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    burst_flag_i_3
       (.I0(Q[2]),
        .I1(end_ptr[2]),
        .I2(end_ptr[4]),
        .I3(Q[4]),
        .I4(end_ptr[3]),
        .I5(Q[3]),
        .O(burst_flag_i_3_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    burst_flag_i_4
       (.I0(Q[8]),
        .I1(end_ptr[8]),
        .I2(end_ptr[10]),
        .I3(Q[10]),
        .I4(end_ptr[9]),
        .I5(Q[9]),
        .O(burst_flag_i_4_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    burst_flag_i_5
       (.I0(Q[5]),
        .I1(end_ptr[5]),
        .I2(end_ptr[7]),
        .I3(Q[7]),
        .I4(end_ptr[6]),
        .I5(Q[6]),
        .O(burst_flag_i_5_n_0));
  FDRE #(
    .INIT(1'b0)) 
    burst_flag_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(burst_flag_i_1_n_0),
        .Q(burst),
        .R(sync_init));
  semicap_sem_ultra_v3_1_11_dbuffer_mem dbuffer_dbuffer_mem
       (.D({doutb[27],doutb[28],doutb[29],doutb[30],doutb[31],doutb[32],doutb[33],doutb[34],doutb[18],doutb[19],doutb[20],doutb[21],doutb[22],doutb[23],doutb[24],doutb[25],doutb[9],doutb[10],doutb[11],doutb[12],doutb[13],doutb[14],doutb[15],doutb[16],doutb[0],doutb[1],doutb[2],doutb[3],doutb[4],doutb[5],doutb[6],doutb[7]}),
        .Q({addrb,Q}),
        .bram_enable(bram_enable),
        .burst_flag_reg(burst_flag_reg_1),
        .ena(ena),
        .icap_clk(icap_clk),
        .mem_read_byte(mem_read_byte),
        .out(reg_fm_icap_wc),
        .out_port_reg(out_port_reg),
        .port_id(port_id[2]),
        .\ports_loop[3].in_port_flop_i_3 (\ports_loop[3].in_port_flop_i_14_n_0 ),
        .\ports_loop[3].in_port_flop_i_3_0 (\ports_loop[3].in_port_flop_i_3 ),
        .\ports_loop[3].in_port_flop_i_3_1 (\ports_loop[3].in_port_flop_i_3_0 ),
        .\ports_loop[3].in_port_flop_i_3_2 (\sta_ptr_reg[11]_0 ),
        .storage_0(dbuffer_dbuffer_mem_n_32),
        .storage_1(dbuffer_dbuffer_mem_n_33),
        .storage_10(dbuffer_dbuffer_mem_n_51),
        .storage_11(dbuffer_dbuffer_mem_n_52),
        .storage_12(dbuffer_dbuffer_mem_n_53),
        .storage_13(dbuffer_dbuffer_mem_n_54),
        .storage_14(reg_fm_icap_ena),
        .storage_15(reg_fm_icap_addr),
        .storage_16(reg_fm_icap_o),
        .storage_2(dbuffer_dbuffer_mem_n_34),
        .storage_3(dbuffer_dbuffer_mem_n_35),
        .storage_4(dbuffer_dbuffer_mem_n_45),
        .storage_5(dbuffer_dbuffer_mem_n_46),
        .storage_6(dbuffer_dbuffer_mem_n_47),
        .storage_7(dbuffer_dbuffer_mem_n_48),
        .storage_8(dbuffer_dbuffer_mem_n_49),
        .storage_9(dbuffer_dbuffer_mem_n_50),
        .wr_b_dat__0(wr_b_dat__0));
  FDRE #(
    .INIT(1'b0)) 
    ena_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(burst),
        .Q(ena),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[0] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [0]),
        .D(out_port_reg[0]),
        .Q(end_ptr[0]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[10] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [1]),
        .D(out_port_reg[6]),
        .Q(end_ptr[10]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[11] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [1]),
        .D(out_port_reg[7]),
        .Q(end_ptr[11]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[1] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [0]),
        .D(out_port_reg[1]),
        .Q(end_ptr[1]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[2] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [0]),
        .D(out_port_reg[2]),
        .Q(end_ptr[2]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[3] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [0]),
        .D(out_port_reg[3]),
        .Q(end_ptr[3]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[4] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [0]),
        .D(out_port_reg[4]),
        .Q(end_ptr[4]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[5] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [0]),
        .D(out_port_reg[5]),
        .Q(end_ptr[5]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[6] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [0]),
        .D(out_port_reg[6]),
        .Q(end_ptr[6]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[7] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [0]),
        .D(out_port_reg[7]),
        .Q(end_ptr[7]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[8] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [1]),
        .D(out_port_reg[4]),
        .Q(end_ptr[8]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \end_ptr_reg[9] 
       (.C(icap_clk),
        .CE(\end_ptr_reg[10]_1 [1]),
        .D(out_port_reg[5]),
        .Q(end_ptr[9]),
        .R(sync_init));
  LUT4 #(
    .INIT(16'hC808)) 
    \ports_loop[0].in_port_flop_i_14 
       (.I0(Q[8]),
        .I1(port_id[1]),
        .I2(port_id[0]),
        .I3(end_ptr[0]),
        .O(\sta_ptr_reg[8]_1 ));
  LUT4 #(
    .INIT(16'hC808)) 
    \ports_loop[1].in_port_flop_i_13 
       (.I0(Q[9]),
        .I1(port_id[1]),
        .I2(port_id[0]),
        .I3(end_ptr[1]),
        .O(\sta_ptr_reg[9]_1 ));
  LUT4 #(
    .INIT(16'hC808)) 
    \ports_loop[2].in_port_flop_i_13 
       (.I0(Q[10]),
        .I1(port_id[1]),
        .I2(port_id[0]),
        .I3(end_ptr[2]),
        .O(\sta_ptr_reg[10]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT4 #(
    .INIT(16'hC808)) 
    \ports_loop[3].in_port_flop_i_13 
       (.I0(addrb),
        .I1(port_id[1]),
        .I2(port_id[0]),
        .I3(end_ptr[3]),
        .O(\sta_ptr_reg[11]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ports_loop[3].in_port_flop_i_14 
       (.I0(burst),
        .I1(port_id[0]),
        .O(\ports_loop[3].in_port_flop_i_14_n_0 ));
  LUT4 #(
    .INIT(16'hC808)) 
    \ports_loop[4].in_port_flop_i_13 
       (.I0(end_ptr[8]),
        .I1(port_id[1]),
        .I2(port_id[0]),
        .I3(end_ptr[4]),
        .O(\end_ptr_reg[8]_0 ));
  LUT4 #(
    .INIT(16'hC808)) 
    \ports_loop[5].in_port_flop_i_13 
       (.I0(end_ptr[9]),
        .I1(port_id[1]),
        .I2(port_id[0]),
        .I3(end_ptr[5]),
        .O(\end_ptr_reg[9]_0 ));
  LUT4 #(
    .INIT(16'hC808)) 
    \ports_loop[6].in_port_flop_i_14 
       (.I0(end_ptr[10]),
        .I1(port_id[1]),
        .I2(port_id[0]),
        .I3(end_ptr[6]),
        .O(\end_ptr_reg[10]_0 ));
  LUT4 #(
    .INIT(16'hC808)) 
    \ports_loop[7].in_port_flop_i_13 
       (.I0(end_ptr[11]),
        .I1(port_id[1]),
        .I2(port_id[0]),
        .I3(end_ptr[7]),
        .O(\end_ptr_reg[11]_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[0]),
        .Q(reg_fm_icap_addr[0]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[1]),
        .Q(reg_fm_icap_addr[1]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[2]),
        .Q(reg_fm_icap_addr[2]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[3]),
        .Q(reg_fm_icap_addr[3]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[4]),
        .Q(reg_fm_icap_addr[4]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[5]),
        .Q(reg_fm_icap_addr[5]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[6]),
        .Q(reg_fm_icap_addr[6]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[7]),
        .Q(reg_fm_icap_addr[7]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[8] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[8]),
        .Q(reg_fm_icap_addr[8]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_fm_icap_addr_reg[9] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_addr[9]),
        .Q(reg_fm_icap_addr[9]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    reg_fm_icap_ena_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_to_icap_ena),
        .Q(reg_fm_icap_ena),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[0]),
        .Q(reg_fm_icap_o[0]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[10] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[10]),
        .Q(reg_fm_icap_o[10]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[11] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[11]),
        .Q(reg_fm_icap_o[11]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[12] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[12]),
        .Q(reg_fm_icap_o[12]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[13] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[13]),
        .Q(reg_fm_icap_o[13]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[14] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[14]),
        .Q(reg_fm_icap_o[14]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[15] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[15]),
        .Q(reg_fm_icap_o[15]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[16] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[16]),
        .Q(reg_fm_icap_o[16]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[17] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[17]),
        .Q(reg_fm_icap_o[17]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[18] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[18]),
        .Q(reg_fm_icap_o[18]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[19] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[19]),
        .Q(reg_fm_icap_o[19]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[1]),
        .Q(reg_fm_icap_o[1]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[20] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[20]),
        .Q(reg_fm_icap_o[20]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[21] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[21]),
        .Q(reg_fm_icap_o[21]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[22] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[22]),
        .Q(reg_fm_icap_o[22]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[23] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[23]),
        .Q(reg_fm_icap_o[23]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[24] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[24]),
        .Q(reg_fm_icap_o[24]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[25] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[25]),
        .Q(reg_fm_icap_o[25]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[26] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[26]),
        .Q(reg_fm_icap_o[26]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[27] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[27]),
        .Q(reg_fm_icap_o[27]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[28] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[28]),
        .Q(reg_fm_icap_o[28]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[29] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[29]),
        .Q(reg_fm_icap_o[29]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[2]),
        .Q(reg_fm_icap_o[2]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[30] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[30]),
        .Q(reg_fm_icap_o[30]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[31] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[31]),
        .Q(reg_fm_icap_o[31]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[3]),
        .Q(reg_fm_icap_o[3]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[4]),
        .Q(reg_fm_icap_o[4]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[5]),
        .Q(reg_fm_icap_o[5]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[6]),
        .Q(reg_fm_icap_o[6]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[7]),
        .Q(reg_fm_icap_o[7]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[8] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[8]),
        .Q(reg_fm_icap_o[8]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_fm_icap_o_reg[9] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_o[9]),
        .Q(reg_fm_icap_o[9]),
        .S(sync_init));
  LUT1 #(
    .INIT(2'h1)) 
    reg_fm_icap_rsv_i_1
       (.I0(reg_to_icap_rsvb),
        .O(reg_fm_icap_rsv_i_1_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    reg_fm_icap_rsv_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_fm_icap_rsv_i_1_n_0),
        .Q(reg_fm_icap_rsv),
        .R(sync_init));
  LUT1 #(
    .INIT(2'h1)) 
    reg_fm_icap_wc_i_1
       (.I0(reg_to_icap_wcb),
        .O(reg_fm_icap_wc_i_1_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    reg_fm_icap_wc_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(reg_fm_icap_wc_i_1_n_0),
        .Q(reg_fm_icap_wc),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_54),
        .Q(reg_to_icap_addr[0]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_53),
        .Q(reg_to_icap_addr[1]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_52),
        .Q(reg_to_icap_addr[2]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_51),
        .Q(reg_to_icap_addr[3]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_50),
        .Q(reg_to_icap_addr[4]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_49),
        .Q(reg_to_icap_addr[5]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_48),
        .Q(reg_to_icap_addr[6]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_47),
        .Q(reg_to_icap_addr[7]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[8] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_46),
        .Q(reg_to_icap_addr[8]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \reg_to_icap_addr_reg[9] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_45),
        .Q(reg_to_icap_addr[9]),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    reg_to_icap_csib_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_35),
        .Q(reg_to_icap_csib),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    reg_to_icap_ena_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(ena),
        .Q(reg_to_icap_ena),
        .R(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[7]),
        .Q(reg_to_icap_i[0]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[10] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[14]),
        .Q(reg_to_icap_i[10]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[11] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[13]),
        .Q(reg_to_icap_i[11]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[12] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[12]),
        .Q(reg_to_icap_i[12]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[13] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[11]),
        .Q(reg_to_icap_i[13]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[14] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[10]),
        .Q(reg_to_icap_i[14]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[15] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[9]),
        .Q(reg_to_icap_i[15]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[16] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[25]),
        .Q(reg_to_icap_i[16]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[17] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[24]),
        .Q(reg_to_icap_i[17]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[18] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[23]),
        .Q(reg_to_icap_i[18]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[19] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[22]),
        .Q(reg_to_icap_i[19]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[6]),
        .Q(reg_to_icap_i[1]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[20] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[21]),
        .Q(reg_to_icap_i[20]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[21] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[20]),
        .Q(reg_to_icap_i[21]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[22] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[19]),
        .Q(reg_to_icap_i[22]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[23] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[18]),
        .Q(reg_to_icap_i[23]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[24] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[34]),
        .Q(reg_to_icap_i[24]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[25] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[33]),
        .Q(reg_to_icap_i[25]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[26] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[32]),
        .Q(reg_to_icap_i[26]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[27] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[31]),
        .Q(reg_to_icap_i[27]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[28] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[30]),
        .Q(reg_to_icap_i[28]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[29] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[29]),
        .Q(reg_to_icap_i[29]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[5]),
        .Q(reg_to_icap_i[2]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[30] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[28]),
        .Q(reg_to_icap_i[30]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[31] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[27]),
        .Q(reg_to_icap_i[31]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[4]),
        .Q(reg_to_icap_i[3]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[3]),
        .Q(reg_to_icap_i[4]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[2]),
        .Q(reg_to_icap_i[5]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[1]),
        .Q(reg_to_icap_i[6]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[0]),
        .Q(reg_to_icap_i[7]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[8] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[16]),
        .Q(reg_to_icap_i[8]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \reg_to_icap_i_reg[9] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(doutb[15]),
        .Q(reg_to_icap_i[9]),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    reg_to_icap_rdwrb_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_33),
        .Q(reg_to_icap_rdwrb),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    reg_to_icap_rsvb_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_34),
        .Q(reg_to_icap_rsvb),
        .S(sync_init));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    reg_to_icap_wcb_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(dbuffer_dbuffer_mem_n_32),
        .Q(reg_to_icap_wcb),
        .S(sync_init));
  LUT5 #(
    .INIT(32'h8BBBB888)) 
    \sta_ptr[11]_i_2 
       (.I0(out_port_reg[3]),
        .I1(sta_ptr1__0),
        .I2(\sta_ptr_reg[9]_0 ),
        .I3(Q[10]),
        .I4(addrb),
        .O(\sta_ptr[11]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \sta_ptr[11]_i_3 
       (.I0(inc1__5),
        .I1(halt__18),
        .I2(burst),
        .O(burst_flag_reg_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \sta_ptr[11]_i_6 
       (.I0(Q[9]),
        .I1(Q[7]),
        .I2(Q[5]),
        .I3(\sta_ptr_reg[4]_0 ),
        .I4(Q[6]),
        .I5(Q[8]),
        .O(\sta_ptr_reg[9]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'hC444)) 
    \sta_ptr[3]_i_2 
       (.I0(inc1__5),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(\sta_ptr_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT5 #(
    .INIT(32'h8000AA00)) 
    \sta_ptr[4]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(inc1__5),
        .O(\sta_ptr_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h8BBBB888)) 
    \sta_ptr[6]_i_1 
       (.I0(out_port_reg[6]),
        .I1(sta_ptr12_out),
        .I2(\sta_ptr_reg[4]_0 ),
        .I3(Q[5]),
        .I4(Q[6]),
        .O(\sta_ptr[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8BBBBBBBB8888888)) 
    \sta_ptr[7]_i_2 
       (.I0(out_port_reg[7]),
        .I1(sta_ptr12_out),
        .I2(Q[5]),
        .I3(\sta_ptr_reg[4]_0 ),
        .I4(Q[6]),
        .I5(Q[7]),
        .O(\sta_ptr[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA020202000000000)) 
    \sta_ptr[7]_i_4 
       (.I0(Q[4]),
        .I1(inc1__5),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[3]),
        .O(\sta_ptr_reg[4]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \sta_ptr[8]_i_2 
       (.I0(Q[7]),
        .I1(Q[5]),
        .I2(\sta_ptr_reg[4]_0 ),
        .I3(Q[6]),
        .O(\sta_ptr_reg[7]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \sta_ptr[9]_i_2 
       (.I0(Q[8]),
        .I1(Q[6]),
        .I2(\sta_ptr_reg[4]_0 ),
        .I3(Q[5]),
        .I4(Q[7]),
        .O(\sta_ptr_reg[8]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[0] 
       (.C(icap_clk),
        .CE(E[0]),
        .D(D[0]),
        .Q(Q[0]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[10] 
       (.C(icap_clk),
        .CE(E[1]),
        .D(D[8]),
        .Q(Q[10]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[11] 
       (.C(icap_clk),
        .CE(E[1]),
        .D(\sta_ptr[11]_i_2_n_0 ),
        .Q(addrb),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[1] 
       (.C(icap_clk),
        .CE(E[0]),
        .D(D[1]),
        .Q(Q[1]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[2] 
       (.C(icap_clk),
        .CE(E[0]),
        .D(D[2]),
        .Q(Q[2]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[3] 
       (.C(icap_clk),
        .CE(E[0]),
        .D(D[3]),
        .Q(Q[3]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[4] 
       (.C(icap_clk),
        .CE(E[0]),
        .D(D[4]),
        .Q(Q[4]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[5] 
       (.C(icap_clk),
        .CE(E[0]),
        .D(D[5]),
        .Q(Q[5]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[6] 
       (.C(icap_clk),
        .CE(E[0]),
        .D(\sta_ptr[6]_i_1_n_0 ),
        .Q(Q[6]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[7] 
       (.C(icap_clk),
        .CE(E[0]),
        .D(\sta_ptr[7]_i_2_n_0 ),
        .Q(Q[7]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[8] 
       (.C(icap_clk),
        .CE(E[1]),
        .D(D[6]),
        .Q(Q[8]),
        .R(sync_init));
  FDRE #(
    .INIT(1'b0)) 
    \sta_ptr_reg[9] 
       (.C(icap_clk),
        .CE(E[1]),
        .D(D[7]),
        .Q(Q[9]),
        .R(sync_init));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_dbuffer_mem" *) 
module semicap_sem_ultra_v3_1_11_dbuffer_mem
   (D,
    storage_0,
    storage_1,
    storage_2,
    storage_3,
    mem_read_byte,
    burst_flag_reg,
    storage_4,
    storage_5,
    storage_6,
    storage_7,
    storage_8,
    storage_9,
    storage_10,
    storage_11,
    storage_12,
    storage_13,
    icap_clk,
    bram_enable,
    Q,
    ena,
    out,
    storage_14,
    wr_b_dat__0,
    \ports_loop[3].in_port_flop_i_3 ,
    port_id,
    \ports_loop[3].in_port_flop_i_3_0 ,
    \ports_loop[3].in_port_flop_i_3_1 ,
    \ports_loop[3].in_port_flop_i_3_2 ,
    storage_15,
    storage_16,
    out_port_reg);
  output [31:0]D;
  output storage_0;
  output storage_1;
  output storage_2;
  output storage_3;
  output [7:0]mem_read_byte;
  output burst_flag_reg;
  output storage_4;
  output storage_5;
  output storage_6;
  output storage_7;
  output storage_8;
  output storage_9;
  output storage_10;
  output storage_11;
  output storage_12;
  output storage_13;
  input icap_clk;
  input bram_enable;
  input [11:0]Q;
  input ena;
  input out;
  input storage_14;
  input wr_b_dat__0;
  input \ports_loop[3].in_port_flop_i_3 ;
  input [0:0]port_id;
  input \ports_loop[3].in_port_flop_i_3_0 ;
  input \ports_loop[3].in_port_flop_i_3_1 ;
  input \ports_loop[3].in_port_flop_i_3_2 ;
  input [9:0]storage_15;
  input [31:0]storage_16;
  input [7:0]out_port_reg;

  wire [31:0]D;
  wire [11:0]Q;
  wire [9:0]addra;
  wire bram_enable;
  wire burst_flag_reg;
  wire [34:0]dina;
  wire [35:8]doutb;
  wire ena;
  wire icap_clk;
  wire [7:0]mem_read_byte;
  wire out;
  wire [7:0]out_port_reg;
  wire [0:0]port_id;
  wire \ports_loop[3].in_port_flop_i_3 ;
  wire \ports_loop[3].in_port_flop_i_3_0 ;
  wire \ports_loop[3].in_port_flop_i_3_1 ;
  wire \ports_loop[3].in_port_flop_i_3_2 ;
  wire storage_0;
  wire storage_1;
  wire storage_10;
  wire storage_11;
  wire storage_12;
  wire storage_13;
  wire storage_14;
  wire [9:0]storage_15;
  wire [31:0]storage_16;
  wire storage_2;
  wire storage_3;
  wire storage_4;
  wire storage_5;
  wire storage_6;
  wire storage_7;
  wire storage_8;
  wire storage_9;
  wire [3:0]wea;
  wire wr_b_dat__0;
  wire NLW_storage_CASOUTDBITERR_UNCONNECTED;
  wire NLW_storage_CASOUTSBITERR_UNCONNECTED;
  wire NLW_storage_DBITERR_UNCONNECTED;
  wire NLW_storage_SBITERR_UNCONNECTED;
  wire [31:0]NLW_storage_CASDOUTA_UNCONNECTED;
  wire [31:0]NLW_storage_CASDOUTB_UNCONNECTED;
  wire [3:0]NLW_storage_CASDOUTPA_UNCONNECTED;
  wire [3:0]NLW_storage_CASDOUTPB_UNCONNECTED;
  wire [31:0]NLW_storage_DOUTADOUT_UNCONNECTED;
  wire [3:0]NLW_storage_DOUTPADOUTP_UNCONNECTED;
  wire [7:0]NLW_storage_ECCPARITY_UNCONNECTED;
  wire [8:0]NLW_storage_RDADDRECC_UNCONNECTED;

  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \ports_loop[0].in_port_flop_i_12 
       (.I0(D[15]),
        .I1(D[7]),
        .I2(D[31]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(D[23]),
        .O(mem_read_byte[0]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \ports_loop[1].in_port_flop_i_12 
       (.I0(D[14]),
        .I1(D[6]),
        .I2(D[30]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(D[22]),
        .O(mem_read_byte[1]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \ports_loop[2].in_port_flop_i_12 
       (.I0(D[13]),
        .I1(D[5]),
        .I2(D[29]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(D[21]),
        .O(mem_read_byte[2]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \ports_loop[3].in_port_flop_i_12 
       (.I0(D[12]),
        .I1(D[4]),
        .I2(D[28]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(D[20]),
        .O(mem_read_byte[3]));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[3].in_port_flop_i_7 
       (.I0(\ports_loop[3].in_port_flop_i_3 ),
        .I1(port_id),
        .I2(\ports_loop[3].in_port_flop_i_3_0 ),
        .I3(mem_read_byte[3]),
        .I4(\ports_loop[3].in_port_flop_i_3_1 ),
        .I5(\ports_loop[3].in_port_flop_i_3_2 ),
        .O(burst_flag_reg));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \ports_loop[4].in_port_flop_i_12 
       (.I0(D[11]),
        .I1(D[3]),
        .I2(D[27]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(D[19]),
        .O(mem_read_byte[4]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \ports_loop[5].in_port_flop_i_12 
       (.I0(D[10]),
        .I1(D[2]),
        .I2(D[26]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(D[18]),
        .O(mem_read_byte[5]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \ports_loop[6].in_port_flop_i_13 
       (.I0(D[9]),
        .I1(D[1]),
        .I2(D[25]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(D[17]),
        .O(mem_read_byte[6]));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \ports_loop[7].in_port_flop_i_12 
       (.I0(D[8]),
        .I1(D[0]),
        .I2(D[24]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(D[16]),
        .O(mem_read_byte[7]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[0]_i_1 
       (.I0(D[5]),
        .I1(ena),
        .O(storage_13));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[1]_i_1 
       (.I0(D[4]),
        .I1(ena),
        .O(storage_12));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[2]_i_1 
       (.I0(D[3]),
        .I1(ena),
        .O(storage_11));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[3]_i_1 
       (.I0(D[2]),
        .I1(ena),
        .O(storage_10));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[4]_i_1 
       (.I0(D[1]),
        .I1(ena),
        .O(storage_9));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[5]_i_1 
       (.I0(D[0]),
        .I1(ena),
        .O(storage_8));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[6]_i_1 
       (.I0(D[15]),
        .I1(ena),
        .O(storage_7));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[7]_i_1 
       (.I0(D[14]),
        .I1(ena),
        .O(storage_6));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[8]_i_1 
       (.I0(D[13]),
        .I1(ena),
        .O(storage_5));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \reg_to_icap_addr[9]_i_1 
       (.I0(D[12]),
        .I1(ena),
        .O(storage_4));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT2 #(
    .INIT(4'hB)) 
    reg_to_icap_csib_i_1
       (.I0(doutb[35]),
        .I1(ena),
        .O(storage_3));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'hB)) 
    reg_to_icap_rdwrb_i_1
       (.I0(doutb[26]),
        .I1(ena),
        .O(storage_1));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'hB)) 
    reg_to_icap_rsvb_i_1
       (.I0(doutb[8]),
        .I1(ena),
        .O(storage_2));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'hB)) 
    reg_to_icap_wcb_i_1
       (.I0(doutb[17]),
        .I1(ena),
        .O(storage_0));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h333333333333333333333333333333333333333F5777F3333FF33333FF33333F),
    .INITP_01(256'h3333333333333333333333333333333333333333333333333333333333333333),
    .INITP_02(256'h7777F3333333333333333333333333333333333F333333333333333333333333),
    .INITP_03(256'h7777777777777777777777777777777777777777777777777777777777777777),
    .INITP_04(256'h7777777777777777777777777777777777777777777777777777777777777777),
    .INITP_05(256'h5555555555555555555555555555555555555555555555555555555555577777),
    .INITP_06(256'h5555555555555555555555555555555555555555555555555555555555555555),
    .INITP_07(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF555555777777777777777F3333FFFF3F),
    .INITP_08(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INITP_09(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INITP_0A(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INITP_0B(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INITP_0C(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'hFFFFFFFFFFFFFFFF2000000020000000AA9955662000000020000000FFFFFFFF),
    .INIT_01(256'h20000000FFFFFFFFFFFFFFFF2000000020000000DADADADA30ADDD0120000000),
    .INIT_02(256'hADDD0028FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF200000002000000028ADDD01),
    .INIT_03(256'hDADADADADADADADADADADADADADADADADADADADA500000F630004000FFFFFFFF),
    .INIT_04(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_05(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_06(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_07(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_08(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_09(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_0A(256'hECCCECCCDADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_0B(256'hDADADADADADADADADADADADADADADADADADADADADADADADAECCCECCCECCCECCC),
    .INIT_0C(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_0D(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_0E(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_0F(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_10(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_11(256'hDADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_12(256'h2000000020000000DADADADADADADADADADADADADADADADADADADADADADADADA),
    .INIT_13(256'h20000000200000002000000020000000200000004800010028006000FFFFFFFF),
    .INIT_14(256'h2000000020000000200000002000000020000000200000002000000020000000),
    .INIT_15(256'h2000000020000000200000002000000020000000200000002000000020000000),
    .INIT_16(256'h2000000020000000200000002000000020000000200000002000000020000000),
    .INIT_17(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF200000002000000020000000),
    .INIT_18(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_19(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_1A(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_1B(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_1C(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_1D(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_1E(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_1F(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_20(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_21(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_22(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_23(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_24(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_25(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_26(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_27(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_28(256'hADDD0074ADDD0070ADDD006CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_29(256'hADDD0094ADDD0090ADDD008CADDD0088ADDD0084ADDD0080ADDD007CADDD0078),
    .INIT_2A(256'hADDD00B4ADDD00B0ADDD00ACADDD00A8ADDD00A4ADDD00A0ADDD009CADDD0098),
    .INIT_2B(256'hADDD00D4ADDD00D0ADDD00CCADDD00C8ADDD00C4ADDD00C0ADDD00BCADDD00B8),
    .INIT_2C(256'hADDD00F4ADDD00F0ADDD00ECADDD00E8ADDD00E4ADDD00E0ADDD00DCADDD00D8),
    .INIT_2D(256'hADDD0114ADDD0110ADDD010CADDD0108ADDD0104ADDD0100ADDD00FCADDD00F8),
    .INIT_2E(256'hADDD0134ADDD0130ADDD012CADDD0128ADDD0124ADDD0120ADDD011CADDD0118),
    .INIT_2F(256'hADDD0154ADDD0150ADDD014CADDD0148ADDD0144ADDD0140ADDD013CADDD0138),
    .INIT_30(256'hADDD0174ADDD0170ADDD016CADDD0168ADDD0164ADDD0160ADDD015CADDD0158),
    .INIT_31(256'hADDD0194ADDD0190ADDD018CADDD0188ADDD0184ADDD0180ADDD017CADDD0178),
    .INIT_32(256'hADDD01B4ADDD01B0ADDD01ACADDD01A8ADDD01A4ADDD01A0ADDD019CADDD0198),
    .INIT_33(256'hADDD01D4ADDD01D0ADDD01CCADDD01C8ADDD01C4ADDD01C0ADDD01BCADDD01B8),
    .INIT_34(256'hADDD01F4ADDD01F0ADDD01ECADDD01E8ADDD01E4ADDD01E0ADDD01DCADDD01D8),
    .INIT_35(256'hADDD0214ADDD0210ADDD020CADDD0208ADDD0204ADDD0200ADDD01FCADDD01F8),
    .INIT_36(256'hADDD0234ADDD0230ADDD022CADDD0228ADDD0224ADDD0220ADDD021CADDD0218),
    .INIT_37(256'hADDD0254ADDD0250ADDD024CADDD0248ADDD0244ADDD0240ADDD023CADDD0238),
    .INIT_38(256'h2802400620000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF20000000FFFFFFFF),
    .INIT_39(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2000000020000000),
    .INIT_3A(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_3B(256'hADDD0798ADDD0794ADDD0790ADDD078CADDD0788ADDD0784FFFFFFFFFFFFFFFF),
    .INIT_3C(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_3D(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_3E(256'hFFFF07F2FFFF07F2FFFFFFFFFFFFFFFFFFFFFFFF07F2FFFFFFFF07F207F2FFFF),
    .INIT_3F(256'h040C3A0C0C3A100A00000C0514686643FFFFFFFFFFFFFFFFFFFF07F2FFFFFFFF),
    .INIT_40(256'h0C3A0C043A0C0C3A0C0C3A0C0C3A0C043A0C0C3A040C3A0C0C3A0C043A0C0C3A),
    .INIT_41(256'h3A0C0C3A040C3A0C0C3A0C043A0C0C3A040C3A0C0C3A0C063A0C0C3A040C3A0C),
    .INIT_42(256'h0C3A0C0C3A100A063A0C0C3A040C3A0C0C3A0C043A0C0C3A0C0C3A0C0C3A0C04),
    .INIT_43(256'h3A0C043A0C0C3A0C0C3A0C043A0C0C3A040C3A0C043A0C0C3A0C0C3A0C043A0C),
    .INIT_44(256'h0C0C3A0C043A0C0C3A0C043A0C0C3A0C063A0C0C3A040C3A0C043A0C0C3A0C0C),
    .INIT_45(256'h0C3A0C0C3A0C0C3A0C0C3A0C0C3A0C0C3A040C3A0C0C3A02063A0C0C3A040C3A),
    .INIT_46(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01),
    .INIT_47(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_48(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_49(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_4A(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_4B(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_4C(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_4D(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_4E(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_4F(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_50(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_51(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_52(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_53(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_54(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_55(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_56(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_57(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_58(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_59(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_5A(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_5B(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_5C(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_5D(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_5E(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_5F(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_60(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_61(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_62(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_63(256'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'hFFFFFFFFF),
    .INIT_B(36'hFFFFFFFFF),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'hFFFFFFFFF),
    .SRVAL_B(36'hFFFFFFFFF),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    storage
       (.ADDRARDADDR({addra,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({Q[11:2],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(NLW_storage_CASDOUTA_UNCONNECTED[31:0]),
        .CASDOUTB(NLW_storage_CASDOUTB_UNCONNECTED[31:0]),
        .CASDOUTPA(NLW_storage_CASDOUTPA_UNCONNECTED[3:0]),
        .CASDOUTPB(NLW_storage_CASDOUTPB_UNCONNECTED[3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(NLW_storage_CASOUTDBITERR_UNCONNECTED),
        .CASOUTSBITERR(NLW_storage_CASOUTSBITERR_UNCONNECTED),
        .CLKARDCLK(icap_clk),
        .CLKBWRCLK(icap_clk),
        .DBITERR(NLW_storage_DBITERR_UNCONNECTED),
        .DINADIN({dina[34:27],dina[25:18],dina[16:9],dina[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b1,1'b1}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(NLW_storage_DOUTADOUT_UNCONNECTED[31:0]),
        .DOUTBDOUT({D[24],D[25],D[26],D[27],D[28],D[29],D[30],D[31],D[16],D[17],D[18],D[19],D[20],D[21],D[22],D[23],D[8],D[9],D[10],D[11],D[12],D[13],D[14],D[15],D[0],D[1],D[2],D[3],D[4],D[5],D[6],D[7]}),
        .DOUTPADOUTP(NLW_storage_DOUTPADOUTP_UNCONNECTED[3:0]),
        .DOUTPBDOUTP({doutb[35],doutb[26],doutb[17],doutb[8]}),
        .ECCPARITY(NLW_storage_ECCPARITY_UNCONNECTED[7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(bram_enable),
        .ENBWREN(bram_enable),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(NLW_storage_RDADDRECC_UNCONNECTED[8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(NLW_storage_SBITERR_UNCONNECTED),
        .SLEEP(1'b0),
        .WEA(wea),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_1
       (.I0(storage_15[9]),
        .I1(Q[11]),
        .I2(storage_14),
        .O(addra[9]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_10
       (.I0(storage_15[0]),
        .I1(Q[2]),
        .I2(storage_14),
        .O(addra[0]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_11
       (.I0(storage_16[24]),
        .I1(storage_14),
        .I2(out_port_reg[7]),
        .O(dina[34]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_12
       (.I0(storage_16[25]),
        .I1(storage_14),
        .I2(out_port_reg[6]),
        .O(dina[33]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_13
       (.I0(storage_16[26]),
        .I1(storage_14),
        .I2(out_port_reg[5]),
        .O(dina[32]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_14
       (.I0(storage_16[27]),
        .I1(storage_14),
        .I2(out_port_reg[4]),
        .O(dina[31]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_15
       (.I0(storage_16[28]),
        .I1(storage_14),
        .I2(out_port_reg[3]),
        .O(dina[30]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_16
       (.I0(storage_16[29]),
        .I1(storage_14),
        .I2(out_port_reg[2]),
        .O(dina[29]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_17
       (.I0(storage_16[30]),
        .I1(storage_14),
        .I2(out_port_reg[1]),
        .O(dina[28]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_18
       (.I0(storage_16[31]),
        .I1(storage_14),
        .I2(out_port_reg[0]),
        .O(dina[27]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_19
       (.I0(storage_16[16]),
        .I1(storage_14),
        .I2(out_port_reg[7]),
        .O(dina[25]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_2
       (.I0(storage_15[8]),
        .I1(Q[10]),
        .I2(storage_14),
        .O(addra[8]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_20
       (.I0(storage_16[17]),
        .I1(storage_14),
        .I2(out_port_reg[6]),
        .O(dina[24]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_21
       (.I0(storage_16[18]),
        .I1(storage_14),
        .I2(out_port_reg[5]),
        .O(dina[23]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_22
       (.I0(storage_16[19]),
        .I1(storage_14),
        .I2(out_port_reg[4]),
        .O(dina[22]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_23
       (.I0(storage_16[20]),
        .I1(storage_14),
        .I2(out_port_reg[3]),
        .O(dina[21]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_24
       (.I0(storage_16[21]),
        .I1(storage_14),
        .I2(out_port_reg[2]),
        .O(dina[20]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_25
       (.I0(storage_16[22]),
        .I1(storage_14),
        .I2(out_port_reg[1]),
        .O(dina[19]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_26
       (.I0(storage_16[23]),
        .I1(storage_14),
        .I2(out_port_reg[0]),
        .O(dina[18]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_27
       (.I0(storage_16[8]),
        .I1(storage_14),
        .I2(out_port_reg[7]),
        .O(dina[16]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_28
       (.I0(storage_16[9]),
        .I1(storage_14),
        .I2(out_port_reg[6]),
        .O(dina[15]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_29
       (.I0(storage_16[10]),
        .I1(storage_14),
        .I2(out_port_reg[5]),
        .O(dina[14]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_3
       (.I0(storage_15[7]),
        .I1(Q[9]),
        .I2(storage_14),
        .O(addra[7]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_30
       (.I0(storage_16[11]),
        .I1(storage_14),
        .I2(out_port_reg[4]),
        .O(dina[13]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_31
       (.I0(storage_16[12]),
        .I1(storage_14),
        .I2(out_port_reg[3]),
        .O(dina[12]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_32
       (.I0(storage_16[13]),
        .I1(storage_14),
        .I2(out_port_reg[2]),
        .O(dina[11]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_33
       (.I0(storage_16[14]),
        .I1(storage_14),
        .I2(out_port_reg[1]),
        .O(dina[10]));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_34
       (.I0(storage_16[15]),
        .I1(storage_14),
        .I2(out_port_reg[0]),
        .O(dina[9]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_35
       (.I0(storage_16[0]),
        .I1(storage_14),
        .I2(out_port_reg[7]),
        .O(dina[7]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_36
       (.I0(storage_16[1]),
        .I1(storage_14),
        .I2(out_port_reg[6]),
        .O(dina[6]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_37
       (.I0(storage_16[2]),
        .I1(storage_14),
        .I2(out_port_reg[5]),
        .O(dina[5]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_38
       (.I0(storage_16[3]),
        .I1(storage_14),
        .I2(out_port_reg[4]),
        .O(dina[4]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_39
       (.I0(storage_16[4]),
        .I1(storage_14),
        .I2(out_port_reg[3]),
        .O(dina[3]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_4
       (.I0(storage_15[6]),
        .I1(Q[8]),
        .I2(storage_14),
        .O(addra[6]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_40
       (.I0(storage_16[5]),
        .I1(storage_14),
        .I2(out_port_reg[2]),
        .O(dina[2]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_41
       (.I0(storage_16[6]),
        .I1(storage_14),
        .I2(out_port_reg[1]),
        .O(dina[1]));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    storage_i_42
       (.I0(storage_16[7]),
        .I1(storage_14),
        .I2(out_port_reg[0]),
        .O(dina[0]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT5 #(
    .INIT(32'hB8888888)) 
    storage_i_43
       (.I0(out),
        .I1(storage_14),
        .I2(wr_b_dat__0),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(wea[3]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT5 #(
    .INIT(32'h88B88888)) 
    storage_i_44
       (.I0(out),
        .I1(storage_14),
        .I2(wr_b_dat__0),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(wea[2]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT5 #(
    .INIT(32'h88B88888)) 
    storage_i_45
       (.I0(out),
        .I1(storage_14),
        .I2(wr_b_dat__0),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(wea[1]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT5 #(
    .INIT(32'h888888B8)) 
    storage_i_46
       (.I0(out),
        .I1(storage_14),
        .I2(wr_b_dat__0),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(wea[0]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_5
       (.I0(storage_15[5]),
        .I1(Q[7]),
        .I2(storage_14),
        .O(addra[5]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_6
       (.I0(storage_15[4]),
        .I1(Q[6]),
        .I2(storage_14),
        .O(addra[4]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_7
       (.I0(storage_15[3]),
        .I1(Q[5]),
        .I2(storage_14),
        .O(addra[3]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_8
       (.I0(storage_15[2]),
        .I1(Q[4]),
        .I2(storage_14),
        .O(addra[2]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    storage_i_9
       (.I0(storage_15[1]),
        .I1(Q[3]),
        .I2(storage_14),
        .O(addra[1]));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_instrom" *) 
module semicap_sem_ultra_v3_1_11_instrom
   (bram_enable,
    SR,
    sleep,
    rom_error,
    Q,
    icap_clk,
    bram_wr_en2,
    address,
    bram2_en,
    bram_wr_en1,
    casdomux2,
    bram_wr_en0);
  output bram_enable;
  output [0:0]SR;
  output sleep;
  output rom_error;
  output [17:0]Q;
  input icap_clk;
  input bram_wr_en2;
  input [11:0]address;
  input bram2_en;
  input bram_wr_en1;
  input casdomux2;
  input bram_wr_en0;

  wire [8:0]\CORCombinational.dly_address_b ;
  wire D0;
  wire \OUTRegistered.instruction[0]_i_1_n_0 ;
  wire \OUTRegistered.instruction[10]_i_1_n_0 ;
  wire \OUTRegistered.instruction[11]_i_1_n_0 ;
  wire \OUTRegistered.instruction[12]_i_1_n_0 ;
  wire \OUTRegistered.instruction[13]_i_1_n_0 ;
  wire \OUTRegistered.instruction[14]_i_1_n_0 ;
  wire \OUTRegistered.instruction[15]_i_1_n_0 ;
  wire \OUTRegistered.instruction[16]_i_1_n_0 ;
  wire \OUTRegistered.instruction[17]_i_1_n_0 ;
  wire \OUTRegistered.instruction[1]_i_1_n_0 ;
  wire \OUTRegistered.instruction[2]_i_1_n_0 ;
  wire \OUTRegistered.instruction[3]_i_1_n_0 ;
  wire \OUTRegistered.instruction[4]_i_1_n_0 ;
  wire \OUTRegistered.instruction[5]_i_1_n_0 ;
  wire \OUTRegistered.instruction[6]_i_1_n_0 ;
  wire \OUTRegistered.instruction[7]_i_1_n_0 ;
  wire \OUTRegistered.instruction[8]_i_1_n_0 ;
  wire \OUTRegistered.instruction[9]_i_1_n_0 ;
  wire [17:0]Q;
  wire [0:0]SR;
  wire [11:0]address;
  wire bram2_en;
  wire bram_enable;
  wire bram_wr_en0;
  wire bram_wr_en1;
  wire bram_wr_en2;
  wire [31:0]casa1;
  wire [31:0]casa2;
  wire [31:0]casb1;
  wire [31:0]casb2;
  wire casdbiterr1;
  wire casdomux2;
  wire [3:0]caspa1;
  wire [3:0]caspa2;
  wire [3:0]caspb1;
  wire [3:0]caspb2;
  wire cassbiterr1;
  wire dbiterr_out_b;
  wire firmware0_n_100;
  wire firmware0_n_101;
  wire firmware0_n_102;
  wire firmware0_n_103;
  wire firmware0_n_104;
  wire firmware0_n_105;
  wire firmware0_n_106;
  wire firmware0_n_107;
  wire firmware0_n_108;
  wire firmware0_n_109;
  wire firmware0_n_110;
  wire firmware0_n_111;
  wire firmware0_n_112;
  wire firmware0_n_113;
  wire firmware0_n_114;
  wire firmware0_n_115;
  wire firmware0_n_116;
  wire firmware0_n_117;
  wire firmware0_n_118;
  wire firmware0_n_119;
  wire firmware0_n_120;
  wire firmware0_n_121;
  wire firmware0_n_122;
  wire firmware0_n_123;
  wire firmware0_n_124;
  wire firmware0_n_125;
  wire firmware0_n_80;
  wire firmware0_n_81;
  wire firmware0_n_82;
  wire firmware0_n_83;
  wire firmware0_n_84;
  wire firmware0_n_85;
  wire firmware0_n_86;
  wire firmware0_n_87;
  wire firmware0_n_88;
  wire firmware0_n_89;
  wire firmware0_n_90;
  wire firmware0_n_91;
  wire firmware0_n_92;
  wire firmware0_n_93;
  wire firmware0_n_94;
  wire firmware0_n_95;
  wire firmware0_n_96;
  wire firmware0_n_97;
  wire firmware0_n_98;
  wire firmware0_n_99;
  wire icap_clk;
  wire [2:0]instr_sel;
  wire [17:0]p_1_in;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire q_sync_h;
  wire q_sync_j;
  wire q_sync_k;
  wire rom_error;
  wire sleep;
  wire NLW_firmware0_CASOUTDBITERR_UNCONNECTED;
  wire NLW_firmware0_CASOUTSBITERR_UNCONNECTED;
  wire [31:0]NLW_firmware0_CASDOUTA_UNCONNECTED;
  wire [31:0]NLW_firmware0_CASDOUTB_UNCONNECTED;
  wire [3:0]NLW_firmware0_CASDOUTPA_UNCONNECTED;
  wire [3:0]NLW_firmware0_CASDOUTPB_UNCONNECTED;
  wire [3:0]NLW_firmware0_DOUTPADOUTP_UNCONNECTED;
  wire [3:0]NLW_firmware0_DOUTPBDOUTP_UNCONNECTED;
  wire [7:0]NLW_firmware0_ECCPARITY_UNCONNECTED;
  wire [8:0]NLW_firmware0_RDADDRECC_UNCONNECTED;
  wire NLW_firmware1_DBITERR_UNCONNECTED;
  wire NLW_firmware1_SBITERR_UNCONNECTED;
  wire [31:0]NLW_firmware1_DOUTADOUT_UNCONNECTED;
  wire [31:0]NLW_firmware1_DOUTBDOUT_UNCONNECTED;
  wire [3:0]NLW_firmware1_DOUTPADOUTP_UNCONNECTED;
  wire [3:0]NLW_firmware1_DOUTPBDOUTP_UNCONNECTED;
  wire [7:0]NLW_firmware1_ECCPARITY_UNCONNECTED;
  wire [8:0]NLW_firmware1_RDADDRECC_UNCONNECTED;
  wire NLW_firmware2_CASOUTDBITERR_UNCONNECTED;
  wire NLW_firmware2_CASOUTSBITERR_UNCONNECTED;
  wire NLW_firmware2_DBITERR_UNCONNECTED;
  wire NLW_firmware2_SBITERR_UNCONNECTED;
  wire [31:0]NLW_firmware2_DOUTADOUT_UNCONNECTED;
  wire [31:0]NLW_firmware2_DOUTBDOUT_UNCONNECTED;
  wire [3:0]NLW_firmware2_DOUTPADOUTP_UNCONNECTED;
  wire [3:0]NLW_firmware2_DOUTPBDOUTP_UNCONNECTED;
  wire [7:0]NLW_firmware2_ECCPARITY_UNCONNECTED;
  wire [8:0]NLW_firmware2_RDADDRECC_UNCONNECTED;

  FDRE \CORCombinational.dly_address_b_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[0]),
        .Q(\CORCombinational.dly_address_b [0]),
        .R(SR));
  FDRE \CORCombinational.dly_address_b_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[1]),
        .Q(\CORCombinational.dly_address_b [1]),
        .R(SR));
  FDRE \CORCombinational.dly_address_b_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[2]),
        .Q(\CORCombinational.dly_address_b [2]),
        .R(SR));
  FDRE \CORCombinational.dly_address_b_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[3]),
        .Q(\CORCombinational.dly_address_b [3]),
        .R(SR));
  FDRE \CORCombinational.dly_address_b_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[4]),
        .Q(\CORCombinational.dly_address_b [4]),
        .R(SR));
  FDRE \CORCombinational.dly_address_b_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[5]),
        .Q(\CORCombinational.dly_address_b [5]),
        .R(SR));
  FDRE \CORCombinational.dly_address_b_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[6]),
        .Q(\CORCombinational.dly_address_b [6]),
        .R(SR));
  FDRE \CORCombinational.dly_address_b_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[7]),
        .Q(\CORCombinational.dly_address_b [7]),
        .R(SR));
  FDRE \CORCombinational.dly_address_b_reg[8] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[8]),
        .Q(\CORCombinational.dly_address_b [8]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[0]_i_1 
       (.I0(firmware0_n_99),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_123),
        .I5(p_1_in[0]),
        .O(\OUTRegistered.instruction[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[10]_i_1 
       (.I0(firmware0_n_89),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_113),
        .I5(p_1_in[10]),
        .O(\OUTRegistered.instruction[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[11]_i_1 
       (.I0(firmware0_n_88),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_112),
        .I5(p_1_in[11]),
        .O(\OUTRegistered.instruction[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[12]_i_1 
       (.I0(firmware0_n_87),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_111),
        .I5(p_1_in[12]),
        .O(\OUTRegistered.instruction[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[13]_i_1 
       (.I0(firmware0_n_86),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_110),
        .I5(p_1_in[13]),
        .O(\OUTRegistered.instruction[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[14]_i_1 
       (.I0(firmware0_n_85),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_109),
        .I5(p_1_in[14]),
        .O(\OUTRegistered.instruction[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[15]_i_1 
       (.I0(firmware0_n_84),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_108),
        .I5(p_1_in[15]),
        .O(\OUTRegistered.instruction[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[16]_i_1 
       (.I0(firmware0_n_83),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_107),
        .I5(p_1_in[16]),
        .O(\OUTRegistered.instruction[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[17]_i_1 
       (.I0(firmware0_n_82),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_106),
        .I5(p_1_in[17]),
        .O(\OUTRegistered.instruction[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[1]_i_1 
       (.I0(firmware0_n_98),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_122),
        .I5(p_1_in[1]),
        .O(\OUTRegistered.instruction[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[2]_i_1 
       (.I0(firmware0_n_97),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_121),
        .I5(p_1_in[2]),
        .O(\OUTRegistered.instruction[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[3]_i_1 
       (.I0(firmware0_n_96),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_120),
        .I5(p_1_in[3]),
        .O(\OUTRegistered.instruction[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[4]_i_1 
       (.I0(firmware0_n_95),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_119),
        .I5(p_1_in[4]),
        .O(\OUTRegistered.instruction[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[5]_i_1 
       (.I0(firmware0_n_94),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_118),
        .I5(p_1_in[5]),
        .O(\OUTRegistered.instruction[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[6]_i_1 
       (.I0(firmware0_n_93),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_117),
        .I5(p_1_in[6]),
        .O(\OUTRegistered.instruction[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[7]_i_1 
       (.I0(firmware0_n_92),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_116),
        .I5(p_1_in[7]),
        .O(\OUTRegistered.instruction[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[8]_i_1 
       (.I0(firmware0_n_91),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_115),
        .I5(p_1_in[8]),
        .O(\OUTRegistered.instruction[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFA0EFAF20A020A)) 
    \OUTRegistered.instruction[9]_i_1 
       (.I0(firmware0_n_90),
        .I1(instr_sel[0]),
        .I2(instr_sel[2]),
        .I3(instr_sel[1]),
        .I4(firmware0_n_114),
        .I5(p_1_in[9]),
        .O(\OUTRegistered.instruction[9]_i_1_n_0 ));
  FDSE \OUTRegistered.instruction_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[0]_i_1_n_0 ),
        .Q(Q[0]),
        .S(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[10] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[10]_i_1_n_0 ),
        .Q(Q[10]),
        .S(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[11] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[11]_i_1_n_0 ),
        .Q(Q[11]),
        .S(dbiterr_out_b));
  FDRE \OUTRegistered.instruction_reg[12] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[12]_i_1_n_0 ),
        .Q(Q[12]),
        .R(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[13] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[13]_i_1_n_0 ),
        .Q(Q[13]),
        .S(dbiterr_out_b));
  FDRE \OUTRegistered.instruction_reg[14] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[14]_i_1_n_0 ),
        .Q(Q[14]),
        .R(dbiterr_out_b));
  FDRE \OUTRegistered.instruction_reg[15] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[15]_i_1_n_0 ),
        .Q(Q[15]),
        .R(dbiterr_out_b));
  FDRE \OUTRegistered.instruction_reg[16] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[16]_i_1_n_0 ),
        .Q(Q[16]),
        .R(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[17] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[17]_i_1_n_0 ),
        .Q(Q[17]),
        .S(dbiterr_out_b));
  FDRE \OUTRegistered.instruction_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[2]_i_1_n_0 ),
        .Q(Q[2]),
        .S(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[3]_i_1_n_0 ),
        .Q(Q[3]),
        .S(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[4]_i_1_n_0 ),
        .Q(Q[4]),
        .S(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[5]_i_1_n_0 ),
        .Q(Q[5]),
        .S(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[6]_i_1_n_0 ),
        .Q(Q[6]),
        .S(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[7]_i_1_n_0 ),
        .Q(Q[7]),
        .S(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[8] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[8]_i_1_n_0 ),
        .Q(Q[8]),
        .S(dbiterr_out_b));
  FDSE \OUTRegistered.instruction_reg[9] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction[9]_i_1_n_0 ),
        .Q(Q[9]),
        .S(dbiterr_out_b));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("LAST"),
    .CASCADE_ORDER_B("LAST"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("TRUE"),
    .EN_ECC_WRITE("TRUE"),
    .INITP_00(256'h61A51039FC6E62CB9C200DFED57FE35BCE36ED465530B584394DA0B9AF00AB01),
    .INITP_01(256'hB0128F908310A32685256EBF3B0C7ED14B7BE11A2721EDE8F1D62FBF25D65077),
    .INITP_02(256'h4ACF7E68C94FCDFFD7EA6A50EF66516A6FF8DE69C4FFE6EAF87CE940455D2785),
    .INITP_03(256'h61F663F6CA707FCC4BFAFACE7B66F9CED74259FDECC6DD71447872E8E9E55A73),
    .INITP_04(256'h67C7D6DEE1C0E0E2F8697DF7C5C15EF465556DF473DAFA6FFE7159E77BE9D876),
    .INITP_05(256'h7D4ACB79C16CCAD2E6524E644D7BF35E415B7E57E1CAECE0CE69794E68C065DB),
    .INITP_06(256'h6E51655CEA5FD3436BE6ECC6D84350C64559527F6965F95DE1F86ACD6FCA7355),
    .INITP_07(256'hE7FBF860F8DD7C5D6652EFC2E2DC7ADCEF45EF5BEC50E04AEF416A5CEF5CEF7E),
    .INITP_08(256'h6B6871606D7F65E765F5ED6DF0616BEFF27BFCF4F0FEEA6EF279FC75F07F6BEC),
    .INITP_09(256'hF1C869FACB71EFFFDAEA72FEDDE96A41F0786B7471E76B6565796A7AE174F0FF),
    .INITP_0A(256'hEDF65BDE74F3C44F6E56646AD350704C494D65FDF1D7D2F34DC1E042C3536C6D),
    .INITP_0B(256'h7BD5F4DF4D6562D27369FA54CDE9557C7045596A5465FFFA7C594EC463FEE95C),
    .INITP_0C(256'h4CEDDBEE537FD8E278FC7DCA41E7EBCB62E25CD871FC724571F3CF5349D6FAEB),
    .INITP_0D(256'hE8C26AC667C665C67E71C14E79EFC04BCF7863C7C976FCC553594968476CF4DD),
    .INITP_0E(256'h53567BCFC84C50CC524F5F6F7EECFF6B5FE8CE4BF6754AD8F57FDBE571F4F9CF),
    .INITP_0F(256'h42CDD2DACD7965CDC95C4E4AC248CA43CB49DDEC6A454A61654F51467B63F474),
    .INIT_00(256'h0013032200820020014206207632FF000142000108201F000149082F01F28000),
    .INIT_01(256'h0013013261F2074D02F20E1D008010010142083261F200490143081D00220033),
    .INIT_02(256'h02F30F366111D0020043001D0203205D0140063261F1D00100B0021D0102073E),
    .INIT_03(256'h02F20C010021D0100012FF2074132265025000050401D0000370002073B32145),
    .INIT_04(256'h0370002073B1D00802F20F36618324F102F20E1D0401D00402F20D226253242C),
    .INIT_05(256'h00B117226250106000B016010023222C001300207411D082025000030BF32590),
    .INIT_06(256'h02F220030BF2070A02F1172073B2074D02F016360170109F020C321D08020741),
    .INIT_07(256'h020C322012D22FFD00B11922625206DC00B01801002207220013012074120712),
    .INIT_08(256'h001302207410B00002F221050403202F02F1192073B0D08002F018208A509002),
    .INIT_09(256'h02F01A22008011FF020C322077B010FF00B11B2074D3602F00B01A010000D001),
    .INIT_0A(256'h00B01C250001B200001303366281B10002F2220D0801900102F11B0900D0121F),
    .INIT_0B(256'h02F11D250000900102F01C3662C2F000020C320D0400100100B11D0900D3E029),
    .INIT_0C(256'h01D0FF0BF052B0000012000BE0425000025000015093202F02F223014D00D040),
    .INIT_0D(256'h0140062263A09001014006326382BE0F0310001FF322BF7E01F1FF1DEDB2B00C),
    .INIT_0E(256'h0140060B2150D020014100013000900D0140060150A2D001014006014400300F),
    .INIT_0F(256'h01400E143000900601400E142002203A01400E0D010090060141000B0143603F),
    .INIT_10(256'h022FFD0300736046025000143000D08000B224142000900D0100300D00809006),
    .INIT_11(256'h022FFD1410609007022FFD3A64909007022FFD1900122041022FFD0110109007),
    .INIT_12(256'h022FFD2D30A20714022FFD1235020704022FFD1024020720022FFD2264525000),
    .INIT_13(256'h022FFD2500020722022FFD0201020712022FFD0900820724022FFD2D209206E0),
    .INIT_14(256'h022FFD14B0620726022FFD14B06206E0022FFD0BB13206FC022FFD01A002071E),
    .INIT_15(256'h022FFD09F1F206DC022FFD09E1E206E4022FFD09D1D206E0022FFD09C1C206E6),
    .INIT_16(256'h022FFD13E003E05A022FFD13D0019001022FFD10CB001019022FFD10BA025000),
    .INIT_17(256'h022FFD2067A200DC022FFD01B00200F6022FFD01A04200EE022FFD13F0025000),
    .INIT_18(256'h022FFD09D0720896022FFD2062832060022FFD09C070D001022FFD206280900D),
    .INIT_19(256'h022FFD09F07208B7022FFD20628208D4022FFD09E0701101022FFD2062801080),
    .INIT_1A(256'h022FFD0B51101000022FFD0B41036063022FFD01B011DC93022FFD01AEB208E4),
    .INIT_1B(256'h022FFD12D502F002022FFD10C4001000022FFD036012F001022FFD0B61205001),
    .INIT_1C(256'h022FFD1BB001D102022FFD19A010311E022FFD13F00001E0022FFD12E6020B46),
    .INIT_1D(256'h022FFD01B011D104022FFD01AEC32082022FFD250001D110022FFD3E66E32080),
    .INIT_1E(256'h022FFD2DF071D116022FFD2062C32089022FFD250001D112022FFD2067A32087),
    .INIT_1F(256'h022FFD2DD0722017022FFD2062C3208D022FFD2DE071D100022FFD2062C3208D),
    .INIT_20(256'h022FFD2DB0701220022FFD2062C001D0022FFD2DC07320A1022FFD2062C01200),
    .INIT_21(256'h022FFD0146C01203022FFD250002208D022FFD2DA07320A1022FFD2062C1D190),
    .INIT_22(256'h022FFD0B0141D190022FFD0B21501204022FFD01300001D0022FFD01500320A1),
    .INIT_23(256'h022FFD0D00836094022FFD143000DD10022FFD1420001000022FFD0D010320A1),
    .INIT_24(256'h022FFD0110114000022FFD030070DD20022FFD1430014000022FFD142000DD40),
    .INIT_25(256'h022FFD226941D112022FFD141063209B022FFD3A6981D110022FFD190012F002),
    .INIT_26(256'h022FFD2D20901222022FFD2D30A3209F022FFD123501D116022FFD102403209D),
    .INIT_27(256'h022FFD2D20901226022FFD2D30A320A1022FFD0601001223022FFD09008320A1),
    .INIT_28(256'h022FFD14B0001000022FFD14A06200D8022FFD250002F239022FFD2D008320A1),
    .INIT_29(256'h022FFD14F0001001022FFD14E000D004022FFD14D0009002022FFD14C002F03A),
    .INIT_2A(256'h022FFD190E9208A2022FFD3900020101022FFD110B9200E8022FFD250002F024),
    .INIT_2B(256'h022FFD110072090D022FFD3E6B32B02E022FFD19011208A5022FFD390002089F),
    .INIT_2C(256'h022FFD1100A200D8022FFD2500020896022FFD190F62090D022FFD390002B02E),
    .INIT_2D(256'h022FFD206C72B04E022FFD206BD200D8022FFD00C002011F022FFD25000200E2),
    .INIT_2E(256'h022FFD20730320CD022FFD206C71D001022FFD206BD0300F022FFD2073009001),
    .INIT_2F(256'h022FFD14100208A5022FFD14C06320C7022FFD011000D002022FFD2500009002),
    .INIT_30(256'h022FFD1410001002022FFD14C062B80F022FFD141002B40F022FFD14C062B20F),
    .INIT_31(256'h022FFD1D10A2012D022FFD2500022008022FFD141002077B022FFD14C062074D),
    .INIT_32(256'h022FFD250002077B022FFD111302074D022FFD1110701000022FFD3A6CA208A5),
    .INIT_33(256'h022FFD206A92B40F022FFD090062B20F022FFD20733208A5022FFD01A0022008),
    .INIT_34(256'h022FFD1910120769022FFD206A22F032022FFD0110401001022FFD390002B80F),
    .INIT_35(256'h022FFD206C72247A022FFD00100206DE022FFD04A00206E2022FFD366D220702),
    .INIT_36(256'h022FFD2500025000022FFD366CD206DC022FFD1920120710022FFD2073020718),
    .INIT_37(256'h022FFD227302071A022FFD01120206FC022FFD2273020700022FFD0110D2070C),
    .INIT_38(256'h022FFD2273020716022FFD0113E2070C022FFD2273025000022FFD0115F206DE),
    .INIT_39(256'h022FFD2273025000022FFD01133206DE022FFD2273020722022FFD011312070C),
    .INIT_3A(256'h022FFD2273020710022FFD01131206FE022FFD2273020702022FFD011302071E),
    .INIT_3B(256'h022FFD2273020720022FFD0113320706022FFD2273025000022FFD01132206DE),
    .INIT_3C(256'h022FFD22730206B5022FFD011350300F022FFD2273009001022FFD01134206DE),
    .INIT_3D(256'h022FFD2273020706022FFD01137206FC022FFD2273025000022FFD01136206DC),
    .INIT_3E(256'h022FFD227301400E022FFD0113903008022FFD2273009002022FFD01138206DE),
    .INIT_3F(256'h022FFD22730206DC022FFD01142206B5022FFD227301400E022FFD011411400E),
    .INIT_40(256'h022FFD22730208D4022FFD0114401100022FFD22730010C0022FFD0114325000),
    .INIT_41(256'h022FFD2273001C00022FFD0114601D01022FFD2273001E00022FFD0114501F00),
    .INIT_42(256'h022FFD22730208D4022FFD0114801100022FFD22730010A0022FFD01147208EE),
    .INIT_43(256'h022FFD2273001C00022FFD0114A01D00022FFD2273001E00022FFD0114901F00),
    .INIT_44(256'h022FFD22730208D4022FFD0114C01101022FFD22730010C0022FFD0114B208EE),
    .INIT_45(256'h022FFD2273003D7C022FFD0114E03E3C022FFD2273003F81022FFD0114D208EB),
    .INIT_46(256'h022FFD2273005D03022FFD0115005E40022FFD2273005F00022FFD0114F03C3F),
    .INIT_47(256'h022FFD22730010C0022FFD0115225000022FFD22730208EE022FFD0115105C00),
    .INIT_48(256'h022FFD2273003FFF022FFD01154208EB022FFD22730208D4022FFD0115301101),
    .INIT_49(256'h022FFD2273005F00022FFD0115603CFF022FFD2273003DFD022FFD0115503E7F),
    .INIT_4A(256'h022FFD22730208EE022FFD0115805C00022FFD2273005D00022FFD0115705E80),
    .INIT_4B(256'h022FFD22730208D4022FFD0115A01101022FFD22730010C0022FFD0115925000),
    .INIT_4C(256'h022FFD0900D03DFE022FFD2500003EFF022FFD2D10603FFF022FFD20737208EB),
    .INIT_4D(256'h022FFD0900D010C0022FFD2500025000022FFD36733208EE022FFD0D02003CFF),
    .INIT_4E(256'h022FFD0900003FFF022FFD25000208EB022FFD36737208D4022FFD0D01001101),
    .INIT_4F(256'h022FFD0309F05F00022FFD0900003CFF022FFD2500003DFE022FFD0306003EFF),
    .INIT_50(256'h022FFD2073E208EE022FFD0316005C00022FFD0010005D01022FFD2500005E00),
    .INIT_51(256'h022FFD207002F01E022FFD207062F032022FFD2D10001000022FFD0410025000),
    .INIT_52(256'h022FFD206DC0D020022FFD206B53618B022FFD2073B0D040022FFD206DE0900F),
    .INIT_53(256'h022FFD2073B0900E022FFD0319F36186022FFD001000D080022FFD250003618B),
    .INIT_54(256'h022FFD207003617F022FFD207200D040022FFD2D10036182022FFD041000D080),
    .INIT_55(256'h022FFD3277736179022FFD1D0010D010022FFD0B0323617C022FFD206DE0D020),
    .INIT_56(256'h022FFD250000901B022FFD206DC32162022FFD206B50D004022FFD2073E0900E),
    .INIT_57(256'h022FFD010021D0E0022FFD206DE030F0022FFD207002B04E022FFD207202F00B),
    .INIT_58(256'h022FFD001000D020022FFD250000900D022FFD206DC22170022FFD206B53616F),
    .INIT_59(256'h022FFD2D10036169022FFD041001D049022FFD2073B09006022FFD0319F3616F),
    .INIT_5A(256'h022FFD0B13220720022FFD207633616F022FFD010001D053022FFD2500022170),
    .INIT_5B(256'h022FFD206DE22008022FFD207002077B022FFD2072020784022FFD2D103206DC),
    .INIT_5C(256'h022FFD010402012D022FFD3277720896022FFD1D001206DC022FFD0B0322070C),
    .INIT_5D(256'h022FFD010202077B022FFD250002074D022FFD206DC01000022FFD206B5208A5),
    .INIT_5E(256'h022FFD2073E22189022FFD2500001080022FFD206DC2B10E022FFD206B522008),
    .INIT_5F(256'h022FFD206E22B40E022FFD2071822189022FFD3278201040022FFD1D0002B20E),
    .INIT_60(256'h022FFD2277F2B80E022FFD2070C20896022FFD2500022189022FFD206DE01020),
    .INIT_61(256'h022FFD0BC022B80F022FFD206DE20896022FFD2071622189022FFD2072001010),
    .INIT_62(256'h022FFD2074620896022FFD2075222202022FFD206DC2F01E022FFD206B601008),
    .INIT_63(256'h022FFD0BC3A2F01E022FFD206DE01001022FFD2070C2B20F022FFD2071E2B40F),
    .INIT_64(256'h022FFD20714010A0022FFD250000B203022FFD206DC19801022FFD206B60982F),
    .INIT_65(256'h022FFD206E8208E4022FFD206E8208B7022FFD206DE208D4022FFD2070601102),
    .INIT_66(256'h022FFD206B62FE0E022FFD0BC052FD0D022FFD206B62FC0C022FFD0BC0603F03),
    .INIT_67(256'h022FFD207E90BE0E022FFD206DC0BD0D022FFD206B60BC0C022FFD0BC042FF0F),
    .INIT_68(256'h022FFD09502208D4022FFD206DE01100022FFD206FE01020022FFD207220BF0F),
    .INIT_69(256'h022FFD227BF361AA022FFD207FB0D001022FFD3A7A80B001022FFD0D504208EE),
    .INIT_6A(256'h022FFD09F1F208C3022FFD09E1E208AB022FFD09D1D221AD022FFD09C1C22017),
    .INIT_6B(256'h022FFD10CB00B017022FFD14B061D000022FFD14B060B016022FFD0BB0220911),
    .INIT_6C(256'h022FFD2FF3B0B019022FFD13F001F000022FFD13E000B018022FFD13D001F000),
    .INIT_6D(256'h022FFD0BC3B0B01B022FFD2FC341F000022FFD2FD350B01A022FFD2FE361F000),
    .INIT_6E(256'h022FFD0BC350B01D022FFD206B61F000022FFD0BC360B01C022FFD206B61F000),
    .INIT_6F(256'h022FFD206DC1D002022FFD206B60B032022FFD0BC34361C9022FFD206B61F000),
    .INIT_70(256'h022FFD0D5042F03A022FFD206DE11001022FFD206FE0B03A022FFD20700324CD),
    .INIT_71(256'h022FFD0BC343247A022FFD227DD1D001022FFD207FB0B032022FFD3A7C7208A5),
    .INIT_72(256'h022FFD01A04308FA022FFD0BF3B0D001022FFD0BE360B001022FFD0BD3522008),
    .INIT_73(256'h022FFD09F072F034022FFD206280B016022FFD2067A321FF022FFD01B001D800),
    .INIT_74(256'h022FFD09D072F036022FFD206280B018022FFD09E072F035022FFD206280B017),
    .INIT_75(256'h022FFD00CD02F03C022FFD206B60B01A022FFD09C072F03B022FFD206280B019),
    .INIT_76(256'h022FFD00CF02F03E022FFD206B60B01C022FFD00CE02F03D022FFD206B60B01B),
    .INIT_77(256'h022FFD20712208AB022FFD20700208F1022FFD206DC2F03F022FFD206B60B01D),
    .INIT_78(256'h022FFD0D5040B134022FFD01C000B016022FFD206E820911022FFD206DE208C3),
    .INIT_79(256'h022FFD206DC1E010022FFD206B60B135022FFD11C010B017022FFD14C001C010),
    .INIT_7A(256'h022FFD206DE0B019022FFD207201E010022FFD207220B136022FFD250000B018),
    .INIT_7B(256'h022FFD206B60B13C022FFD09C0C0B01A022FFD2B03C1E010022FFD2B80C0B13B),
    .INIT_7C(256'h022FFD2B01C1E010022FFD206B60B13D022FFD09C0C0B01B022FFD2B02C1E010),
    .INIT_7D(256'h022FFD09C0C0B01D022FFD2B00C1E010022FFD206B60B13E022FFD09C0C0B01C),
    .INIT_7E(256'h022FFD2072A19801022FFD2500036211022FFD206DC1E010022FFD206B60B13F),
    .INIT_7F(256'h022FFD2072A20AAD022FFD2072A221DE022FFD2072A321FF022FFD2072A1D800),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(72),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(72)) 
    firmware0
       (.ADDRARDADDR({address[8:0],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\CORCombinational.dly_address_b ,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA(casa1),
        .CASDINB(casb1),
        .CASDINPA(caspa1),
        .CASDINPB(caspb1),
        .CASDOMUXA(casdomux2),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b1),
        .CASDOMUXEN_B(1'b1),
        .CASDOUTA(NLW_firmware0_CASDOUTA_UNCONNECTED[31:0]),
        .CASDOUTB(NLW_firmware0_CASDOUTB_UNCONNECTED[31:0]),
        .CASDOUTPA(NLW_firmware0_CASDOUTPA_UNCONNECTED[3:0]),
        .CASDOUTPB(NLW_firmware0_CASDOUTPB_UNCONNECTED[3:0]),
        .CASINDBITERR(casdbiterr1),
        .CASINSBITERR(cassbiterr1),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(NLW_firmware0_CASOUTDBITERR_UNCONNECTED),
        .CASOUTSBITERR(NLW_firmware0_CASOUTSBITERR_UNCONNECTED),
        .CLKARDCLK(icap_clk),
        .CLKBWRCLK(icap_clk),
        .DBITERR(dbiterr_out_b),
        .DINADIN({p_1_in[11:0],firmware0_n_80,firmware0_n_81,firmware0_n_82,firmware0_n_83,firmware0_n_84,firmware0_n_85,firmware0_n_86,firmware0_n_87,firmware0_n_88,firmware0_n_89,firmware0_n_90,firmware0_n_91,firmware0_n_92,firmware0_n_93,firmware0_n_94,firmware0_n_95,firmware0_n_96,firmware0_n_97,firmware0_n_98,firmware0_n_99}),
        .DINBDIN({firmware0_n_100,firmware0_n_101,firmware0_n_102,firmware0_n_103,firmware0_n_104,firmware0_n_105,firmware0_n_106,firmware0_n_107,firmware0_n_108,firmware0_n_109,firmware0_n_110,firmware0_n_111,firmware0_n_112,firmware0_n_113,firmware0_n_114,firmware0_n_115,firmware0_n_116,firmware0_n_117,firmware0_n_118,firmware0_n_119,firmware0_n_120,firmware0_n_121,firmware0_n_122,firmware0_n_123,firmware0_n_124,firmware0_n_125,p_1_in[17:12]}),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT({p_1_in[11:0],firmware0_n_80,firmware0_n_81,firmware0_n_82,firmware0_n_83,firmware0_n_84,firmware0_n_85,firmware0_n_86,firmware0_n_87,firmware0_n_88,firmware0_n_89,firmware0_n_90,firmware0_n_91,firmware0_n_92,firmware0_n_93,firmware0_n_94,firmware0_n_95,firmware0_n_96,firmware0_n_97,firmware0_n_98,firmware0_n_99}),
        .DOUTBDOUT({firmware0_n_100,firmware0_n_101,firmware0_n_102,firmware0_n_103,firmware0_n_104,firmware0_n_105,firmware0_n_106,firmware0_n_107,firmware0_n_108,firmware0_n_109,firmware0_n_110,firmware0_n_111,firmware0_n_112,firmware0_n_113,firmware0_n_114,firmware0_n_115,firmware0_n_116,firmware0_n_117,firmware0_n_118,firmware0_n_119,firmware0_n_120,firmware0_n_121,firmware0_n_122,firmware0_n_123,firmware0_n_124,firmware0_n_125,p_1_in[17:12]}),
        .DOUTPADOUTP(NLW_firmware0_DOUTPADOUTP_UNCONNECTED[3:0]),
        .DOUTPBDOUTP(NLW_firmware0_DOUTPBDOUTP_UNCONNECTED[3:0]),
        .ECCPARITY(NLW_firmware0_ECCPARITY_UNCONNECTED[7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(bram_enable),
        .ENBWREN(bram_wr_en0),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(NLW_firmware0_RDADDRECC_UNCONNECTED[8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(rom_error),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("MIDDLE"),
    .CASCADE_ORDER_B("MIDDLE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("TRUE"),
    .EN_ECC_WRITE("TRUE"),
    .INITP_00(256'h61D3DAF741CE5D617E514B55ECD1F3F87A6348D761EEC142CE7E56F4635FD75A),
    .INITP_01(256'hE6E8DCF4417A426E7FE04DF879F046EDDF734B76D27E567D4ADEDF61EAE0D66F),
    .INITP_02(256'h7C6CEC7FE7E2D5E2FD4FEAE241E5F9CB717741E2F9CEEA71417BEA49E76BDF66),
    .INITP_03(256'h465BFCE76CEF76EB7B68F34E797462EBFAF77CFF4F6160E27FF874F1E4CBF8F5),
    .INITP_04(256'hEEE3DB7673FEECC04FD2707A4FE14D50E57D51F9C46A70EA4969CF7A62EBDAF3),
    .INITP_05(256'h6154F5E26F79C1D17AEFEF4C4155D37EC742F2FBE565E2E479FCFE6AED71F5F5),
    .INITP_06(256'hD14D5FF46BD2D8DBEE4D6AD07675E0C462CB6BE165F669EAF162EDF5FBF37D7F),
    .INITP_07(256'hE1E0E142E8D16050F049D8745FDEE773FE5C635DF8EED865FC45C744FA4763FC),
    .INITP_08(256'h55DF4CC5D8CE5EC34F405FD15A5DE9F56873C76ED375DBEE5C69E67543DC4745),
    .INITP_09(256'hDA584D59CDC0D5C4DEE94D7B5F69526642525CCD72CD6573476369DFCFDBF4E8),
    .INITP_0A(256'hD24370CEE943734373F74CEDE9CBCCE164D256E57FCAD6FDDDFDCF7D4A78F54E),
    .INITP_0B(256'hEDFFF96078DA75C2F5E2787F55CEDEC1C1634E7B5BC7D7E04B404C6049FBC173),
    .INITP_0C(256'hECD66F4C6FD14EC64773567EC7EAD56172C6EEC3CBED6FFB4B406B63E649E8C0),
    .INITP_0D(256'h4666C4FDCFE7DEF6E747F0C2D66AE87E5F59C5F05C7EC9E75D6050E4F84C6F50),
    .INITP_0E(256'hF34DE5D952EEFE60C6524664C1E7D8E7C4FB45E1FBCFE7D8EAC4FB43E7DE59C2),
    .INITP_0F(256'h55E8F0E65979CBE8CEEFD276FFC0FA406F5AE840F1DC454E40EA43E94360CC6B),
    .INIT_00(256'h022FFD250002F013022FFD2072A0B002022FFD2072A2F01F022FFD2072A01004),
    .INIT_01(256'h022FFD20700206DC022FFD3680B32208022FFD1D0001D002022FFD0B0320B032),
    .INIT_02(256'h022FFD25000324F1022FFD206DC1D001022FFD2071E0B032022FFD207182078C),
    .INIT_03(256'h022FFD206DC2074D022FFD206FC01004022FFD20712324F1022FFD207001D002),
    .INIT_04(256'h022FFD368182F03A022FFD1D00011001022FFD0B0320B03A022FFD2500022008),
    .INIT_05(256'h022FFD206DC1F000022FFD207020B017022FFD207161D000022FFD207040B016),
    .INIT_06(256'h022FFD207001F000022FFD207000B019022FFD207041F000022FFD250000B018),
    .INIT_07(256'h022FFD206FC1F000022FFD2071A0B01B022FFD207E91F000022FFD206DC0B01A),
    .INIT_08(256'h022FFD0B00F1F000022FFD141060B01D022FFD0B1131F000022FFD206DE0B01C),
    .INIT_09(256'h022FFD206BD1D001022FFD206BD0B032022FFD00C00208A5022FFD0401036017),
    .INIT_0A(256'h022FFD206B522008022FFD0B00E324CD022FFD207301D002022FFD206C73247A),
    .INIT_0B(256'h022FFD206B50BE11022FFD0B00C0BD10022FFD206B52F01E022FFD0B00D01001),
    .INIT_0C(256'h022FFD206DE13F00022FFD206FC13E00022FFD2071211D01022FFD206DC0BF12),
    .INIT_0D(256'h022FFD0B0122FF12022FFD1410603F01022FFD0B1132FE11022FFD206E82FD10),
    .INIT_0E(256'h022FFD206B52F00F022FFD0B01103001022FFD206B50B00F022FFD0401020B5F),
    .INIT_0F(256'h022FFD2500003E7E022FFD206DC0BE0E022FFD206B50307E022FFD0B0100B03B),
    .INIT_10(256'h022FFD0BC1620911022FFD3487E208FA022FFD1DCFF3625D022FFD0BC171C0E0),
    .INIT_11(256'h022FFD1DCFF1F000022FFD0BC190B017022FFD348841D000022FFD1DCFF0B016),
    .INIT_12(256'h022FFD348841F000022FFD1DCFF0B019022FFD0BC181F000022FFD3487E0B018),
    .INIT_13(256'h022FFD0BC1A1F000022FFD3487E0B01B022FFD1DCFF1F000022FFD0BC1B0B01A),
    .INIT_14(256'h022FFD1DCFF1F000022FFD0BC1D0B01D022FFD348841F000022FFD1DCFF0B01C),
    .INIT_15(256'h022FFD348842077B022FFD1DCFF2075C022FFD0BC1C2225D022FFD3487E36256),
    .INIT_16(256'h022FFD328622074D022FFD1DD0001004022FFD0BD202078C022FFD25000206DC),
    .INIT_17(256'h022FFD2088A2B40F022FFD0BC162B20F022FFD2087E208A5022FFD0BC1722008),
    .INIT_18(256'h022FFD1DD002077B022FFD0BD212074D022FFD2089001002022FFD0BC202B80F),
    .INIT_19(256'h022FFD0BC180900E022FFD2087E2F032022FFD0BC1901000022FFD3286B22008),
    .INIT_1A(256'h022FFD0BD222F007022FFD2089009017022FFD0BC2132296022FFD2088A0D004),
    .INIT_1B(256'h022FFD2087E2F009022FFD0BC1B09019022FFD328742F008022FFD1DD0009018),
    .INIT_1C(256'h022FFD208902F00B022FFD0BC220901B022FFD2088A2F00A022FFD0BC1A0901A),
    .INIT_1D(256'h022FFD0BC1D3627C022FFD3287D1D0A0022FFD1DD00030F0022FFD0BD232B04E),
    .INIT_1E(256'h022FFD0BC23223EF022FFD2088A323EE022FFD0BC1C0D002022FFD2087E09002),
    .INIT_1F(256'h022FFD207021D0B0022FFD20728223EE022FFD250003627F022FFD208901D0E0),
    .INIT_20(256'h022FFD250002DC01022FFD206DE03C0F022FFD206B60BC07022FFD206DE36289),
    .INIT_21(256'h022FFD206B6206DC022FFD206DE206B6022FFD20722206DE022FFD206FE2071E),
    .INIT_22(256'h022FFD2072220724022FFD206FE3628D022FFD250001D0D0022FFD206DC22003),
    .INIT_23(256'h022FFD2500020702022FFD206DE36291022FFD206B61D0F0022FFD206DE2240B),
    .INIT_24(256'h022FFD206B60D080022FFD206DE32414022FFD207261D0C0022FFD20712223FB),
    .INIT_25(256'h022FFD2B00A0D020022FFD2B0090900D022FFD25000223EC022FFD206DC32414),
    .INIT_26(256'h022FFD01C00362A0022FFD209091D04F022FFD2B08E09006022FFD2B1BB363EE),
    .INIT_27(256'h022FFD01C10223EF022FFD25000323EE022FFD200590D002022FFD208AE09002),
    .INIT_28(256'h022FFD208AE206DC022FFD01C0720720022FFD25000362A7022FFD208AE1D053),
    .INIT_29(256'h022FFD250001D052022FFD208AE223ED022FFD01C0D20793022FFD2500020784),
    .INIT_2A(256'h022FFD01C0409006022FFD2500020733022FFD208AE2071E022FFD01C01362BE),
    .INIT_2B(256'h022FFD01E0020733022FFD01D00206DE022FFD25000363EC022FFD208AE1D020),
    .INIT_2C(256'h022FFD01100206E8022FFD01080363EC022FFD208DD1D030022FFD01F0009006),
    .INIT_2D(256'h022FFD2B3893A3EC022FFD25000206A9022FFD208BD09006022FFD208D420733),
    .INIT_2E(256'h022FFD2090920730022FFD2B08E206C7022FFD2B63B00100022FFD2B00A2D001),
    .INIT_2F(256'h022FFD2B37B362C2022FFD2B00A1D055022FFD2B1C922003022FFD25000206DC),
    .INIT_30(256'h022FFD2B649362C6022FFD250001D044022FFD209092240B022FFD2B08E20724),
    .INIT_31(256'h022FFD20909362D7022FFD2B08E1D04E022FFD2B0BB223FB022FFD2B72A20702),
    .INIT_32(256'h022FFD2B57B1D020022FFD2B20A09006022FFD2B64920733022FFD2500020716),
    .INIT_33(256'h022FFD2B20A206CC022FFD2B6C90120A022FFD20909206DE022FFD2B08E363EC),
    .INIT_34(256'h022FFD250002FC09022FFD209092FB08022FFD2B08E2FA07022FFD2B63B3A3EC),
    .INIT_35(256'h022FFD2D1081D054022FFD2D00822420022FFD2B4192FE0B022FFD2B00A2FD0A),
    .INIT_36(256'h022FFD2D10809006022FFD2D00820733022FFD2B25920722022FFD2B00A3632A),
    .INIT_37(256'h022FFD2DC080120A022FFD2B289206DE022FFD2B00A363EC022FFD250001D020),
    .INIT_38(256'h022FFD250002FB3F022FFD2DF082FA3E022FFD2DE083A3EC022FFD2DD08206CC),
    .INIT_39(256'h022FFD09D08322E9022FFD09C080DE80022FFD2B28932308022FFD2B00A1DEC0),
    .INIT_3A(256'h022FFD208B7206A2022FFD25000206A2022FFD09F08206A2022FFD09E08223EC),
    .INIT_3B(256'h022FFD208BD206A2022FFD208DD363EC022FFD2500018FA0022FFD208E40BA02),
    .INIT_3C(256'h022FFD208D42FF0F022FFD011002FE0E022FFD010202FD0D022FFD250002FC0C),
    .INIT_3D(256'h022FFD0BC0C0BE11022FFD0BD0D0BD10022FFD0BE0E206DC022FFD0BF0F20AAD),
    .INIT_3E(256'h022FFD208AB206B6022FFD208F100CF0022FFD2500020700022FFD208EE0BF12),
    .INIT_3F(256'h022FFD25000206B6022FFD2090000CD0022FFD25000206B6022FFD208C300CE0),
    .INIT_40(256'h022FFD208D4206C7022FFD01101206BD022FFD01080206BD022FFD208F10BC3F),
    .INIT_41(256'h022FFD208C9223EC022FFD208A8206B6022FFD208BD0BC3E022FFD208B720730),
    .INIT_42(256'h022FFD369090BA02022FFD0D008206A2022FFD0900E206A2022FFD25000206A2),
    .INIT_43(256'h022FFD3290D2FC10022FFD0D002206A2022FFD0900E363EC022FFD2500018EA0),
    .INIT_44(256'h022FFD2F116206DC022FFD0110020B5F022FFD370012FE12022FFD250002FD11),
    .INIT_45(256'h022FFD2F11A0BC0F022FFD2F1190BD0E022FFD2F1180BE0D022FFD2F1170BF0C),
    .INIT_46(256'h022FFD0108420730022FFD2F11D206C7022FFD2F11C206BD022FFD2F11B206BD),
    .INIT_47(256'h022FFD11001206B6022FFD2B00B00CE0022FFD2B00A206B6022FFD2B6C900CD0),
    .INIT_48(256'h022FFD1D0FF206BD022FFD209860BC3F022FFD2092C206B6022FFD2092700CF0),
    .INIT_49(256'h022FFD09C080BC3E022FFD2500020730022FFD37000206C7022FFD3691F206BD),
    .INIT_4A(256'h022FFD2500036348022FFD09F081D058022FFD09E08223EC022FFD09D08206B6),
    .INIT_4B(256'h022FFD329572072A022FFD1D0C23E348022FFD329420D004022FFD1D0C109002),
    .INIT_4C(256'h022FFD20975363EC022FFD001E01D020022FFD2097509006022FFD001F020733),
    .INIT_4D(256'h022FFD209753A3EC022FFD001C0206CC022FFD2097501208022FFD001D0206DE),
    .INIT_4E(256'h022FFD2F12C2FC36022FFD2F12A2FB35022FFD2F1282FA34022FFD01100206DC),
    .INIT_4F(256'h022FFD2F12D0BE36022FFD2F12B0BD35022FFD2F1290BC34022FFD2F12E2FD3B),
    .INIT_50(256'h022FFD209752067A022FFD001F001B00022FFD2500001A01022FFD2F12F0BF3B),
    .INIT_51(256'h022FFD20975223EC022FFD001D0206B6022FFD2097509C07022FFD001E020628),
    .INIT_52(256'h022FFD2F62A20733022FFD2F7282071C022FFD2097536390022FFD001C01D051),
    .INIT_53(256'h022FFD01500206DE022FFD01400363EC022FFD2F42E1D020022FFD2F52C09006),
    .INIT_54(256'h022FFD2F62B1DEC0022FFD2F7293A3EC022FFD01700206CC022FFD016000120A),
    .INIT_55(256'h022FFD001F0223EC022FFD2294132358022FFD2F42F0DE80022FFD2F52D32364),
    .INIT_56(256'h022FFD001D00BA02022FFD20975206A2022FFD001E0206A2022FFD20975206A2),
    .INIT_57(256'h022FFD001702FC0C022FFD20975206A2022FFD001C0363EC022FFD2097518FA0),
    .INIT_58(256'h022FFD001602237A022FFD037F02FF0F022FFD2F1292FE0E022FFD0310F2FD0D),
    .INIT_59(256'h022FFD001500BA02022FFD036F0206A2022FFD2F12B206A2022FFD0310F206A2),
    .INIT_5A(256'h022FFD001402FC10022FFD035F0206A2022FFD2F12D363EC022FFD0310F18EA0),
    .INIT_5B(256'h022FFD011000B105022FFD034F00B004022FFD2F12F2FE12022FFD0310F2FD11),
    .INIT_5C(256'h022FFD2F12E1AE20022FFD2F12C1AD10022FFD2F12A18C00022FFD2F1280B206),
    .INIT_5D(256'h022FFD1410003401022FFD144000B40F022FFD1410020B5F022FFD229413E3EC),
    .INIT_5E(256'h022FFD14100208FA022FFD1460020896022FFD141002237A022FFD145002F40F),
    .INIT_5F(256'h022FFD141000127B022FFD144002B6C9022FFD141002B00A022FFD14700206DC),
    .INIT_60(256'h022FFD1410009C08022FFD1460009D08022FFD1410009E08022FFD1450009F08),
    .INIT_61(256'h022FFD0B82800CE0022FFD00170206B6022FFD2500000CD0022FFD14700206B6),
    .INIT_62(256'h022FFD20A51206DC022FFD20A33206B6022FFD20A2700CF0022FFD0B929206B6),
    .INIT_63(256'h022FFD14B00223ED022FFD14A0E208A5022FFD0BA2536380022FFD01B0019201),
    .INIT_64(256'h022FFD14A0020733022FFD14B002071A022FFD14A00363EE022FFD0BA261D050),
    .INIT_65(256'h022FFD0B217206DE022FFD14B00363EC022FFD14A001D020022FFD14B0009006),
    .INIT_66(256'h022FFD14B00206A2022FFD14A003A3EC022FFD2F217206CC022FFD062B001202),
    .INIT_67(256'h022FFD14B0018BC0022FFD14A000BC02022FFD14B00206A2022FFD14A00206A2),
    .INIT_68(256'h022FFD14B0009002022FFD14A00206A2022FFD14B00206A2022FFD14A00363EC),
    .INIT_69(256'h022FFD14A001FB00022FFD14B001DA00022FFD14A00363DA022FFD0BA270D040),
    .INIT_6A(256'h022FFD0B216323DA022FFD14B001FB00022FFD14A001DA20022FFD14B00323DA),
    .INIT_6B(256'h022FFD0B82A1DAA0022FFD00160323DA022FFD2FB161FB00022FFD06B201DA80),
    .INIT_6C(256'h022FFD20A511FB00022FFD20A331DAC0022FFD20A27323DA022FFD0B92B1FB00),
    .INIT_6D(256'h022FFD14B00323DA022FFD14A0E1FB00022FFD0BA251DAE0022FFD01B00323DA),
    .INIT_6E(256'h022FFD14A001DA80022FFD14B00323DA022FFD14A001FB01022FFD0BA261DA20),
    .INIT_6F(256'h022FFD0B2191FB01022FFD14B001DAA0022FFD14A00323DA022FFD14B001FB01),
    .INIT_70(256'h022FFD14B00323DA022FFD14A001FB01022FFD2F2191DAC0022FFD062B0323DA),
    .INIT_71(256'h022FFD14B001DA20022FFD14A00323DA022FFD14B001FB02022FFD14A001DA00),
    .INIT_72(256'h022FFD14B001FB02022FFD14A001DA80022FFD14B00323DA022FFD14A001FB02),
    .INIT_73(256'h022FFD14A00323DA022FFD14B001FB02022FFD14A001DAA0022FFD0BA27323DA),
    .INIT_74(256'h022FFD0B2181DA00022FFD14B00323DA022FFD14A001FB02022FFD14B001DAC0),
    .INIT_75(256'h022FFD0B82C1FB03022FFD001501DAE0022FFD2FB18323DA022FFD06B201FB03),
    .INIT_76(256'h022FFD20A5120896022FFD20A33206DC022FFD20A27223EC022FFD0B92D323DA),
    .INIT_77(256'h022FFD14B00208B7022FFD14A0E208D4022FFD0BA25001B0022FFD01B00000A0),
    .INIT_78(256'h022FFD14A00206B6022FFD14B0000CF0022FFD14A0000BC0022FFD0BA26208E4),
    .INIT_79(256'h022FFD0B21B206B6022FFD14B0000CD0022FFD14A00206B6022FFD14B0000CE0),
    .INIT_7A(256'h022FFD14B00223EC022FFD14A00208A5022FFD2F21B206B6022FFD062B000CB0),
    .INIT_7B(256'h022FFD14B0020718022FFD14A0022008022FFD14B002077B022FFD14A00206DC),
    .INIT_7C(256'h022FFD14B00208A5022FFD14A0020137022FFD14B0020896022FFD14A00206DC),
    .INIT_7D(256'h022FFD14A0001002022FFD14B002B80F022FFD14A002B40F022FFD0BA272B20F),
    .INIT_7E(256'h022FFD0B21A206DC022FFD14B0022008022FFD14A002077B022FFD14B002074D),
    .INIT_7F(256'h022FFD0B82E2B20F02BFF300140208A502BFF02FB1A20137022FFD06B2020896),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(72),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(72)) 
    firmware1
       (.ADDRARDADDR({address[8:0],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\CORCombinational.dly_address_b ,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA(casa2),
        .CASDINB(casb2),
        .CASDINPA(caspa2),
        .CASDINPB(caspb2),
        .CASDOMUXA(bram2_en),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b1),
        .CASDOMUXEN_B(1'b1),
        .CASDOUTA(casa1),
        .CASDOUTB(casb1),
        .CASDOUTPA(caspa1),
        .CASDOUTPB(caspb1),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(casdbiterr1),
        .CASOUTSBITERR(cassbiterr1),
        .CLKARDCLK(icap_clk),
        .CLKBWRCLK(icap_clk),
        .DBITERR(NLW_firmware1_DBITERR_UNCONNECTED),
        .DINADIN({p_1_in[11:0],firmware0_n_80,firmware0_n_81,firmware0_n_82,firmware0_n_83,firmware0_n_84,firmware0_n_85,firmware0_n_86,firmware0_n_87,firmware0_n_88,firmware0_n_89,firmware0_n_90,firmware0_n_91,firmware0_n_92,firmware0_n_93,firmware0_n_94,firmware0_n_95,firmware0_n_96,firmware0_n_97,firmware0_n_98,firmware0_n_99}),
        .DINBDIN({firmware0_n_100,firmware0_n_101,firmware0_n_102,firmware0_n_103,firmware0_n_104,firmware0_n_105,firmware0_n_106,firmware0_n_107,firmware0_n_108,firmware0_n_109,firmware0_n_110,firmware0_n_111,firmware0_n_112,firmware0_n_113,firmware0_n_114,firmware0_n_115,firmware0_n_116,firmware0_n_117,firmware0_n_118,firmware0_n_119,firmware0_n_120,firmware0_n_121,firmware0_n_122,firmware0_n_123,firmware0_n_124,firmware0_n_125,p_1_in[17:12]}),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(NLW_firmware1_DOUTADOUT_UNCONNECTED[31:0]),
        .DOUTBDOUT(NLW_firmware1_DOUTBDOUT_UNCONNECTED[31:0]),
        .DOUTPADOUTP(NLW_firmware1_DOUTPADOUTP_UNCONNECTED[3:0]),
        .DOUTPBDOUTP(NLW_firmware1_DOUTPBDOUTP_UNCONNECTED[3:0]),
        .ECCPARITY(NLW_firmware1_ECCPARITY_UNCONNECTED[7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(bram_enable),
        .ENBWREN(bram_wr_en1),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(NLW_firmware1_RDADDRECC_UNCONNECTED[8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(NLW_firmware1_SBITERR_UNCONNECTED),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("FIRST"),
    .CASCADE_ORDER_B("FIRST"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(0),
    .DOB_REG(0),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("TRUE"),
    .EN_ECC_WRITE("TRUE"),
    .INITP_00(256'h9A299AA8B90EB908B98B3F91A61E901191288A2399A21CA1BD04AF17913C3934),
    .INITP_01(256'h3E89898984931A1A869F9FA7A1AF17A6A10E228B83121794A6B0853F0E3702BA),
    .INITP_02(256'hA1A32A253E9F300D01141882A2A6BEBD3B0B2A0CAD87B600A79F1A2DB98D0A1D),
    .INITP_03(256'h38AABABA9F391E9634153F2419BE3B8D3D00131EA338BCA6AC2F8EA1120694AA),
    .INITP_04(256'h29903B92239E951D0684A32719BF1E1AB7A60C3F89172A3881B99BB93D3D80A4),
    .INITP_05(256'h9202B31C1F28B5992982B69732B41F2B0028A9B00A88B9B70F0D87BF1DA79BB8),
    .INITP_06(256'h253B008E2E39349A1B96143E23AD999BBD3B9A8424A21A0DA48D3F13872538BC),
    .INITP_07(256'h051A23BA079D110D269B03BA9496ABB0313730128B81B0A1A82D88B31D268C8A),
    .INITP_08(256'hB923863C119C09ABA3B9249391998FB6B8BF33163E99A4052C8101ACB48DBD30),
    .INITP_09(256'h9C279826801AB936823531BC0A3EA784910202BB24943039060A889925061399),
    .INITP_0A(256'hA9302E1C1E97BBAFA9AA3F0D90AFA8080DACBC9014AC32888EAF3E27B5A7083E),
    .INITP_0B(256'h8F3D382CBC8596333E8D90BD9AAAA993AB9F8A9FB402300E10AD2D902EBD012D),
    .INITP_0C(256'h9CAC950D0AA4311B832A22113818A3A102958A2EAAAF871822B009BAA6149A84),
    .INITP_0D(256'h1C8B8C943DB2869A15263C3285B18A1B040D030B1DBAB81DB63A9F9F8CB30605),
    .INITP_0E(256'h0939B9A1B89D222802AA2D368688A702253000281DA91182B99437BF9823941F),
    .INITP_0F(256'h172E0F28AC9DBEB01B34370DBC158F0B810D99B4BA083E34BC97B2391907169F),
    .INIT_00(256'h00000020A512F01E00000020A330100000000020A272B80F0000000B92F2B40F),
    .INIT_01(256'h00000014B002070200000014A0E207690000000BA252F03200000001B0001001),
    .INIT_02(256'h00000014A00206DC00000014B002247A00000014A00206DE0000000BA26206E2),
    .INIT_03(256'h0000000B21D2B80F00000014B002B40F00000014A002B20F00000014B0020896),
    .INIT_04(256'h00000014B00224BB00000014A00207690000002F21D2F032000000062B001002),
    .INIT_05(256'h00000014B00206B600000014A000BC0B00000014B00206DE00000014A0020716),
    .INIT_06(256'h00000014B00206B600000014A000BC0900000014B00206B600000014A000BC0A),
    .INIT_07(256'h00000014A00206B600000014B000BC0700000014A00206B60000000BA270BC08),
    .INIT_08(256'h0000000B21C3242800000014B000D00800000014A000900200000014B00206DC),
    .INIT_09(256'h00000001A0022008000000250002074D0000002FB1C0101000000006B2020896),
    .INIT_0A(256'h0000000D8FF2200800000014A002077B0000000D1FF2074D00000001B0001000),
    .INIT_0B(256'h0000000DAFF0BD0A00000014A000BC090000000D9FF0BB0800000014A000BA07),
    .INIT_0C(256'h00000000200030F000000025000000E00000002FB2501F0000000014B000BE0B),
    .INIT_0D(256'h00000014A043243900000014A000D0800000000D1FF3243900000001A001D0C0),
    .INIT_0E(256'h00000014A042F01400000014A040301F00000014A04000A000000014A0422475),
    .INIT_0F(256'h000000022A0000B000000014A04206A200000014A04206A200000014A04206A2),
    .INIT_10(256'h000000250002F0150000002F2263E475000000062B01D07B00000020A440307F),
    .INIT_11(256'h00000014B00000F000000014A062F01300000000B900300300000000A80000E0),
    .INIT_12(256'h00000014B002FD1100000014A062FC1000000014B00206A200000014A0603003),
    .INIT_13(256'h00000014B002F01300000014A063645F00000014B000DF0800000014A062FE12),
    .INIT_14(256'h00000001A001CAB0000000003800BB02000000002100BA130000002500003F01),
    .INIT_15(256'h0000000D2FF2FE0E000000033012FD0D000000032AA2FC0C00000001B0036475),
    .INIT_16(256'h0000000DAFF03F0300000014A0014F000000000D3FF14E0600000014A002FF0F),
    .INIT_17(256'h00000001A000BA130000000038022472000000002103247500000014B081DF01),
    .INIT_18(256'h00000014A0003E010000000D2FF36475000000033021CAB0000000032CC0BB02),
    .INIT_19(256'h00000014B080B0040000000DAFF2FE1200000014A002FD110000000D3FF2FC10),
    .INIT_1A(256'h000000032F01AD1000000001A0018C00000000003800B206000000002100B105),
    .INIT_1B(256'h0000000D3FF0B40F00000014A0020B5F0000000D2FF3E475000000033041AE20),
    .INIT_1C(256'h0000002FB272068700000014B08208FA0000000DAFF2F40F00000014A0003401),
    .INIT_1D(256'h0000000100C2074D000000008400100000000000950208A500000025000208FE),
    .INIT_1E(256'h000000131000D040000000148080900F0000001490E22008000000011002077B),
    .INIT_1F(256'h00000036A830D0800000001D1003618B00000036A790D020000000190013618B),
    .INIT_20(256'h0000000D50836182000000250000D080000000018FF0900E000000019FF36186),
    .INIT_21(256'h000000018FF3617C000000019FF0D020000000011023617F00000036A890D040),
    .INIT_22(256'h000000001500D0040000003EA950900E0000001D10336179000000250000D010),
    .INIT_23(256'h0000001410E2B04E000000118012F00B000000018FF0901B0000000004032494),
    .INIT_24(256'h000000011042247A0000000190F324A30000003EA8E1D0E000000014008030F0),
    .INIT_25(256'h0000001982809006000000008403647A000000009500D020000000250000900D),
    .INIT_26(256'h000000019FF3647A000000011021D0530000003EA9E324A30000001B9041D049),
    .INIT_27(256'h0000000381F20702000000001802078400000025000206DC000000018FF20720),
    .INIT_28(256'h000000149002070C000000141062247A00000014900206DE00000014106206E2),
    .INIT_29(256'h0000001D90F208A5000000011022012D000000149002089600000014106206DC),
    .INIT_2A(256'h0000000110401000000000390002D0030000001D80C2F03200000036AAB01000),
    .INIT_2B(256'h0000000B20C2089600000020B4622008000000370012077B000000250002074D),
    .INIT_2C(256'h00000014206207410000000BA0F010600000000B40E208A50000000B30D2012D),
    .INIT_2D(256'h000000142080100000000014A002D003000000144002F0320000001430001000),
    .INIT_2E(256'h0000001450E01D000000000340322008000000005402077B0000000327F2074D),
    .INIT_2F(256'h000000007A02FE11000000036032FD10000000006A001F000000001450E01E00),
    .INIT_30(256'h00000001D0020B5F000000037032FD1E0000001470E01D010000001470E2FF12),
    .INIT_31(256'h00000032AEA0B00F0000001D602324CD000000008201D0FF00000001E000B00F),
    .INIT_32(256'h00000001A002091100000001900208FA00000032B112F00F0000001D60303001),
    .INIT_33(256'h00000032AD7324D60000001CE400D00400000036AD00900E0000001CD30221AD),
    .INIT_34(256'h00000013A00030F0000000139002B04E000000108F02F00B00000009F080901B),
    .INIT_35(256'h00000001D000B10500000022ACC0B00400000013E00324E800000011D011D0E0),
    .INIT_36(256'h00000032AE10BF120000001CD500BE110000000BF310BD100000000BE300B206),
    .INIT_37(256'h00000011D011EF2000000013A001EE10000000129F01CD00000000108E003F01),
    .INIT_38(256'h00000003A0113F000000002F91113E000000002F81011D0100000022ADA324E8),
    .INIT_39(256'h0000002FA12224C100000004A002FF12000000140062FE110000000B0022FD10),
    .INIT_3A(256'h0000000BE31010000000000BD30208A5000000250002012D0000003700020896),
    .INIT_3B(256'h00000001F002077B00000001A002074D00000001900010000000000B2372D103),
    .INIT_3C(256'h000000129E03654B000000108D01D00100000032AF70B01E0000001CF2022008),
    .INIT_3D(256'h00000001F0020A7500000022AF00B51700000011F010B41600000013A0001200),
    .INIT_3E(256'h000000108200B41800000032B00042100000001CF502F9170000000B23C2F816),
    .INIT_3F(256'h00000022AF92F91900000011F012F81800000013A0020A75000000139000B519),
    .INIT_40(256'h0000001180220A7500000032B080B51B0000001CF300B41A00000001F0004210),
    .INIT_41(256'h00000022B010B41C00000011F0104210000000138002F91B000000139002F81A),
    .INIT_42(256'h0000000B0022F91D00000003A012F81C0000002F91120A750000002F8100B51D),
    .INIT_43(256'h00000037000012020000002FA123251C00000004A000D2020000001400604210),
    .INIT_44(256'h0000000B237208110000000BE31208040000000BD3020819000000250002F21E),
    .INIT_45(256'h00000001F001D00200000001A00324AF000000019001D001000000018000B032),
    .INIT_46(256'h000000129E02258C000000108D00502000000032B1F2073B0000001CF20324CD),
    .INIT_47(256'h0000000BF390B01600000022B1820C1500000011F012F21E00000013A0001204),
    .INIT_48(256'h00000001F001D0FF00000032B2C2F1150000001DF002F01400000003FF00B117),
    .INIT_49(256'h000000108200B11900000032B2C0B0180000001DF02346870000000B23C1F1FF),
    .INIT_4A(256'h00000022B251F1FF00000011F011D0FF00000013A002F115000000139002F014),
    .INIT_4B(256'h00000032B352F0140000001CF500B11B0000000B2380B01A00000001F0034687),
    .INIT_4C(256'h00000011F013468700000013A001F1FF000000139001D0FF000000108202F115),
    .INIT_4D(256'h00000032B3D2F1150000001CF302F01400000001F000B11D00000022B2E0B01C),
    .INIT_4E(256'h00000011F010B0320000001380034687000000139001F1FF000000118011D0FF),
    .INIT_4F(256'h00000003A01208190000002F911208FE0000002F8103653F00000022B361D000),
    .INIT_50(256'h0000002FA120B03200000004A002081100000014006208400000000B00220804),
    .INIT_51(256'h00000009508324CD00000020B581D00200000025000324AF000000370001D001),
    .INIT_52(256'h000000095081D0080000002F6052258C0000002F504030DF000000096082073B),
    .INIT_53(256'h00000009508207000000002F6312071E0000002F530207000000000960836558),
    .INIT_54(256'h000000095081D0010000002F6380B0320000002F537207E900000009608206DC),
    .INIT_55(256'h000000250002258C0000002F606050200000002F53C2073B00000009608324AF),
    .INIT_56(256'h0000002D5092072400000001100206FC0000000160736565000000015F01D010),
    .INIT_57(256'h000000370010B03200000025000207E90000002D10B206DC0000002D60A2072A),
    .INIT_58(256'h0000000BA12050200000000B9112073B0000000B810324AF00000020B461D001),
    .INIT_59(256'h00000001200206FC0000002FA36365720000002F9351D0200000002F8342258C),
    .INIT_5A(256'h00000018830207E90000000B431206DC0000000B3302072A0000000BD3720724),
    .INIT_5B(256'h000000112012073B0000003AB76324AF0000001BA001D0010000001A9400B032),
    .INIT_5C(256'h0000001C2D03657F0000002FA361D0400000002F9352258C0000002F834030DF),
    .INIT_5D(256'h0000000B935206DC0000000B8342072A00000022B6B2072400000032BA8206FC),
    .INIT_5E(256'h00000001300324AF000000012001D0010000002F20F0B0320000000BA36207E9),
    .INIT_5F(256'h000000188401D08000000032C0E2258C0000001D401030DF000000094082073B),
    .INIT_60(256'h00000011201207140000003AB89207180000001BA002071E0000001B90036017),
    .INIT_61(256'h0000002FA361D0010000002F9350B0320000002F834207E900000013300206DC),
    .INIT_62(256'h0000000BA362258C0000000B935030DF0000000B8342073B00000022B7C324AF),
    .INIT_63(256'h0000000B40C220080000002F80C2074D0000002F20D010080000002F30E20741),
    .INIT_64(256'h00000014408090020000001450836604000000144061D0040000000B50D0B01E),
    .INIT_65(256'h00000014608206760000000B60E206500000000B50D325EF0000002F40C0D004),
    .INIT_66(256'h0000000B70F1FF320000000B60E1DEDB0000002F50D0BF05000000145080BE04),
    .INIT_67(256'h0000000377F011BB0000001470001ED00000001460801F0900000014608325A2),
    .INIT_68(256'h0000001400601E400000000B00201F0A00000001700225A60000002F70E0120B),
    .INIT_69(256'h0000002500009D0700000037000206280000002F70F0120C000000047000112B),
    .INIT_6A(256'h00000032BDF1CE100000001D4002DD08000000034F02DE090000000B4392DF0A),
    .INIT_6B(256'h0000001B900225B300000018840365B0000000012001CF200000000B43C365B0),
    .INIT_6C(256'h0000002F8340B01600000011201225A60000003ABB913F000000001BA0011E01),
    .INIT_6D(256'h00000032BDF1D0FF0000001D2022F1150000002FA362F0140000002F9350B117),
    .INIT_6E(256'h0000000BA36012000000000B935206300000000B834325BF00000022BAE1F1FF),
    .INIT_6F(256'h000000188400B018000000194022F2200000000B43C142000000002F20F0D0FF),
    .INIT_70(256'h0000000B8341D0FF0000003EC0E2F1150000001BA002F0140000001B9000B119),
    .INIT_71(256'h00000000380012000000000B20F206300000000BA36325CB0000000B9351F1FF),
    .INIT_72(256'h000000143060B01A000000148082F2210000001490E14200000000033010D0FF),
    .INIT_73(256'h000000148061D0FF0000002F30C2F115000000143082F014000000148080B11B),
    .INIT_74(256'h00000014908012000000002F80D2063000000014808325D7000000149081F1FF),
    .INIT_75(256'h0000002F20E0B01C0000001420E2F2220000001420614200000000142000D0FF),
    .INIT_76(256'h000000043002F115000000140062F0140000000B00201200000000013010B11D),
    .INIT_77(256'h0000000B4382063000000025000325E4000000370001F1FF0000002F30F1D0FF),
    .INIT_78(256'h0000001BA002F2230000001B90014200000000188400D0FF0000000120001200),
    .INIT_79(256'h0000002F9350B0200000002F8342081100000011201208590000003ABEA2080C),
    .INIT_7A(256'h0000000B935040100000000B8340B12200000022BE1040100000002FA360B121),
    .INIT_7B(256'h000000194022073B0000000B438325F20000002F20F040100000000BA360B123),
    .INIT_7C(256'h0000003EC0E030BF0000001BA002073B0000001B900225F40000001884005040),
    .INIT_7D(256'h0000000B20F0B01F0000000BA362F03B0000000B9350B00E0000000B83420741),
    .INIT_7E(256'h0000002F30C2B20F00000014308208A500000014808366000000000B30019001),
    .INIT_7F(256'h0000002F80D226250000001480801002000000149082B80F000000148062B40F),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(72),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(72)) 
    firmware2
       (.ADDRARDADDR({address[8:0],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\CORCombinational.dly_address_b ,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(casa2),
        .CASDOUTB(casb2),
        .CASDOUTPA(caspa2),
        .CASDOUTPB(caspb2),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(NLW_firmware2_CASOUTDBITERR_UNCONNECTED),
        .CASOUTSBITERR(NLW_firmware2_CASOUTSBITERR_UNCONNECTED),
        .CLKARDCLK(icap_clk),
        .CLKBWRCLK(icap_clk),
        .DBITERR(NLW_firmware2_DBITERR_UNCONNECTED),
        .DINADIN({p_1_in[11:0],firmware0_n_80,firmware0_n_81,firmware0_n_82,firmware0_n_83,firmware0_n_84,firmware0_n_85,firmware0_n_86,firmware0_n_87,firmware0_n_88,firmware0_n_89,firmware0_n_90,firmware0_n_91,firmware0_n_92,firmware0_n_93,firmware0_n_94,firmware0_n_95,firmware0_n_96,firmware0_n_97,firmware0_n_98,firmware0_n_99}),
        .DINBDIN({firmware0_n_100,firmware0_n_101,firmware0_n_102,firmware0_n_103,firmware0_n_104,firmware0_n_105,firmware0_n_106,firmware0_n_107,firmware0_n_108,firmware0_n_109,firmware0_n_110,firmware0_n_111,firmware0_n_112,firmware0_n_113,firmware0_n_114,firmware0_n_115,firmware0_n_116,firmware0_n_117,firmware0_n_118,firmware0_n_119,firmware0_n_120,firmware0_n_121,firmware0_n_122,firmware0_n_123,firmware0_n_124,firmware0_n_125,p_1_in[17:12]}),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(NLW_firmware2_DOUTADOUT_UNCONNECTED[31:0]),
        .DOUTBDOUT(NLW_firmware2_DOUTBDOUT_UNCONNECTED[31:0]),
        .DOUTPADOUTP(NLW_firmware2_DOUTPADOUTP_UNCONNECTED[3:0]),
        .DOUTPBDOUTP(NLW_firmware2_DOUTPBDOUTP_UNCONNECTED[3:0]),
        .ECCPARITY(NLW_firmware2_ECCPARITY_UNCONNECTED[7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(bram_enable),
        .ENBWREN(bram_wr_en2),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(NLW_firmware2_RDADDRECC_UNCONNECTED[8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(NLW_firmware2_SBITERR_UNCONNECTED),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}));
  FDRE #(
    .INIT(1'b0)) 
    \instr_sel_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[9]),
        .Q(instr_sel[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \instr_sel_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[10]),
        .Q(instr_sel[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \instr_sel_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(address[11]),
        .Q(instr_sel[2]),
        .R(SR));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(bram_enable),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    sync_h
       (.C(icap_clk),
        .CE(1'b1),
        .D(D0),
        .Q(q_sync_h),
        .S(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    sync_h_i_1
       (.I0(bram_enable),
        .O(D0));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    sync_i
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_h),
        .Q(SR),
        .S(1'b0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_j
       (.C(icap_clk),
        .CE(1'b1),
        .D(sleep),
        .Q(q_sync_j),
        .R(SR));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    sync_k
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_j),
        .Q(q_sync_k),
        .S(SR));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    sync_l
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_k),
        .Q(sleep),
        .S(SR));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_picocpu" *) 
module semicap_sem_ultra_v3_1_11_picocpu
   (\OUTRegistered.instruction_reg[2] ,
    bram_wr_en0,
    address,
    bram_wr_en1,
    bram_wr_en2,
    \ports_loop[0].port_id_flop_0 ,
    D,
    out_port_reg,
    sta_ptr1__0,
    E,
    sta_ptr12_out,
    inc1__5,
    wr_b_dat__0,
    timer_snap0,
    const_strobe_flop_0,
    bgo_strobe0,
    firmware0,
    monitor_txwrite,
    fetch_txwrite,
    const_strobe_flop_1,
    const_strobe_flop_2,
    monitor_rxread,
    fetch_rxread,
    \OUTRegistered.instruction_reg[0] ,
    \sta_ptr_reg[3] ,
    casdomux2,
    bram2_en,
    \ports_loop[2].out_port_flop_0 ,
    \ports_loop[0].out_port_flop_0 ,
    \ports_loop[1].out_port_flop_0 ,
    sync_g,
    sync_g_0,
    sync_g_1,
    \ports_loop[7].out_port_flop_0 ,
    rdbk_sbe_reg,
    rdbk_sbe_reg_0,
    rom_cr_ne_err,
    cgo_flag_reg,
    eof_flag,
    eos_flag,
    bram_enable,
    rom_error,
    \sta_ptr_reg[8] ,
    Q,
    \sta_ptr_reg[9] ,
    \sta_ptr_reg[10] ,
    \sta_ptr_reg[10]_0 ,
    \sta_ptr_reg[5] ,
    \sta_ptr_reg[4] ,
    \sta_ptr_reg[3]_0 ,
    mem_read_byte,
    \ports_loop[7].in_port_flop_i_3_0 ,
    \ports_loop[6].in_port_flop_i_3_0 ,
    \ports_loop[5].in_port_flop_i_3_0 ,
    \ports_loop[4].in_port_flop_i_3_0 ,
    \ports_loop[3].in_port_flop_0 ,
    \ports_loop[3].in_port_flop_i_3_0 ,
    \ports_loop[3].in_port_flop_i_3_1 ,
    \ports_loop[2].in_port_flop_i_3_0 ,
    \ports_loop[2].in_port_flop_i_3_1 ,
    \ports_loop[1].in_port_flop_i_3_0 ,
    \ports_loop[1].in_port_flop_i_3_1 ,
    \ports_loop[0].in_port_flop_i_3_0 ,
    \ports_loop[0].in_port_flop_i_3_1 ,
    \ports_loop[7].in_port_flop_i_4_0 ,
    monitor_rxdata,
    fetch_rxdata,
    \ports_loop[7].in_port_flop_i_2_0 ,
    sync_out,
    fetch_tbladdr,
    monitor_txfull,
    \ports_loop[7].in_port_flop_i_6_0 ,
    monitor_rxempty,
    p_7_in,
    aux_cr_ne_err,
    fetch_txfull,
    aux_cr_es_err,
    fetch_rxempty,
    rdbk_crc,
    aux_uc_err,
    cgo_flag_reg_0,
    fecc_endofframe,
    fecc_endofscan,
    aux_cr_ne_err_reg,
    aux_cr_es_err_reg,
    aux_uc_err_reg,
    fecc_crcerror,
    fecc_eccerrornotsingle,
    fecc_eccerrorsingle,
    SR,
    flag_enable_flop_0,
    icap_clk,
    sleep);
  output [2:0]\OUTRegistered.instruction_reg[2] ;
  output bram_wr_en0;
  output [11:0]address;
  output bram_wr_en1;
  output bram_wr_en2;
  output [1:0]\ports_loop[0].port_id_flop_0 ;
  output [8:0]D;
  output [7:0]out_port_reg;
  output sta_ptr1__0;
  output [1:0]E;
  output sta_ptr12_out;
  output inc1__5;
  output wr_b_dat__0;
  output timer_snap0;
  output [0:0]const_strobe_flop_0;
  output bgo_strobe0;
  output firmware0;
  output monitor_txwrite;
  output fetch_txwrite;
  output [0:0]const_strobe_flop_1;
  output [0:0]const_strobe_flop_2;
  output monitor_rxread;
  output fetch_rxread;
  output \OUTRegistered.instruction_reg[0] ;
  output \sta_ptr_reg[3] ;
  output casdomux2;
  output bram2_en;
  output \ports_loop[2].out_port_flop_0 ;
  output \ports_loop[0].out_port_flop_0 ;
  output \ports_loop[1].out_port_flop_0 ;
  output sync_g;
  output sync_g_0;
  output sync_g_1;
  output \ports_loop[7].out_port_flop_0 ;
  output rdbk_sbe_reg;
  output rdbk_sbe_reg_0;
  input rom_cr_ne_err;
  input cgo_flag_reg;
  input eof_flag;
  input eos_flag;
  input bram_enable;
  input rom_error;
  input \sta_ptr_reg[8] ;
  input [10:0]Q;
  input \sta_ptr_reg[9] ;
  input \sta_ptr_reg[10] ;
  input \sta_ptr_reg[10]_0 ;
  input \sta_ptr_reg[5] ;
  input \sta_ptr_reg[4] ;
  input \sta_ptr_reg[3]_0 ;
  input [7:0]mem_read_byte;
  input \ports_loop[7].in_port_flop_i_3_0 ;
  input \ports_loop[6].in_port_flop_i_3_0 ;
  input \ports_loop[5].in_port_flop_i_3_0 ;
  input \ports_loop[4].in_port_flop_i_3_0 ;
  input \ports_loop[3].in_port_flop_0 ;
  input \ports_loop[3].in_port_flop_i_3_0 ;
  input \ports_loop[3].in_port_flop_i_3_1 ;
  input \ports_loop[2].in_port_flop_i_3_0 ;
  input \ports_loop[2].in_port_flop_i_3_1 ;
  input \ports_loop[1].in_port_flop_i_3_0 ;
  input \ports_loop[1].in_port_flop_i_3_1 ;
  input \ports_loop[0].in_port_flop_i_3_0 ;
  input \ports_loop[0].in_port_flop_i_3_1 ;
  input [39:0]\ports_loop[7].in_port_flop_i_4_0 ;
  input [7:0]monitor_rxdata;
  input [7:0]fetch_rxdata;
  input [7:0]\ports_loop[7].in_port_flop_i_2_0 ;
  input sync_out;
  input [31:0]fetch_tbladdr;
  input monitor_txfull;
  input [3:0]\ports_loop[7].in_port_flop_i_6_0 ;
  input monitor_rxempty;
  input [1:0]p_7_in;
  input aux_cr_ne_err;
  input fetch_txfull;
  input aux_cr_es_err;
  input fetch_rxempty;
  input rdbk_crc;
  input aux_uc_err;
  input [0:0]cgo_flag_reg_0;
  input fecc_endofframe;
  input fecc_endofscan;
  input aux_cr_ne_err_reg;
  input aux_cr_es_err_reg;
  input aux_uc_err_reg;
  input fecc_crcerror;
  input fecc_eccerrornotsingle;
  input fecc_eccerrorsingle;
  input [0:0]SR;
  input [17:0]flag_enable_flop_0;
  input icap_clk;
  input sleep;

  wire [8:0]D;
  wire [1:0]E;
  wire \OUTRegistered.instruction_reg[0] ;
  wire [2:0]\OUTRegistered.instruction_reg[2] ;
  wire [10:0]Q;
  wire [0:0]SR;
  wire [11:0]address;
  wire [1:0]alu_mux_sel;
  wire [1:0]alu_mux_sel_value;
  wire [7:0]alu_result;
  wire arith_carry;
  wire arith_carry_in;
  wire [7:0]arith_logical_result;
  wire [2:0]arith_logical_sel;
  wire [7:0]arith_logical_value;
  wire aux_cr_es_err;
  wire aux_cr_es_err_reg;
  wire aux_cr_ne_err;
  wire aux_cr_ne_err_reg;
  wire aux_uc_err;
  wire aux_uc_err_reg;
  wire bank;
  wire bank_value;
  wire bgo_strobe0;
  wire bram2_en;
  wire bram_enable;
  wire bram_wr_en0;
  wire bram_wr_en1;
  wire bram_wr_en2;
  wire [7:0]carry_arith_logical;
  wire carry_flag;
  wire carry_flag_value;
  wire carry_in_zero;
  wire carry_lower_parity;
  wire carry_lower_zero;
  wire carry_middle_zero;
  wire [10:0]carry_pc;
  wire casdomux2;
  wire cgo_flag_reg;
  wire [0:0]cgo_flag_reg_0;
  wire [0:0]const_strobe_flop_0;
  wire [0:0]const_strobe_flop_1;
  wire [0:0]const_strobe_flop_2;
  wire const_strobe_value;
  wire cs;
  wire \data_path_loop[6].output_data.sy_kk_mux_lut_n_0 ;
  wire \data_path_loop[6].output_data.sy_kk_mux_lut_n_1 ;
  wire drive_carry_in_zero;
  wire eof_flag;
  wire eos_flag;
  wire fecc_crcerror;
  wire fecc_eccerrornotsingle;
  wire fecc_eccerrorsingle;
  wire fecc_endofframe;
  wire fecc_endofscan;
  wire [4:0]feed_pointer_value;
  wire [7:0]fetch_rxdata;
  wire fetch_rxempty;
  wire fetch_rxread;
  wire fetch_rxread_INST_0_i_1_n_0;
  wire [31:0]fetch_tbladdr;
  wire fetch_txfull;
  wire fetch_txwrite;
  wire firmware0;
  wire flag_enable;
  wire [17:0]flag_enable_flop_0;
  wire flag_enable_type;
  wire flag_enable_value;
  wire [7:0]half_arith_logical;
  wire [11:0]half_pc;
  wire [4:0]half_pointer_value;
  wire icap_clk;
  wire [7:0]in_port;
  wire [2:2]in_port_reg;
  wire inc1__5;
  wire internal_reset;
  wire internal_reset_value;
  wire loadstar_type;
  wire [7:0]logical_carry_mask;
  wire lower_parity;
  wire lower_parity_sel;
  wire lower_zero;
  wire lower_zero_sel;
  wire [7:0]mem_read_byte;
  wire middle_zero;
  wire middle_zero_sel;
  wire [7:0]monitor_rxdata;
  wire monitor_rxempty;
  wire monitor_rxread;
  wire monitor_rxread_INST_0_i_1_n_0;
  wire monitor_txfull;
  wire monitor_txwrite;
  wire move_type;
  wire [7:0]out_port;
  wire [7:0]out_port_reg;
  wire p_10_in;
  wire p_25_in;
  wire [1:0]p_7_in;
  wire parity;
  wire [2:0]pc_mode;
  wire pc_move_is_valid;
  wire [11:0]pc_value;
  wire [11:0]pc_vector;
  wire pop_stack;
  wire [5:3]port_id;
  wire [3:0]port_id_reg;
  wire \ports_loop[0].in_port_flop_i_11_n_0 ;
  wire \ports_loop[0].in_port_flop_i_15_n_0 ;
  wire \ports_loop[0].in_port_flop_i_1_n_0 ;
  wire \ports_loop[0].in_port_flop_i_2_n_0 ;
  wire \ports_loop[0].in_port_flop_i_3_0 ;
  wire \ports_loop[0].in_port_flop_i_3_1 ;
  wire \ports_loop[0].in_port_flop_i_3_n_0 ;
  wire \ports_loop[0].in_port_flop_i_4_n_0 ;
  wire \ports_loop[0].in_port_flop_i_5_n_0 ;
  wire \ports_loop[0].in_port_flop_i_6_n_0 ;
  wire \ports_loop[0].in_port_flop_i_7_n_0 ;
  wire \ports_loop[0].in_port_flop_i_8_n_0 ;
  wire \ports_loop[0].in_port_flop_i_9_n_0 ;
  wire \ports_loop[0].out_port_flop_0 ;
  wire [1:0]\ports_loop[0].port_id_flop_0 ;
  wire \ports_loop[1].in_port_flop_i_11_n_0 ;
  wire \ports_loop[1].in_port_flop_i_14_n_0 ;
  wire \ports_loop[1].in_port_flop_i_1_n_0 ;
  wire \ports_loop[1].in_port_flop_i_2_n_0 ;
  wire \ports_loop[1].in_port_flop_i_3_0 ;
  wire \ports_loop[1].in_port_flop_i_3_1 ;
  wire \ports_loop[1].in_port_flop_i_3_n_0 ;
  wire \ports_loop[1].in_port_flop_i_4_n_0 ;
  wire \ports_loop[1].in_port_flop_i_5_n_0 ;
  wire \ports_loop[1].in_port_flop_i_6_n_0 ;
  wire \ports_loop[1].in_port_flop_i_7_n_0 ;
  wire \ports_loop[1].in_port_flop_i_8_n_0 ;
  wire \ports_loop[1].in_port_flop_i_9_n_0 ;
  wire \ports_loop[1].out_port_flop_0 ;
  wire \ports_loop[2].in_port_flop_i_11_n_0 ;
  wire \ports_loop[2].in_port_flop_i_14_n_0 ;
  wire \ports_loop[2].in_port_flop_i_2_n_0 ;
  wire \ports_loop[2].in_port_flop_i_3_0 ;
  wire \ports_loop[2].in_port_flop_i_3_1 ;
  wire \ports_loop[2].in_port_flop_i_3_n_0 ;
  wire \ports_loop[2].in_port_flop_i_4_n_0 ;
  wire \ports_loop[2].in_port_flop_i_5_n_0 ;
  wire \ports_loop[2].in_port_flop_i_6_n_0 ;
  wire \ports_loop[2].in_port_flop_i_7_n_0 ;
  wire \ports_loop[2].in_port_flop_i_8_n_0 ;
  wire \ports_loop[2].in_port_flop_i_9_n_0 ;
  wire \ports_loop[2].out_port_flop_0 ;
  wire \ports_loop[3].in_port_flop_0 ;
  wire \ports_loop[3].in_port_flop_i_1_n_0 ;
  wire \ports_loop[3].in_port_flop_i_2_n_0 ;
  wire \ports_loop[3].in_port_flop_i_3_0 ;
  wire \ports_loop[3].in_port_flop_i_3_1 ;
  wire \ports_loop[3].in_port_flop_i_3_n_0 ;
  wire \ports_loop[3].in_port_flop_i_4_n_0 ;
  wire \ports_loop[3].in_port_flop_i_5_n_0 ;
  wire \ports_loop[3].in_port_flop_i_6_n_0 ;
  wire \ports_loop[3].in_port_flop_i_8_n_0 ;
  wire \ports_loop[3].in_port_flop_i_9_n_0 ;
  wire \ports_loop[4].in_port_flop_i_10_n_0 ;
  wire \ports_loop[4].in_port_flop_i_11_n_0 ;
  wire \ports_loop[4].in_port_flop_i_14_n_0 ;
  wire \ports_loop[4].in_port_flop_i_1_n_0 ;
  wire \ports_loop[4].in_port_flop_i_2_n_0 ;
  wire \ports_loop[4].in_port_flop_i_3_0 ;
  wire \ports_loop[4].in_port_flop_i_3_n_0 ;
  wire \ports_loop[4].in_port_flop_i_4_n_0 ;
  wire \ports_loop[4].in_port_flop_i_5_n_0 ;
  wire \ports_loop[4].in_port_flop_i_6_n_0 ;
  wire \ports_loop[4].in_port_flop_i_7_n_0 ;
  wire \ports_loop[4].in_port_flop_i_8_n_0 ;
  wire \ports_loop[4].in_port_flop_i_9_n_0 ;
  wire \ports_loop[5].in_port_flop_i_10_n_0 ;
  wire \ports_loop[5].in_port_flop_i_11_n_0 ;
  wire \ports_loop[5].in_port_flop_i_14_n_0 ;
  wire \ports_loop[5].in_port_flop_i_1_n_0 ;
  wire \ports_loop[5].in_port_flop_i_2_n_0 ;
  wire \ports_loop[5].in_port_flop_i_3_0 ;
  wire \ports_loop[5].in_port_flop_i_3_n_0 ;
  wire \ports_loop[5].in_port_flop_i_4_n_0 ;
  wire \ports_loop[5].in_port_flop_i_5_n_0 ;
  wire \ports_loop[5].in_port_flop_i_6_n_0 ;
  wire \ports_loop[5].in_port_flop_i_7_n_0 ;
  wire \ports_loop[5].in_port_flop_i_8_n_0 ;
  wire \ports_loop[5].in_port_flop_i_9_n_0 ;
  wire \ports_loop[6].in_port_flop_i_10_n_0 ;
  wire \ports_loop[6].in_port_flop_i_11_n_0 ;
  wire \ports_loop[6].in_port_flop_i_12_n_0 ;
  wire \ports_loop[6].in_port_flop_i_15_n_0 ;
  wire \ports_loop[6].in_port_flop_i_1_n_0 ;
  wire \ports_loop[6].in_port_flop_i_2_n_0 ;
  wire \ports_loop[6].in_port_flop_i_3_0 ;
  wire \ports_loop[6].in_port_flop_i_3_n_0 ;
  wire \ports_loop[6].in_port_flop_i_4_n_0 ;
  wire \ports_loop[6].in_port_flop_i_5_n_0 ;
  wire \ports_loop[6].in_port_flop_i_6_n_0 ;
  wire \ports_loop[6].in_port_flop_i_7_n_0 ;
  wire \ports_loop[6].in_port_flop_i_8_n_0 ;
  wire \ports_loop[6].in_port_flop_i_9_n_0 ;
  wire \ports_loop[7].in_port_flop_i_10_n_0 ;
  wire \ports_loop[7].in_port_flop_i_11_n_0 ;
  wire \ports_loop[7].in_port_flop_i_14_n_0 ;
  wire \ports_loop[7].in_port_flop_i_1_n_0 ;
  wire [7:0]\ports_loop[7].in_port_flop_i_2_0 ;
  wire \ports_loop[7].in_port_flop_i_2_n_0 ;
  wire \ports_loop[7].in_port_flop_i_3_0 ;
  wire \ports_loop[7].in_port_flop_i_3_n_0 ;
  wire [39:0]\ports_loop[7].in_port_flop_i_4_0 ;
  wire \ports_loop[7].in_port_flop_i_4_n_0 ;
  wire \ports_loop[7].in_port_flop_i_5_n_0 ;
  wire [3:0]\ports_loop[7].in_port_flop_i_6_0 ;
  wire \ports_loop[7].in_port_flop_i_6_n_0 ;
  wire \ports_loop[7].in_port_flop_i_7_n_0 ;
  wire \ports_loop[7].in_port_flop_i_8_n_0 ;
  wire \ports_loop[7].in_port_flop_i_9_n_0 ;
  wire \ports_loop[7].out_port_flop_0 ;
  wire push_stack;
  wire rd_b_dat;
  wire rdbk_crc;
  wire rdbk_sbe_reg;
  wire rdbk_sbe_reg_0;
  wire read_strobe_value;
  wire regbank_type;
  wire register_enable;
  wire register_enable_type;
  wire register_enable_value;
  wire [11:0]register_vector;
  wire [11:0]return_vector;
  wire rom_cr_ne_err;
  wire rom_error;
  wire rs;
  wire run;
  wire run_value;
  wire shadow_bank;
  wire shadow_carry_flag;
  wire shadow_zero_flag;
  wire shadow_zero_value;
  wire shift_carry;
  wire shift_carry_value;
  wire shift_in_bit;
  wire [7:0]shift_rotate_result;
  wire [7:0]shift_rotate_value;
  wire sleep;
  wire special_bit;
  wire [7:0]spm_data;
  wire spm_enable;
  wire spm_enable_value;
  wire [7:0]spm_ram_data;
  wire sta_ptr12_out;
  wire sta_ptr1__0;
  wire \sta_ptr_reg[10] ;
  wire \sta_ptr_reg[10]_0 ;
  wire \sta_ptr_reg[3] ;
  wire \sta_ptr_reg[3]_0 ;
  wire \sta_ptr_reg[4] ;
  wire \sta_ptr_reg[5] ;
  wire \sta_ptr_reg[8] ;
  wire \sta_ptr_reg[9] ;
  wire stack_bank;
  wire stack_bit;
  wire stack_carry_flag;
  wire [11:0]stack_memory;
  wire [4:0]stack_pointer;
  wire [3:0]stack_pointer_carry;
  wire [4:0]stack_pointer_value;
  wire stack_zero_flag;
  wire status_reg1__0;
  wire strobe_type;
  wire [4:4]sx_addr;
  wire sx_addr4_value;
  wire sync_g;
  wire sync_g_0;
  wire sync_g_1;
  wire sync_out;
  wire sync_sleep;
  wire [2:1]t_state;
  wire [2:1]t_state_value;
  wire timer_snap0;
  wire upper_parity;
  wire upper_reg_banks_n_2;
  wire upper_reg_banks_n_3;
  wire upper_reg_banks_n_6;
  wire upper_reg_banks_n_7;
  wire upper_zero_sel;
  wire use_zero_flag;
  wire use_zero_flag_value;
  wire wr_b_dat__0;
  wire write_strobe_value;
  wire ws;
  wire zero_flag;
  wire zero_flag_value;
  wire [7:3]\NLW_address_loop[8].upper_pc.mid_pc.pc_muxcy_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:3]\NLW_address_loop[8].upper_pc.mid_pc.pc_muxcy_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:4]\NLW_address_loop[8].upper_pc.mid_pc.pc_muxcy_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:4]\NLW_address_loop[8].upper_pc.mid_pc.pc_muxcy_CARRY4_CARRY8_S_UNCONNECTED ;
  wire [7:4]NLW_init_zero_muxcy_CARRY4_CARRY8_CO_UNCONNECTED;
  wire [7:4]NLW_init_zero_muxcy_CARRY4_CARRY8_DI_UNCONNECTED;
  wire [7:0]NLW_init_zero_muxcy_CARRY4_CARRY8_O_UNCONNECTED;
  wire [7:4]NLW_init_zero_muxcy_CARRY4_CARRY8_S_UNCONNECTED;
  wire NLW_loadstar_type_lut_O6_UNCONNECTED;
  wire NLW_move_type_lut_O5_UNCONNECTED;
  wire [7:1]NLW_parity_muxcy_CARRY4_CARRY8_CO_UNCONNECTED;
  wire [7:1]NLW_parity_muxcy_CARRY4_CARRY8_DI_UNCONNECTED;
  wire [7:0]NLW_parity_muxcy_CARRY4_CARRY8_O_UNCONNECTED;
  wire [7:2]NLW_parity_muxcy_CARRY4_CARRY8_S_UNCONNECTED;
  wire [7:4]\NLW_stack_loop[0].lsb_stack.stack_muxcy_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:4]\NLW_stack_loop[0].lsb_stack.stack_muxcy_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:5]\NLW_stack_loop[0].lsb_stack.stack_muxcy_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:5]\NLW_stack_loop[0].lsb_stack.stack_muxcy_CARRY4_CARRY8_S_UNCONNECTED ;
  wire NLW_sx_addr4_value_lut_O5_UNCONNECTED;

  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \RWCYEnabled.arith_carry_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(carry_arith_logical[7]),
        .Q(arith_carry),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hAAAAFDAAFFFFFFFF)) 
    \RWPMEnabled.pc_mode0_reworked_lut 
       (.I0(flag_enable_flop_0[12]),
        .I1(flag_enable_flop_0[13]),
        .I2(flag_enable_flop_0[14]),
        .I3(flag_enable_flop_0[15]),
        .I4(flag_enable_flop_0[16]),
        .I5(pc_move_is_valid),
        .O(pc_mode[0]));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h7777027700000000)) 
    \RWPMEnabled.pc_mode1_reworked_lut 
       (.I0(flag_enable_flop_0[12]),
        .I1(flag_enable_flop_0[13]),
        .I2(flag_enable_flop_0[14]),
        .I3(flag_enable_flop_0[15]),
        .I4(flag_enable_flop_0[16]),
        .I5(pc_move_is_valid),
        .O(pc_mode[1]));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFFFFFFF00040000)) 
    \RWPMEnabled.pc_mode2_reworked_lut 
       (.I0(flag_enable_flop_0[12]),
        .I1(flag_enable_flop_0[14]),
        .I2(flag_enable_flop_0[15]),
        .I3(flag_enable_flop_0[16]),
        .I4(flag_enable_flop_0[17]),
        .I5(1'b0),
        .O(pc_mode[2]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFFFF55500000EEE)) 
    \RWSREnabled.reset_reworked_lut 
       (.I0(run),
        .I1(internal_reset),
        .I2(1'b0),
        .I3(t_state[2]),
        .I4(SR),
        .I5(1'b1),
        .O5(run_value),
        .O6(internal_reset_value));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA000033CC0F00)) 
    \address_loop[0].lsb_pc.pc_lut 
       (.I0(register_vector[0]),
        .I1(pc_vector[0]),
        .I2(address[0]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[0]));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \address_loop[0].lsb_pc.pc_muxcy_CARRY4_CARRY8 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO(carry_pc[7:0]),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,pc_mode[0]}),
        .O(pc_value[7:0]),
        .S(half_pc[7:0]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \address_loop[0].output_data.pc_vector_mux_lut 
       (.I0(flag_enable_flop_0[0]),
        .I1(return_vector[0]),
        .I2(flag_enable_flop_0[1]),
        .I3(return_vector[1]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(pc_vector[0]),
        .O6(pc_vector[1]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[0].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[0]),
        .Q(address[0]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[0].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[0]),
        .Q(return_vector[0]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \address_loop[10].output_data.pc_vector_mux_lut 
       (.I0(flag_enable_flop_0[10]),
        .I1(return_vector[10]),
        .I2(flag_enable_flop_0[11]),
        .I3(return_vector[11]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(pc_vector[10]),
        .O6(pc_vector[11]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[10].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[10]),
        .Q(address[10]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[10].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[10]),
        .Q(return_vector[10]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[10].upper_pc.pc_lut 
       (.I0(register_vector[10]),
        .I1(pc_vector[10]),
        .I2(address[10]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[10]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[11].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[11]),
        .Q(address[11]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[11].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[11]),
        .Q(return_vector[11]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[11].upper_pc.pc_lut 
       (.I0(register_vector[11]),
        .I1(pc_vector[11]),
        .I2(address[11]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[11]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[1].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[1]),
        .Q(address[1]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[1].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[1]),
        .Q(return_vector[1]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[1].upper_pc.pc_lut 
       (.I0(register_vector[1]),
        .I1(pc_vector[1]),
        .I2(address[1]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[1]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \address_loop[2].output_data.pc_vector_mux_lut 
       (.I0(flag_enable_flop_0[2]),
        .I1(return_vector[2]),
        .I2(flag_enable_flop_0[3]),
        .I3(return_vector[3]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(pc_vector[2]),
        .O6(pc_vector[3]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[2].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[2]),
        .Q(address[2]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[2].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[2]),
        .Q(return_vector[2]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[2].upper_pc.pc_lut 
       (.I0(register_vector[2]),
        .I1(pc_vector[2]),
        .I2(address[2]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[2]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[3].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[3]),
        .Q(address[3]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[3].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[3]),
        .Q(return_vector[3]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[3].upper_pc.pc_lut 
       (.I0(register_vector[3]),
        .I1(pc_vector[3]),
        .I2(address[3]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[3]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \address_loop[4].output_data.pc_vector_mux_lut 
       (.I0(flag_enable_flop_0[4]),
        .I1(return_vector[4]),
        .I2(flag_enable_flop_0[5]),
        .I3(return_vector[5]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(pc_vector[4]),
        .O6(pc_vector[5]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[4].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[4]),
        .Q(address[4]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[4].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[4]),
        .Q(return_vector[4]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[4].upper_pc.pc_lut 
       (.I0(register_vector[4]),
        .I1(pc_vector[4]),
        .I2(address[4]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[4]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[5].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[5]),
        .Q(address[5]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[5].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[5]),
        .Q(return_vector[5]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[5].upper_pc.pc_lut 
       (.I0(register_vector[5]),
        .I1(pc_vector[5]),
        .I2(address[5]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[5]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \address_loop[6].output_data.pc_vector_mux_lut 
       (.I0(flag_enable_flop_0[6]),
        .I1(return_vector[6]),
        .I2(flag_enable_flop_0[7]),
        .I3(return_vector[7]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(pc_vector[6]),
        .O6(pc_vector[7]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[6].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[6]),
        .Q(address[6]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[6].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[6]),
        .Q(return_vector[6]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[6].upper_pc.pc_lut 
       (.I0(register_vector[6]),
        .I1(pc_vector[6]),
        .I2(address[6]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[6]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[7].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[7]),
        .Q(address[7]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[7].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[7]),
        .Q(return_vector[7]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[7].upper_pc.pc_lut 
       (.I0(register_vector[7]),
        .I1(pc_vector[7]),
        .I2(address[7]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[7]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \address_loop[8].output_data.pc_vector_mux_lut 
       (.I0(flag_enable_flop_0[8]),
        .I1(return_vector[8]),
        .I2(flag_enable_flop_0[9]),
        .I3(return_vector[9]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(pc_vector[8]),
        .O6(pc_vector[9]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[8].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[8]),
        .Q(address[8]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[8].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[8]),
        .Q(return_vector[8]),
        .R(1'b0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \address_loop[8].upper_pc.mid_pc.pc_muxcy_CARRY4_CARRY8 
       (.CI(carry_pc[7]),
        .CI_TOP(1'b0),
        .CO({\NLW_address_loop[8].upper_pc.mid_pc.pc_muxcy_CARRY4_CARRY8_CO_UNCONNECTED [7:3],carry_pc[10:8]}),
        .DI({\NLW_address_loop[8].upper_pc.mid_pc.pc_muxcy_CARRY4_CARRY8_DI_UNCONNECTED [7:3],1'b0,1'b0,1'b0}),
        .O({\NLW_address_loop[8].upper_pc.mid_pc.pc_muxcy_CARRY4_CARRY8_O_UNCONNECTED [7:4],pc_value[11:8]}),
        .S({\NLW_address_loop[8].upper_pc.mid_pc.pc_muxcy_CARRY4_CARRY8_S_UNCONNECTED [7:4],half_pc[11:8]}));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[8].upper_pc.pc_lut 
       (.I0(register_vector[8]),
        .I1(pc_vector[8]),
        .I2(address[8]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[8]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \address_loop[9].pc_flop 
       (.C(icap_clk),
        .CE(t_state[1]),
        .D(pc_value[9]),
        .Q(address[9]),
        .R(internal_reset));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \address_loop[9].return_vector_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_memory[9]),
        .Q(return_vector[9]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00AA0000CCCCF000)) 
    \address_loop[9].upper_pc.pc_lut 
       (.I0(register_vector[9]),
        .I1(pc_vector[9]),
        .I2(address[9]),
        .I3(pc_mode[0]),
        .I4(pc_mode[1]),
        .I5(pc_mode[2]),
        .O(half_pc[9]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h03CA000004200000)) 
    alu_decode0_lut
       (.I0(flag_enable_flop_0[13]),
        .I1(flag_enable_flop_0[14]),
        .I2(flag_enable_flop_0[15]),
        .I3(flag_enable_flop_0[16]),
        .I4(1'b1),
        .I5(1'b1),
        .O5(alu_mux_sel_value[0]),
        .O6(arith_logical_sel[0]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h7708000000000F00)) 
    alu_decode1_lut
       (.I0(carry_flag),
        .I1(flag_enable_flop_0[13]),
        .I2(flag_enable_flop_0[14]),
        .I3(flag_enable_flop_0[15]),
        .I4(flag_enable_flop_0[16]),
        .I5(1'b1),
        .O5(alu_mux_sel_value[1]),
        .O6(arith_carry_in));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hD000000002000000)) 
    alu_decode2_lut
       (.I0(flag_enable_flop_0[14]),
        .I1(flag_enable_flop_0[15]),
        .I2(flag_enable_flop_0[16]),
        .I3(1'b1),
        .I4(1'b1),
        .I5(1'b1),
        .O5(arith_logical_sel[1]),
        .O6(arith_logical_sel[2]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    alu_mux_sel0_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(alu_mux_sel_value[0]),
        .Q(alu_mux_sel[0]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    alu_mux_sel1_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(alu_mux_sel_value[1]),
        .Q(alu_mux_sel[1]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hBFAA)) 
    aux_cr_es_err_i_1
       (.I0(aux_cr_es_err_reg),
        .I1(out_port_reg[6]),
        .I2(p_25_in),
        .I3(aux_cr_es_err),
        .O(sync_g_0));
  LUT4 #(
    .INIT(16'hBFAA)) 
    aux_cr_ne_err_i_1
       (.I0(aux_cr_ne_err_reg),
        .I1(out_port_reg[5]),
        .I2(p_25_in),
        .I3(aux_cr_ne_err),
        .O(sync_g));
  LUT4 #(
    .INIT(16'hBFAA)) 
    aux_uc_err_i_1
       (.I0(aux_uc_err_reg),
        .I1(out_port_reg[7]),
        .I2(p_25_in),
        .I3(aux_uc_err),
        .O(sync_g_1));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    bank_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(bank_value),
        .Q(bank),
        .R(internal_reset));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hACACFF00FF00FF00)) 
    bank_lut
       (.I0(flag_enable_flop_0[0]),
        .I1(shadow_bank),
        .I2(flag_enable_flop_0[16]),
        .I3(bank),
        .I4(regbank_type),
        .I5(t_state[1]),
        .O(bank_value));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    bgo_strobe_i_1
       (.I0(port_id_reg[3]),
        .I1(port_id_reg[2]),
        .I2(port_id_reg[1]),
        .I3(port_id_reg[0]),
        .I4(status_reg1__0),
        .I5(out_port_reg[3]),
        .O(bgo_strobe0));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    carry_flag_flop
       (.C(icap_clk),
        .CE(flag_enable),
        .D(carry_flag_value),
        .Q(carry_flag),
        .R(internal_reset));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h3333AACCF0AA0000)) 
    carry_flag_lut
       (.I0(shift_carry),
        .I1(arith_carry),
        .I2(parity),
        .I3(flag_enable_flop_0[14]),
        .I4(flag_enable_flop_0[15]),
        .I5(flag_enable_flop_0[16]),
        .O5(drive_carry_in_zero),
        .O6(carry_flag_value));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'hBFAA)) 
    cgo_flag_i_1
       (.I0(cgo_flag_reg_0),
        .I1(out_port_reg[2]),
        .I2(p_25_in),
        .I3(cgo_flag_reg),
        .O(\ports_loop[2].out_port_flop_0 ));
  LUT6 #(
    .INIT(64'h0E00000000000000)) 
    cgo_flag_i_2
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[0]),
        .I3(port_id_reg[1]),
        .I4(port_id_reg[2]),
        .I5(port_id_reg[3]),
        .O(p_25_in));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    const_strobe_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(const_strobe_value),
        .Q(cs),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[0].alu_mux_lut 
       (.I0(arith_logical_result[0]),
        .I1(shift_rotate_result[0]),
        .I2(in_port[0]),
        .I3(spm_data[0]),
        .I4(alu_mux_sel[0]),
        .I5(alu_mux_sel[1]),
        .O(alu_result[0]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[0].arith_logical_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(arith_logical_value[0]),
        .Q(arith_logical_result[0]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h69696E8ACCCC0000)) 
    \data_path_loop[0].arith_logical_lut 
       (.I0(\OUTRegistered.instruction_reg[2] [0]),
        .I1(register_vector[8]),
        .I2(arith_logical_sel[0]),
        .I3(arith_logical_sel[1]),
        .I4(arith_logical_sel[2]),
        .I5(1'b1),
        .O5(logical_carry_mask[0]),
        .O6(half_arith_logical[0]));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \data_path_loop[0].lsb_arith_logical.arith_logical_muxcy_CARRY4_CARRY8 
       (.CI(arith_carry_in),
        .CI_TOP(1'b0),
        .CO(carry_arith_logical),
        .DI(logical_carry_mask),
        .O(arith_logical_value),
        .S(half_arith_logical));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFBC8F8CB3B08380)) 
    \data_path_loop[0].lsb_shift_rotate.shift_bit_lut 
       (.I0(flag_enable_flop_0[0]),
        .I1(flag_enable_flop_0[1]),
        .I2(flag_enable_flop_0[2]),
        .I3(carry_flag),
        .I4(register_vector[8]),
        .I5(upper_reg_banks_n_6),
        .O(shift_in_bit));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[0].lsb_shift_rotate.shift_rotate_lut 
       (.I0(shift_in_bit),
        .I1(register_vector[9]),
        .I2(register_vector[8]),
        .I3(register_vector[10]),
        .I4(flag_enable_flop_0[3]),
        .I5(1'b1),
        .O5(shift_rotate_value[0]),
        .O6(shift_rotate_value[1]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[0].output_data.sy_kk_mux_lut 
       (.I0(register_vector[0]),
        .I1(flag_enable_flop_0[0]),
        .I2(register_vector[1]),
        .I3(flag_enable_flop_0[1]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(\OUTRegistered.instruction_reg[2] [0]),
        .O6(\OUTRegistered.instruction_reg[2] [1]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[0].second_operand.out_port_lut 
       (.I0(register_vector[8]),
        .I1(flag_enable_flop_0[4]),
        .I2(register_vector[9]),
        .I3(flag_enable_flop_0[5]),
        .I4(flag_enable_flop_0[13]),
        .I5(1'b1),
        .O5(out_port[0]),
        .O6(out_port[1]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[0].shift_rotate_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(shift_rotate_value[0]),
        .Q(shift_rotate_result[0]),
        .R(flag_enable_flop_0[7]));
  (* box_type = "PRIMITIVE" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \data_path_loop[0].small_spm_ram.spm_ram 
       (.ADDRA({port_id,\OUTRegistered.instruction_reg[2] }),
        .ADDRB({port_id,\OUTRegistered.instruction_reg[2] }),
        .ADDRC({port_id,\OUTRegistered.instruction_reg[2] }),
        .ADDRD({port_id,\OUTRegistered.instruction_reg[2] }),
        .DIA(register_vector[8]),
        .DIB(register_vector[9]),
        .DIC(register_vector[10]),
        .DID(register_vector[11]),
        .DOA(spm_ram_data[0]),
        .DOB(spm_ram_data[1]),
        .DOC(spm_ram_data[2]),
        .DOD(spm_ram_data[3]),
        .WCLK(icap_clk),
        .WE(spm_enable));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[0].spm_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(spm_ram_data[0]),
        .Q(spm_data[0]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[1].alu_mux_lut 
       (.I0(arith_logical_result[1]),
        .I1(shift_rotate_result[1]),
        .I2(in_port[1]),
        .I3(spm_data[1]),
        .I4(alu_mux_sel[0]),
        .I5(alu_mux_sel[1]),
        .O(alu_result[1]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[1].arith_logical_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(arith_logical_value[1]),
        .Q(arith_logical_result[1]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h69696E8ACCCC0000)) 
    \data_path_loop[1].arith_logical_lut 
       (.I0(\OUTRegistered.instruction_reg[2] [1]),
        .I1(register_vector[9]),
        .I2(arith_logical_sel[0]),
        .I3(arith_logical_sel[1]),
        .I4(arith_logical_sel[2]),
        .I5(1'b1),
        .O5(logical_carry_mask[1]),
        .O6(half_arith_logical[1]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[1].shift_rotate_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(shift_rotate_value[1]),
        .Q(shift_rotate_result[1]),
        .R(flag_enable_flop_0[7]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[1].spm_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(spm_ram_data[1]),
        .Q(spm_data[1]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[2].alu_mux_lut 
       (.I0(arith_logical_result[2]),
        .I1(shift_rotate_result[2]),
        .I2(in_port[2]),
        .I3(spm_data[2]),
        .I4(alu_mux_sel[0]),
        .I5(alu_mux_sel[1]),
        .O(alu_result[2]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[2].arith_logical_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(arith_logical_value[2]),
        .Q(arith_logical_result[2]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h69696E8ACCCC0000)) 
    \data_path_loop[2].arith_logical_lut 
       (.I0(\OUTRegistered.instruction_reg[2] [2]),
        .I1(register_vector[10]),
        .I2(arith_logical_sel[0]),
        .I3(arith_logical_sel[1]),
        .I4(arith_logical_sel[2]),
        .I5(1'b1),
        .O5(logical_carry_mask[2]),
        .O6(half_arith_logical[2]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[2].mid_shift_rotate.shift_rotate_lut 
       (.I0(register_vector[9]),
        .I1(register_vector[11]),
        .I2(register_vector[10]),
        .I3(upper_reg_banks_n_3),
        .I4(flag_enable_flop_0[3]),
        .I5(1'b1),
        .O5(shift_rotate_value[2]),
        .O6(shift_rotate_value[3]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[2].output_data.sy_kk_mux_lut 
       (.I0(register_vector[2]),
        .I1(flag_enable_flop_0[2]),
        .I2(register_vector[3]),
        .I3(flag_enable_flop_0[3]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(\OUTRegistered.instruction_reg[2] [2]),
        .O6(port_id[3]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[2].second_operand.out_port_lut 
       (.I0(register_vector[10]),
        .I1(flag_enable_flop_0[6]),
        .I2(register_vector[11]),
        .I3(flag_enable_flop_0[7]),
        .I4(flag_enable_flop_0[13]),
        .I5(1'b1),
        .O5(out_port[2]),
        .O6(out_port[3]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[2].shift_rotate_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(shift_rotate_value[2]),
        .Q(shift_rotate_result[2]),
        .R(flag_enable_flop_0[7]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[2].spm_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(spm_ram_data[2]),
        .Q(spm_data[2]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[3].alu_mux_lut 
       (.I0(arith_logical_result[3]),
        .I1(shift_rotate_result[3]),
        .I2(in_port[3]),
        .I3(spm_data[3]),
        .I4(alu_mux_sel[0]),
        .I5(alu_mux_sel[1]),
        .O(alu_result[3]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[3].arith_logical_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(arith_logical_value[3]),
        .Q(arith_logical_result[3]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h69696E8ACCCC0000)) 
    \data_path_loop[3].arith_logical_lut 
       (.I0(port_id[3]),
        .I1(register_vector[11]),
        .I2(arith_logical_sel[0]),
        .I3(arith_logical_sel[1]),
        .I4(arith_logical_sel[2]),
        .I5(1'b1),
        .O5(logical_carry_mask[3]),
        .O6(half_arith_logical[3]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[3].shift_rotate_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(shift_rotate_value[3]),
        .Q(shift_rotate_result[3]),
        .R(flag_enable_flop_0[7]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[3].spm_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(spm_ram_data[3]),
        .Q(spm_data[3]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[4].alu_mux_lut 
       (.I0(arith_logical_result[4]),
        .I1(shift_rotate_result[4]),
        .I2(in_port[4]),
        .I3(spm_data[4]),
        .I4(alu_mux_sel[0]),
        .I5(alu_mux_sel[1]),
        .O(alu_result[4]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[4].arith_logical_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(arith_logical_value[4]),
        .Q(arith_logical_result[4]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h69696E8ACCCC0000)) 
    \data_path_loop[4].arith_logical_lut 
       (.I0(port_id[4]),
        .I1(upper_reg_banks_n_3),
        .I2(arith_logical_sel[0]),
        .I3(arith_logical_sel[1]),
        .I4(arith_logical_sel[2]),
        .I5(1'b1),
        .O5(logical_carry_mask[4]),
        .O6(half_arith_logical[4]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[4].mid_shift_rotate.shift_rotate_lut 
       (.I0(register_vector[11]),
        .I1(upper_reg_banks_n_2),
        .I2(upper_reg_banks_n_3),
        .I3(upper_reg_banks_n_7),
        .I4(flag_enable_flop_0[3]),
        .I5(1'b1),
        .O5(shift_rotate_value[4]),
        .O6(shift_rotate_value[5]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[4].output_data.sy_kk_mux_lut 
       (.I0(register_vector[4]),
        .I1(flag_enable_flop_0[4]),
        .I2(register_vector[5]),
        .I3(flag_enable_flop_0[5]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(port_id[4]),
        .O6(port_id[5]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[4].second_operand.out_port_lut 
       (.I0(upper_reg_banks_n_3),
        .I1(flag_enable_flop_0[8]),
        .I2(upper_reg_banks_n_2),
        .I3(flag_enable_flop_0[9]),
        .I4(flag_enable_flop_0[13]),
        .I5(1'b1),
        .O5(out_port[4]),
        .O6(out_port[5]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[4].shift_rotate_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(shift_rotate_value[4]),
        .Q(shift_rotate_result[4]),
        .R(flag_enable_flop_0[7]));
  (* box_type = "PRIMITIVE" *) 
  RAM64M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \data_path_loop[4].small_spm_ram.spm_ram 
       (.ADDRA({port_id,\OUTRegistered.instruction_reg[2] }),
        .ADDRB({port_id,\OUTRegistered.instruction_reg[2] }),
        .ADDRC({port_id,\OUTRegistered.instruction_reg[2] }),
        .ADDRD({port_id,\OUTRegistered.instruction_reg[2] }),
        .DIA(upper_reg_banks_n_3),
        .DIB(upper_reg_banks_n_2),
        .DIC(upper_reg_banks_n_7),
        .DID(upper_reg_banks_n_6),
        .DOA(spm_ram_data[4]),
        .DOB(spm_ram_data[5]),
        .DOC(spm_ram_data[6]),
        .DOD(spm_ram_data[7]),
        .WCLK(icap_clk),
        .WE(spm_enable));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[4].spm_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(spm_ram_data[4]),
        .Q(spm_data[4]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[5].alu_mux_lut 
       (.I0(arith_logical_result[5]),
        .I1(shift_rotate_result[5]),
        .I2(in_port[5]),
        .I3(spm_data[5]),
        .I4(alu_mux_sel[0]),
        .I5(alu_mux_sel[1]),
        .O(alu_result[5]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[5].arith_logical_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(arith_logical_value[5]),
        .Q(arith_logical_result[5]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h69696E8ACCCC0000)) 
    \data_path_loop[5].arith_logical_lut 
       (.I0(port_id[5]),
        .I1(upper_reg_banks_n_2),
        .I2(arith_logical_sel[0]),
        .I3(arith_logical_sel[1]),
        .I4(arith_logical_sel[2]),
        .I5(1'b1),
        .O5(logical_carry_mask[5]),
        .O6(half_arith_logical[5]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[5].shift_rotate_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(shift_rotate_value[5]),
        .Q(shift_rotate_result[5]),
        .R(flag_enable_flop_0[7]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[5].spm_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(spm_ram_data[5]),
        .Q(spm_data[5]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[6].alu_mux_lut 
       (.I0(arith_logical_result[6]),
        .I1(shift_rotate_result[6]),
        .I2(in_port[6]),
        .I3(spm_data[6]),
        .I4(alu_mux_sel[0]),
        .I5(alu_mux_sel[1]),
        .O(alu_result[6]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[6].arith_logical_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(arith_logical_value[6]),
        .Q(arith_logical_result[6]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h69696E8ACCCC0000)) 
    \data_path_loop[6].arith_logical_lut 
       (.I0(\data_path_loop[6].output_data.sy_kk_mux_lut_n_0 ),
        .I1(upper_reg_banks_n_7),
        .I2(arith_logical_sel[0]),
        .I3(arith_logical_sel[1]),
        .I4(arith_logical_sel[2]),
        .I5(1'b1),
        .O5(logical_carry_mask[6]),
        .O6(half_arith_logical[6]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[6].msb_shift_rotate.shift_rotate_lut 
       (.I0(upper_reg_banks_n_2),
        .I1(upper_reg_banks_n_6),
        .I2(upper_reg_banks_n_7),
        .I3(shift_in_bit),
        .I4(flag_enable_flop_0[3]),
        .I5(1'b1),
        .O5(shift_rotate_value[6]),
        .O6(shift_rotate_value[7]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[6].output_data.sy_kk_mux_lut 
       (.I0(register_vector[6]),
        .I1(flag_enable_flop_0[6]),
        .I2(register_vector[7]),
        .I3(flag_enable_flop_0[7]),
        .I4(flag_enable_flop_0[12]),
        .I5(1'b1),
        .O5(\data_path_loop[6].output_data.sy_kk_mux_lut_n_0 ),
        .O6(\data_path_loop[6].output_data.sy_kk_mux_lut_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[6].second_operand.out_port_lut 
       (.I0(upper_reg_banks_n_7),
        .I1(flag_enable_flop_0[10]),
        .I2(upper_reg_banks_n_6),
        .I3(flag_enable_flop_0[11]),
        .I4(flag_enable_flop_0[13]),
        .I5(1'b1),
        .O5(out_port[6]),
        .O6(out_port[7]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[6].shift_rotate_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(shift_rotate_value[6]),
        .Q(shift_rotate_result[6]),
        .R(flag_enable_flop_0[7]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[6].spm_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(spm_ram_data[6]),
        .Q(spm_data[6]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \data_path_loop[7].alu_mux_lut 
       (.I0(arith_logical_result[7]),
        .I1(shift_rotate_result[7]),
        .I2(in_port[7]),
        .I3(spm_data[7]),
        .I4(alu_mux_sel[0]),
        .I5(alu_mux_sel[1]),
        .O(alu_result[7]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[7].arith_logical_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(arith_logical_value[7]),
        .Q(arith_logical_result[7]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h69696E8ACCCC0000)) 
    \data_path_loop[7].arith_logical_lut 
       (.I0(\data_path_loop[6].output_data.sy_kk_mux_lut_n_1 ),
        .I1(upper_reg_banks_n_6),
        .I2(arith_logical_sel[0]),
        .I3(arith_logical_sel[1]),
        .I4(arith_logical_sel[2]),
        .I5(1'b1),
        .O5(logical_carry_mask[7]),
        .O6(half_arith_logical[7]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[7].shift_rotate_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(shift_rotate_value[7]),
        .Q(shift_rotate_result[7]),
        .R(flag_enable_flop_0[7]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_path_loop[7].spm_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(spm_ram_data[7]),
        .Q(spm_data[7]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0400040004000000)) 
    \end_ptr[11]_i_1 
       (.I0(port_id_reg[0]),
        .I1(port_id_reg[3]),
        .I2(port_id_reg[2]),
        .I3(port_id_reg[1]),
        .I4(ws),
        .I5(cs),
        .O(\ports_loop[0].port_id_flop_0 [1]));
  LUT6 #(
    .INIT(64'h00E0000000000000)) 
    \end_ptr[7]_i_1 
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[1]),
        .I3(port_id_reg[2]),
        .I4(port_id_reg[3]),
        .I5(port_id_reg[0]),
        .O(\ports_loop[0].port_id_flop_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'hBFAA)) 
    eof_flag_i_1
       (.I0(fecc_endofframe),
        .I1(out_port_reg[0]),
        .I2(p_25_in),
        .I3(eof_flag),
        .O(\ports_loop[0].out_port_flop_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'hBFAA)) 
    eos_flag_i_1
       (.I0(fecc_endofscan),
        .I1(out_port_reg[1]),
        .I2(p_25_in),
        .I3(eos_flag),
        .O(\ports_loop[1].out_port_flop_0 ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    fetch_rxread_INST_0
       (.I0(rs),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(port_id[3]),
        .I3(fetch_rxread_INST_0_i_1_n_0),
        .I4(port_id[4]),
        .I5(port_id[5]),
        .O(fetch_rxread));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT2 #(
    .INIT(4'h7)) 
    fetch_rxread_INST_0_i_1
       (.I0(\OUTRegistered.instruction_reg[2] [1]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .O(fetch_rxread_INST_0_i_1_n_0));
  LUT6 #(
    .INIT(64'h00E0000000000000)) 
    fetch_txwrite_INST_0
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[2]),
        .I3(port_id_reg[3]),
        .I4(port_id_reg[1]),
        .I5(port_id_reg[0]),
        .O(fetch_txwrite));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'hB6)) 
    firmware0_i_1
       (.I0(address[9]),
        .I1(address[10]),
        .I2(address[11]),
        .O(casdomux2));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT5 #(
    .INIT(32'h08800008)) 
    firmware0_i_2
       (.I0(bram_enable),
        .I1(rom_error),
        .I2(address[9]),
        .I3(address[11]),
        .I4(address[10]),
        .O(bram_wr_en0));
  LUT3 #(
    .INIT(8'h24)) 
    firmware1_i_1
       (.I0(address[9]),
        .I1(address[10]),
        .I2(address[11]),
        .O(bram2_en));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT5 #(
    .INIT(32'h80000880)) 
    firmware1_i_2
       (.I0(bram_enable),
        .I1(rom_error),
        .I2(address[9]),
        .I3(address[11]),
        .I4(address[10]),
        .O(bram_wr_en1));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT5 #(
    .INIT(32'h00800800)) 
    firmware2_i_1
       (.I0(bram_enable),
        .I1(rom_error),
        .I2(address[9]),
        .I3(address[10]),
        .I4(address[11]),
        .O(bram_wr_en2));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    flag_enable_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(flag_enable_value),
        .Q(flag_enable),
        .R(1'b0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 init_zero_muxcy_CARRY4_CARRY8
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({NLW_init_zero_muxcy_CARRY4_CARRY8_CO_UNCONNECTED[7:4],zero_flag_value,carry_middle_zero,carry_lower_zero,carry_in_zero}),
        .DI({NLW_init_zero_muxcy_CARRY4_CARRY8_DI_UNCONNECTED[7:4],shadow_zero_flag,middle_zero,lower_zero,drive_carry_in_zero}),
        .O(NLW_init_zero_muxcy_CARRY4_CARRY8_O_UNCONNECTED[7:0]),
        .S({NLW_init_zero_muxcy_CARRY4_CARRY8_S_UNCONNECTED[7:4],upper_zero_sel,middle_zero_sel,lower_zero_sel,carry_flag_value}));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    internal_reset_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(internal_reset_value),
        .Q(internal_reset),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0010000000000800)) 
    loadstar_type_lut
       (.I0(flag_enable_flop_0[13]),
        .I1(flag_enable_flop_0[14]),
        .I2(flag_enable_flop_0[15]),
        .I3(flag_enable_flop_0[16]),
        .I4(flag_enable_flop_0[17]),
        .I5(1'b1),
        .O5(loadstar_type),
        .O6(NLW_loadstar_type_lut_O6_UNCONNECTED));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0000000087780000)) 
    lower_parity_lut
       (.I0(flag_enable_flop_0[13]),
        .I1(carry_flag),
        .I2(arith_logical_result[0]),
        .I3(arith_logical_result[1]),
        .I4(1'b1),
        .I5(1'b1),
        .O5(lower_parity),
        .O6(lower_parity_sel));
  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    lower_reg_banks
       (.ADDRA({bank,flag_enable_flop_0[7:4]}),
        .ADDRB({sx_addr,flag_enable_flop_0[11:8]}),
        .ADDRC({bank,flag_enable_flop_0[7:4]}),
        .ADDRD({sx_addr,flag_enable_flop_0[11:8]}),
        .DIA(alu_result[1:0]),
        .DIB(alu_result[1:0]),
        .DIC(alu_result[3:2]),
        .DID(alu_result[3:2]),
        .DOA(register_vector[1:0]),
        .DOB(register_vector[9:8]),
        .DOC(register_vector[3:2]),
        .DOD(register_vector[11:10]),
        .WCLK(icap_clk),
        .WE(register_enable));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0000000000000001)) 
    lower_zero_lut
       (.I0(alu_result[0]),
        .I1(alu_result[1]),
        .I2(alu_result[2]),
        .I3(alu_result[3]),
        .I4(alu_result[4]),
        .I5(1'b1),
        .O5(lower_zero),
        .O6(lower_zero_sel));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0000000D00000000)) 
    middle_zero_lut
       (.I0(use_zero_flag),
        .I1(zero_flag),
        .I2(alu_result[5]),
        .I3(alu_result[6]),
        .I4(alu_result[7]),
        .I5(1'b1),
        .O5(middle_zero),
        .O6(middle_zero_sel));
  LUT6 #(
    .INIT(64'h0000000002000000)) 
    monitor_rxread_INST_0
       (.I0(rs),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(port_id[3]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(\OUTRegistered.instruction_reg[2] [2]),
        .I5(monitor_rxread_INST_0_i_1_n_0),
        .O(monitor_rxread));
  LUT2 #(
    .INIT(4'hE)) 
    monitor_rxread_INST_0_i_1
       (.I0(port_id[4]),
        .I1(port_id[5]),
        .O(monitor_rxread_INST_0_i_1_n_0));
  LUT6 #(
    .INIT(64'h00000E0000000000)) 
    monitor_txwrite_INST_0
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[0]),
        .I3(port_id_reg[2]),
        .I4(port_id_reg[3]),
        .I5(port_id_reg[1]),
        .O(monitor_txwrite));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h7777027700000200)) 
    move_type_lut
       (.I0(flag_enable_flop_0[12]),
        .I1(flag_enable_flop_0[13]),
        .I2(flag_enable_flop_0[14]),
        .I3(flag_enable_flop_0[15]),
        .I4(flag_enable_flop_0[16]),
        .I5(1'b1),
        .O5(NLW_move_type_lut_O5_UNCONNECTED),
        .O6(move_type));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 parity_muxcy_CARRY4_CARRY8
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({NLW_parity_muxcy_CARRY4_CARRY8_CO_UNCONNECTED[7:1],carry_lower_parity}),
        .DI({NLW_parity_muxcy_CARRY4_CARRY8_DI_UNCONNECTED[7:1],lower_parity}),
        .O({NLW_parity_muxcy_CARRY4_CARRY8_O_UNCONNECTED[7:2],parity,NLW_parity_muxcy_CARRY4_CARRY8_O_UNCONNECTED[0]}),
        .S({NLW_parity_muxcy_CARRY4_CARRY8_S_UNCONNECTED[7:2],upper_parity,lower_parity_sel}));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h5A3CFFFF00000000)) 
    pc_move_is_valid_lut
       (.I0(carry_flag),
        .I1(zero_flag),
        .I2(flag_enable_flop_0[14]),
        .I3(flag_enable_flop_0[15]),
        .I4(flag_enable_flop_0[16]),
        .I5(flag_enable_flop_0[17]),
        .O(pc_move_is_valid));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[0].in_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\ports_loop[0].in_port_flop_i_1_n_0 ),
        .Q(in_port[0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \ports_loop[0].in_port_flop_i_1 
       (.I0(\ports_loop[0].in_port_flop_i_2_n_0 ),
        .I1(port_id[3]),
        .I2(\ports_loop[0].in_port_flop_i_3_n_0 ),
        .I3(port_id[4]),
        .I4(\ports_loop[0].in_port_flop_i_4_n_0 ),
        .I5(port_id[5]),
        .O(\ports_loop[0].in_port_flop_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \ports_loop[0].in_port_flop_i_11 
       (.I0(Q[0]),
        .I1(\OUTRegistered.instruction_reg[2] [1]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[0].in_port_flop_i_11_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \ports_loop[0].in_port_flop_i_13 
       (.I0(\OUTRegistered.instruction_reg[2] [0]),
        .I1(\OUTRegistered.instruction_reg[2] [1]),
        .O(\OUTRegistered.instruction_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ports_loop[0].in_port_flop_i_15 
       (.I0(eof_flag),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[0].in_port_flop_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h8000FFFF80000000)) 
    \ports_loop[0].in_port_flop_i_2 
       (.I0(\ports_loop[7].in_port_flop_i_4_0 [0]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(port_id[4]),
        .I5(\ports_loop[0].in_port_flop_i_5_n_0 ),
        .O(\ports_loop[0].in_port_flop_i_2_n_0 ));
  MUXF7 \ports_loop[0].in_port_flop_i_3 
       (.I0(\ports_loop[0].in_port_flop_i_6_n_0 ),
        .I1(\ports_loop[0].in_port_flop_i_7_n_0 ),
        .O(\ports_loop[0].in_port_flop_i_3_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  MUXF7 \ports_loop[0].in_port_flop_i_4 
       (.I0(\ports_loop[0].in_port_flop_i_8_n_0 ),
        .I1(\ports_loop[0].in_port_flop_i_9_n_0 ),
        .O(\ports_loop[0].in_port_flop_i_4_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  LUT6 #(
    .INIT(64'hCFAFFFFFCFA0FFF0)) 
    \ports_loop[0].in_port_flop_i_5 
       (.I0(monitor_rxdata[0]),
        .I1(fetch_rxdata[0]),
        .I2(\OUTRegistered.instruction_reg[2] [1]),
        .I3(\OUTRegistered.instruction_reg[2] [0]),
        .I4(\OUTRegistered.instruction_reg[2] [2]),
        .I5(\ports_loop[7].in_port_flop_i_2_0 [0]),
        .O(\ports_loop[0].in_port_flop_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[0].in_port_flop_i_6 
       (.I0(\ports_loop[0].in_port_flop_i_3_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[0].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[0]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[0].in_port_flop_i_3_1 ),
        .O(\ports_loop[0].in_port_flop_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[0].in_port_flop_i_7 
       (.I0(\ports_loop[0].in_port_flop_i_15_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[0].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[0]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[0].in_port_flop_i_3_1 ),
        .O(\ports_loop[0].in_port_flop_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[0].in_port_flop_i_8 
       (.I0(fetch_tbladdr[8]),
        .I1(fetch_tbladdr[0]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [16]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [8]),
        .O(\ports_loop[0].in_port_flop_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[0].in_port_flop_i_9 
       (.I0(fetch_tbladdr[24]),
        .I1(fetch_tbladdr[16]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [32]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [24]),
        .O(\ports_loop[0].in_port_flop_i_9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[0].out_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(out_port[0]),
        .Q(out_port_reg[0]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[0].port_id_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction_reg[2] [0]),
        .Q(port_id_reg[0]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[1].in_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\ports_loop[1].in_port_flop_i_1_n_0 ),
        .Q(in_port[1]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \ports_loop[1].in_port_flop_i_1 
       (.I0(\ports_loop[1].in_port_flop_i_2_n_0 ),
        .I1(port_id[3]),
        .I2(\ports_loop[1].in_port_flop_i_3_n_0 ),
        .I3(port_id[4]),
        .I4(\ports_loop[1].in_port_flop_i_4_n_0 ),
        .I5(port_id[5]),
        .O(\ports_loop[1].in_port_flop_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \ports_loop[1].in_port_flop_i_11 
       (.I0(Q[1]),
        .I1(\OUTRegistered.instruction_reg[2] [1]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[1].in_port_flop_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ports_loop[1].in_port_flop_i_14 
       (.I0(eos_flag),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[1].in_port_flop_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h8000FFFF80000000)) 
    \ports_loop[1].in_port_flop_i_2 
       (.I0(\ports_loop[7].in_port_flop_i_4_0 [1]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(port_id[4]),
        .I5(\ports_loop[1].in_port_flop_i_5_n_0 ),
        .O(\ports_loop[1].in_port_flop_i_2_n_0 ));
  MUXF7 \ports_loop[1].in_port_flop_i_3 
       (.I0(\ports_loop[1].in_port_flop_i_6_n_0 ),
        .I1(\ports_loop[1].in_port_flop_i_7_n_0 ),
        .O(\ports_loop[1].in_port_flop_i_3_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  MUXF7 \ports_loop[1].in_port_flop_i_4 
       (.I0(\ports_loop[1].in_port_flop_i_8_n_0 ),
        .I1(\ports_loop[1].in_port_flop_i_9_n_0 ),
        .O(\ports_loop[1].in_port_flop_i_4_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  LUT6 #(
    .INIT(64'hCFAFFFFFCFA0FFF0)) 
    \ports_loop[1].in_port_flop_i_5 
       (.I0(monitor_rxdata[1]),
        .I1(fetch_rxdata[1]),
        .I2(\OUTRegistered.instruction_reg[2] [1]),
        .I3(\OUTRegistered.instruction_reg[2] [0]),
        .I4(\OUTRegistered.instruction_reg[2] [2]),
        .I5(\ports_loop[7].in_port_flop_i_2_0 [1]),
        .O(\ports_loop[1].in_port_flop_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[1].in_port_flop_i_6 
       (.I0(\ports_loop[1].in_port_flop_i_3_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[1].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[1]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[1].in_port_flop_i_3_1 ),
        .O(\ports_loop[1].in_port_flop_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[1].in_port_flop_i_7 
       (.I0(\ports_loop[1].in_port_flop_i_14_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[1].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[1]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[1].in_port_flop_i_3_1 ),
        .O(\ports_loop[1].in_port_flop_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[1].in_port_flop_i_8 
       (.I0(fetch_tbladdr[9]),
        .I1(fetch_tbladdr[1]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [17]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [9]),
        .O(\ports_loop[1].in_port_flop_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[1].in_port_flop_i_9 
       (.I0(fetch_tbladdr[25]),
        .I1(fetch_tbladdr[17]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [33]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [25]),
        .O(\ports_loop[1].in_port_flop_i_9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[1].out_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(out_port[1]),
        .Q(out_port_reg[1]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[1].port_id_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction_reg[2] [1]),
        .Q(port_id_reg[1]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[2].in_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(in_port_reg),
        .Q(in_port[2]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFEFEFEAEAEAEFEAE)) 
    \ports_loop[2].in_port_flop_i_1 
       (.I0(port_id[5]),
        .I1(\ports_loop[2].in_port_flop_i_2_n_0 ),
        .I2(port_id[3]),
        .I3(\ports_loop[2].in_port_flop_i_3_n_0 ),
        .I4(port_id[4]),
        .I5(\ports_loop[2].in_port_flop_i_4_n_0 ),
        .O(in_port_reg));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \ports_loop[2].in_port_flop_i_11 
       (.I0(Q[2]),
        .I1(\OUTRegistered.instruction_reg[2] [1]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[2].in_port_flop_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ports_loop[2].in_port_flop_i_14 
       (.I0(cgo_flag_reg),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[2].in_port_flop_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h8000FFFF80000000)) 
    \ports_loop[2].in_port_flop_i_2 
       (.I0(\ports_loop[7].in_port_flop_i_4_0 [2]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(port_id[4]),
        .I5(\ports_loop[2].in_port_flop_i_5_n_0 ),
        .O(\ports_loop[2].in_port_flop_i_2_n_0 ));
  MUXF7 \ports_loop[2].in_port_flop_i_3 
       (.I0(\ports_loop[2].in_port_flop_i_6_n_0 ),
        .I1(\ports_loop[2].in_port_flop_i_7_n_0 ),
        .O(\ports_loop[2].in_port_flop_i_3_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  MUXF7 \ports_loop[2].in_port_flop_i_4 
       (.I0(\ports_loop[2].in_port_flop_i_8_n_0 ),
        .I1(\ports_loop[2].in_port_flop_i_9_n_0 ),
        .O(\ports_loop[2].in_port_flop_i_4_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  LUT6 #(
    .INIT(64'hC0C0AFA0F0F0FFF0)) 
    \ports_loop[2].in_port_flop_i_5 
       (.I0(monitor_rxdata[2]),
        .I1(fetch_rxdata[2]),
        .I2(\OUTRegistered.instruction_reg[2] [1]),
        .I3(\ports_loop[7].in_port_flop_i_2_0 [2]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\OUTRegistered.instruction_reg[2] [2]),
        .O(\ports_loop[2].in_port_flop_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[2].in_port_flop_i_6 
       (.I0(\ports_loop[2].in_port_flop_i_3_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[2].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[2]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[2].in_port_flop_i_3_1 ),
        .O(\ports_loop[2].in_port_flop_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[2].in_port_flop_i_7 
       (.I0(\ports_loop[2].in_port_flop_i_14_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[2].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[2]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[2].in_port_flop_i_3_1 ),
        .O(\ports_loop[2].in_port_flop_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[2].in_port_flop_i_8 
       (.I0(fetch_tbladdr[10]),
        .I1(fetch_tbladdr[2]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [18]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [10]),
        .O(\ports_loop[2].in_port_flop_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[2].in_port_flop_i_9 
       (.I0(fetch_tbladdr[26]),
        .I1(fetch_tbladdr[18]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [34]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [26]),
        .O(\ports_loop[2].in_port_flop_i_9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[2].out_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(out_port[2]),
        .Q(out_port_reg[2]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[2].port_id_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\OUTRegistered.instruction_reg[2] [2]),
        .Q(port_id_reg[2]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[3].in_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\ports_loop[3].in_port_flop_i_1_n_0 ),
        .Q(in_port[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \ports_loop[3].in_port_flop_i_1 
       (.I0(\ports_loop[3].in_port_flop_i_2_n_0 ),
        .I1(port_id[3]),
        .I2(\ports_loop[3].in_port_flop_i_3_n_0 ),
        .I3(port_id[4]),
        .I4(\ports_loop[3].in_port_flop_i_4_n_0 ),
        .I5(port_id[5]),
        .O(\ports_loop[3].in_port_flop_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \ports_loop[3].in_port_flop_i_11 
       (.I0(Q[3]),
        .I1(\OUTRegistered.instruction_reg[2] [1]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .O(\sta_ptr_reg[3] ));
  LUT6 #(
    .INIT(64'h8000FFFF80000000)) 
    \ports_loop[3].in_port_flop_i_2 
       (.I0(\ports_loop[7].in_port_flop_i_4_0 [3]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(port_id[4]),
        .I5(\ports_loop[3].in_port_flop_i_5_n_0 ),
        .O(\ports_loop[3].in_port_flop_i_2_n_0 ));
  MUXF7 \ports_loop[3].in_port_flop_i_3 
       (.I0(\ports_loop[3].in_port_flop_i_6_n_0 ),
        .I1(\ports_loop[3].in_port_flop_0 ),
        .O(\ports_loop[3].in_port_flop_i_3_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  MUXF7 \ports_loop[3].in_port_flop_i_4 
       (.I0(\ports_loop[3].in_port_flop_i_8_n_0 ),
        .I1(\ports_loop[3].in_port_flop_i_9_n_0 ),
        .O(\ports_loop[3].in_port_flop_i_4_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  LUT6 #(
    .INIT(64'hC0C0AFA0F0F0FFF0)) 
    \ports_loop[3].in_port_flop_i_5 
       (.I0(monitor_rxdata[3]),
        .I1(fetch_rxdata[3]),
        .I2(\OUTRegistered.instruction_reg[2] [1]),
        .I3(\ports_loop[7].in_port_flop_i_2_0 [3]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\OUTRegistered.instruction_reg[2] [2]),
        .O(\ports_loop[3].in_port_flop_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[3].in_port_flop_i_6 
       (.I0(\ports_loop[3].in_port_flop_i_3_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\sta_ptr_reg[3] ),
        .I3(mem_read_byte[3]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[3].in_port_flop_i_3_1 ),
        .O(\ports_loop[3].in_port_flop_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[3].in_port_flop_i_8 
       (.I0(fetch_tbladdr[11]),
        .I1(fetch_tbladdr[3]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [19]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [11]),
        .O(\ports_loop[3].in_port_flop_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[3].in_port_flop_i_9 
       (.I0(fetch_tbladdr[27]),
        .I1(fetch_tbladdr[19]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [35]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [27]),
        .O(\ports_loop[3].in_port_flop_i_9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[3].out_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(out_port[3]),
        .Q(out_port_reg[3]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[3].port_id_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(port_id[3]),
        .Q(port_id_reg[3]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[4].in_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\ports_loop[4].in_port_flop_i_1_n_0 ),
        .Q(in_port[4]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \ports_loop[4].in_port_flop_i_1 
       (.I0(\ports_loop[4].in_port_flop_i_2_n_0 ),
        .I1(port_id[3]),
        .I2(\ports_loop[4].in_port_flop_i_3_n_0 ),
        .I3(port_id[4]),
        .I4(\ports_loop[4].in_port_flop_i_4_n_0 ),
        .I5(port_id[5]),
        .O(\ports_loop[4].in_port_flop_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[4].in_port_flop_i_10 
       (.I0(monitor_txfull),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\ports_loop[7].in_port_flop_i_6_0 [0]),
        .O(\ports_loop[4].in_port_flop_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \ports_loop[4].in_port_flop_i_11 
       (.I0(Q[4]),
        .I1(\OUTRegistered.instruction_reg[2] [1]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[4].in_port_flop_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ports_loop[4].in_port_flop_i_14 
       (.I0(rom_cr_ne_err),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[4].in_port_flop_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h8000FFFF80000000)) 
    \ports_loop[4].in_port_flop_i_2 
       (.I0(\ports_loop[7].in_port_flop_i_4_0 [4]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(port_id[4]),
        .I5(\ports_loop[4].in_port_flop_i_5_n_0 ),
        .O(\ports_loop[4].in_port_flop_i_2_n_0 ));
  MUXF7 \ports_loop[4].in_port_flop_i_3 
       (.I0(\ports_loop[4].in_port_flop_i_6_n_0 ),
        .I1(\ports_loop[4].in_port_flop_i_7_n_0 ),
        .O(\ports_loop[4].in_port_flop_i_3_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  MUXF7 \ports_loop[4].in_port_flop_i_4 
       (.I0(\ports_loop[4].in_port_flop_i_8_n_0 ),
        .I1(\ports_loop[4].in_port_flop_i_9_n_0 ),
        .O(\ports_loop[4].in_port_flop_i_4_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  LUT6 #(
    .INIT(64'hC0C0AFA000000F00)) 
    \ports_loop[4].in_port_flop_i_5 
       (.I0(monitor_rxdata[4]),
        .I1(fetch_rxdata[4]),
        .I2(\OUTRegistered.instruction_reg[2] [1]),
        .I3(\ports_loop[7].in_port_flop_i_2_0 [4]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\OUTRegistered.instruction_reg[2] [2]),
        .O(\ports_loop[4].in_port_flop_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[4].in_port_flop_i_6 
       (.I0(\ports_loop[4].in_port_flop_i_10_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[4].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[4]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[4].in_port_flop_i_3_0 ),
        .O(\ports_loop[4].in_port_flop_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[4].in_port_flop_i_7 
       (.I0(\ports_loop[4].in_port_flop_i_14_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[4].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[4]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[4].in_port_flop_i_3_0 ),
        .O(\ports_loop[4].in_port_flop_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[4].in_port_flop_i_8 
       (.I0(fetch_tbladdr[12]),
        .I1(fetch_tbladdr[4]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [20]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [12]),
        .O(\ports_loop[4].in_port_flop_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[4].in_port_flop_i_9 
       (.I0(fetch_tbladdr[28]),
        .I1(fetch_tbladdr[20]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [36]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [28]),
        .O(\ports_loop[4].in_port_flop_i_9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[4].out_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(out_port[4]),
        .Q(out_port_reg[4]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[5].in_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\ports_loop[5].in_port_flop_i_1_n_0 ),
        .Q(in_port[5]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \ports_loop[5].in_port_flop_i_1 
       (.I0(\ports_loop[5].in_port_flop_i_2_n_0 ),
        .I1(port_id[3]),
        .I2(\ports_loop[5].in_port_flop_i_3_n_0 ),
        .I3(port_id[4]),
        .I4(\ports_loop[5].in_port_flop_i_4_n_0 ),
        .I5(port_id[5]),
        .O(\ports_loop[5].in_port_flop_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[5].in_port_flop_i_10 
       (.I0(monitor_rxempty),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\ports_loop[7].in_port_flop_i_6_0 [1]),
        .O(\ports_loop[5].in_port_flop_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \ports_loop[5].in_port_flop_i_11 
       (.I0(Q[5]),
        .I1(\OUTRegistered.instruction_reg[2] [1]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[5].in_port_flop_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[5].in_port_flop_i_14 
       (.I0(p_7_in[0]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(aux_cr_ne_err),
        .O(\ports_loop[5].in_port_flop_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h8000FFFF80000000)) 
    \ports_loop[5].in_port_flop_i_2 
       (.I0(\ports_loop[7].in_port_flop_i_4_0 [5]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(port_id[4]),
        .I5(\ports_loop[5].in_port_flop_i_5_n_0 ),
        .O(\ports_loop[5].in_port_flop_i_2_n_0 ));
  MUXF7 \ports_loop[5].in_port_flop_i_3 
       (.I0(\ports_loop[5].in_port_flop_i_6_n_0 ),
        .I1(\ports_loop[5].in_port_flop_i_7_n_0 ),
        .O(\ports_loop[5].in_port_flop_i_3_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  MUXF7 \ports_loop[5].in_port_flop_i_4 
       (.I0(\ports_loop[5].in_port_flop_i_8_n_0 ),
        .I1(\ports_loop[5].in_port_flop_i_9_n_0 ),
        .O(\ports_loop[5].in_port_flop_i_4_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  LUT6 #(
    .INIT(64'hC0C0AFA000000F00)) 
    \ports_loop[5].in_port_flop_i_5 
       (.I0(monitor_rxdata[5]),
        .I1(fetch_rxdata[5]),
        .I2(\OUTRegistered.instruction_reg[2] [1]),
        .I3(\ports_loop[7].in_port_flop_i_2_0 [5]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\OUTRegistered.instruction_reg[2] [2]),
        .O(\ports_loop[5].in_port_flop_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[5].in_port_flop_i_6 
       (.I0(\ports_loop[5].in_port_flop_i_10_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[5].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[5]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[5].in_port_flop_i_3_0 ),
        .O(\ports_loop[5].in_port_flop_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[5].in_port_flop_i_7 
       (.I0(\ports_loop[5].in_port_flop_i_14_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[5].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[5]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[5].in_port_flop_i_3_0 ),
        .O(\ports_loop[5].in_port_flop_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[5].in_port_flop_i_8 
       (.I0(fetch_tbladdr[13]),
        .I1(fetch_tbladdr[5]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [21]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [13]),
        .O(\ports_loop[5].in_port_flop_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[5].in_port_flop_i_9 
       (.I0(fetch_tbladdr[29]),
        .I1(fetch_tbladdr[21]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [37]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [29]),
        .O(\ports_loop[5].in_port_flop_i_9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[5].out_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(out_port[5]),
        .Q(out_port_reg[5]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[6].in_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\ports_loop[6].in_port_flop_i_1_n_0 ),
        .Q(in_port[6]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \ports_loop[6].in_port_flop_i_1 
       (.I0(\ports_loop[6].in_port_flop_i_2_n_0 ),
        .I1(port_id[3]),
        .I2(\ports_loop[6].in_port_flop_i_3_n_0 ),
        .I3(port_id[4]),
        .I4(\ports_loop[6].in_port_flop_i_4_n_0 ),
        .I5(port_id[5]),
        .O(\ports_loop[6].in_port_flop_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT5 #(
    .INIT(32'hBABF8A80)) 
    \ports_loop[6].in_port_flop_i_10 
       (.I0(sync_out),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\OUTRegistered.instruction_reg[2] [1]),
        .I3(\OUTRegistered.instruction_reg[2] [0]),
        .I4(\ports_loop[7].in_port_flop_i_2_0 [6]),
        .O(\ports_loop[6].in_port_flop_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[6].in_port_flop_i_11 
       (.I0(fetch_txfull),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\ports_loop[7].in_port_flop_i_6_0 [2]),
        .O(\ports_loop[6].in_port_flop_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \ports_loop[6].in_port_flop_i_12 
       (.I0(Q[6]),
        .I1(\OUTRegistered.instruction_reg[2] [1]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[6].in_port_flop_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[6].in_port_flop_i_15 
       (.I0(p_7_in[1]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(aux_cr_es_err),
        .O(\ports_loop[6].in_port_flop_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h8000FFFF80000000)) 
    \ports_loop[6].in_port_flop_i_2 
       (.I0(\ports_loop[7].in_port_flop_i_4_0 [6]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(port_id[4]),
        .I5(\ports_loop[6].in_port_flop_i_5_n_0 ),
        .O(\ports_loop[6].in_port_flop_i_2_n_0 ));
  MUXF7 \ports_loop[6].in_port_flop_i_3 
       (.I0(\ports_loop[6].in_port_flop_i_6_n_0 ),
        .I1(\ports_loop[6].in_port_flop_i_7_n_0 ),
        .O(\ports_loop[6].in_port_flop_i_3_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  MUXF7 \ports_loop[6].in_port_flop_i_4 
       (.I0(\ports_loop[6].in_port_flop_i_8_n_0 ),
        .I1(\ports_loop[6].in_port_flop_i_9_n_0 ),
        .O(\ports_loop[6].in_port_flop_i_4_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  LUT6 #(
    .INIT(64'hA808FFFFA8080000)) 
    \ports_loop[6].in_port_flop_i_5 
       (.I0(\OUTRegistered.instruction_reg[2] [2]),
        .I1(monitor_rxdata[6]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .I3(fetch_rxdata[6]),
        .I4(\OUTRegistered.instruction_reg[2] [1]),
        .I5(\ports_loop[6].in_port_flop_i_10_n_0 ),
        .O(\ports_loop[6].in_port_flop_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[6].in_port_flop_i_6 
       (.I0(\ports_loop[6].in_port_flop_i_11_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[6].in_port_flop_i_12_n_0 ),
        .I3(mem_read_byte[6]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[6].in_port_flop_i_3_0 ),
        .O(\ports_loop[6].in_port_flop_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[6].in_port_flop_i_7 
       (.I0(\ports_loop[6].in_port_flop_i_15_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[6].in_port_flop_i_12_n_0 ),
        .I3(mem_read_byte[6]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[6].in_port_flop_i_3_0 ),
        .O(\ports_loop[6].in_port_flop_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[6].in_port_flop_i_8 
       (.I0(fetch_tbladdr[14]),
        .I1(fetch_tbladdr[6]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [22]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [14]),
        .O(\ports_loop[6].in_port_flop_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[6].in_port_flop_i_9 
       (.I0(fetch_tbladdr[30]),
        .I1(fetch_tbladdr[22]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [38]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [30]),
        .O(\ports_loop[6].in_port_flop_i_9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[6].out_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(out_port[6]),
        .Q(out_port_reg[6]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[7].in_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\ports_loop[7].in_port_flop_i_1_n_0 ),
        .Q(in_port[7]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \ports_loop[7].in_port_flop_i_1 
       (.I0(\ports_loop[7].in_port_flop_i_2_n_0 ),
        .I1(port_id[3]),
        .I2(\ports_loop[7].in_port_flop_i_3_n_0 ),
        .I3(port_id[4]),
        .I4(\ports_loop[7].in_port_flop_i_4_n_0 ),
        .I5(port_id[5]),
        .O(\ports_loop[7].in_port_flop_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[7].in_port_flop_i_10 
       (.I0(fetch_rxempty),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\ports_loop[7].in_port_flop_i_6_0 [3]),
        .O(\ports_loop[7].in_port_flop_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \ports_loop[7].in_port_flop_i_11 
       (.I0(Q[7]),
        .I1(\OUTRegistered.instruction_reg[2] [1]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .O(\ports_loop[7].in_port_flop_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[7].in_port_flop_i_14 
       (.I0(rdbk_crc),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(aux_uc_err),
        .O(\ports_loop[7].in_port_flop_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h8000FFFF80000000)) 
    \ports_loop[7].in_port_flop_i_2 
       (.I0(\ports_loop[7].in_port_flop_i_4_0 [7]),
        .I1(\OUTRegistered.instruction_reg[2] [0]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(port_id[4]),
        .I5(\ports_loop[7].in_port_flop_i_5_n_0 ),
        .O(\ports_loop[7].in_port_flop_i_2_n_0 ));
  MUXF7 \ports_loop[7].in_port_flop_i_3 
       (.I0(\ports_loop[7].in_port_flop_i_6_n_0 ),
        .I1(\ports_loop[7].in_port_flop_i_7_n_0 ),
        .O(\ports_loop[7].in_port_flop_i_3_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  MUXF7 \ports_loop[7].in_port_flop_i_4 
       (.I0(\ports_loop[7].in_port_flop_i_8_n_0 ),
        .I1(\ports_loop[7].in_port_flop_i_9_n_0 ),
        .O(\ports_loop[7].in_port_flop_i_4_n_0 ),
        .S(\OUTRegistered.instruction_reg[2] [1]));
  LUT6 #(
    .INIT(64'hC0C0AFA0F0F0FFF0)) 
    \ports_loop[7].in_port_flop_i_5 
       (.I0(monitor_rxdata[7]),
        .I1(fetch_rxdata[7]),
        .I2(\OUTRegistered.instruction_reg[2] [1]),
        .I3(\ports_loop[7].in_port_flop_i_2_0 [7]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\OUTRegistered.instruction_reg[2] [2]),
        .O(\ports_loop[7].in_port_flop_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[7].in_port_flop_i_6 
       (.I0(\ports_loop[7].in_port_flop_i_10_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[7].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[7]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[7].in_port_flop_i_3_0 ),
        .O(\ports_loop[7].in_port_flop_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB8B8B8)) 
    \ports_loop[7].in_port_flop_i_7 
       (.I0(\ports_loop[7].in_port_flop_i_14_n_0 ),
        .I1(\OUTRegistered.instruction_reg[2] [2]),
        .I2(\ports_loop[7].in_port_flop_i_11_n_0 ),
        .I3(mem_read_byte[7]),
        .I4(\OUTRegistered.instruction_reg[0] ),
        .I5(\ports_loop[7].in_port_flop_i_3_0 ),
        .O(\ports_loop[7].in_port_flop_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[7].in_port_flop_i_8 
       (.I0(fetch_tbladdr[15]),
        .I1(fetch_tbladdr[7]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [23]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [15]),
        .O(\ports_loop[7].in_port_flop_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \ports_loop[7].in_port_flop_i_9 
       (.I0(fetch_tbladdr[31]),
        .I1(fetch_tbladdr[23]),
        .I2(\OUTRegistered.instruction_reg[2] [2]),
        .I3(\ports_loop[7].in_port_flop_i_4_0 [39]),
        .I4(\OUTRegistered.instruction_reg[2] [0]),
        .I5(\ports_loop[7].in_port_flop_i_4_0 [31]),
        .O(\ports_loop[7].in_port_flop_i_9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \ports_loop[7].out_port_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(out_port[7]),
        .Q(out_port_reg[7]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFFF100000002000)) 
    push_pop_lut
       (.I0(flag_enable_flop_0[12]),
        .I1(flag_enable_flop_0[13]),
        .I2(move_type),
        .I3(pc_move_is_valid),
        .I4(1'b0),
        .I5(1'b1),
        .O5(pop_stack),
        .O6(push_stack));
  LUT4 #(
    .INIT(16'hBFAA)) 
    rdbk_crc_i_1
       (.I0(fecc_crcerror),
        .I1(out_port_reg[7]),
        .I2(p_10_in),
        .I3(rdbk_crc),
        .O(\ports_loop[7].out_port_flop_0 ));
  LUT5 #(
    .INIT(32'h10DCDCDC)) 
    rdbk_nsb_i_1
       (.I0(p_7_in[1]),
        .I1(p_7_in[0]),
        .I2(fecc_eccerrornotsingle),
        .I3(out_port_reg[5]),
        .I4(p_10_in),
        .O(rdbk_sbe_reg));
  LUT6 #(
    .INIT(64'hE000000000000000)) 
    rdbk_nsb_i_2
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[1]),
        .I3(port_id_reg[2]),
        .I4(port_id_reg[3]),
        .I5(port_id_reg[0]),
        .O(p_10_in));
  LUT5 #(
    .INIT(32'h10BABABA)) 
    rdbk_sbe_i_1
       (.I0(p_7_in[1]),
        .I1(p_7_in[0]),
        .I2(fecc_eccerrorsingle),
        .I3(out_port_reg[6]),
        .I4(p_10_in),
        .O(rdbk_sbe_reg_0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    read_strobe_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(read_strobe_value),
        .Q(rs),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h4000000001000000)) 
    read_strobe_lut
       (.I0(flag_enable_flop_0[13]),
        .I1(flag_enable_flop_0[14]),
        .I2(flag_enable_flop_0[17]),
        .I3(strobe_type),
        .I4(t_state[1]),
        .I5(1'b1),
        .O5(read_strobe_value),
        .O6(write_strobe_value));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h0080020000000000)) 
    regbank_type_lut
       (.I0(flag_enable_flop_0[12]),
        .I1(flag_enable_flop_0[13]),
        .I2(flag_enable_flop_0[14]),
        .I3(flag_enable_flop_0[15]),
        .I4(flag_enable_flop_0[16]),
        .I5(flag_enable_flop_0[17]),
        .O(regbank_type));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    register_enable_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(register_enable_value),
        .Q(register_enable),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hC0CC0000A0AA0000)) 
    register_enable_lut
       (.I0(flag_enable_type),
        .I1(register_enable_type),
        .I2(flag_enable_flop_0[12]),
        .I3(flag_enable_flop_0[17]),
        .I4(t_state[1]),
        .I5(1'b1),
        .O5(flag_enable_value),
        .O6(register_enable_value));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h00013F3F0010F7CE)) 
    register_enable_type_lut
       (.I0(flag_enable_flop_0[13]),
        .I1(flag_enable_flop_0[14]),
        .I2(flag_enable_flop_0[15]),
        .I3(flag_enable_flop_0[16]),
        .I4(flag_enable_flop_0[17]),
        .I5(1'b1),
        .O5(flag_enable_type),
        .O6(register_enable_type));
  LUT3 #(
    .INIT(8'hEA)) 
    rom_cr_ne_err_i_1
       (.I0(rom_error),
        .I1(out_port_reg[4]),
        .I2(p_25_in),
        .O(firmware0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    run_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(run_value),
        .Q(run),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    shadow_bank_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_bank),
        .Q(shadow_bank),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    shadow_carry_flag_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_carry_flag),
        .Q(shadow_carry_flag),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    shadow_zero_flag_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(shadow_zero_value),
        .Q(shadow_zero_flag),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    shift_carry_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(shift_carry_value),
        .Q(shift_carry),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFFFAACCF0F0F0F0)) 
    shift_carry_lut
       (.I0(register_vector[8]),
        .I1(upper_reg_banks_n_6),
        .I2(shadow_carry_flag),
        .I3(flag_enable_flop_0[3]),
        .I4(flag_enable_flop_0[7]),
        .I5(flag_enable_flop_0[16]),
        .O(shift_carry_value));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    spm_enable_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(spm_enable_value),
        .Q(spm_enable),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8000000020000000)) 
    spm_enable_lut
       (.I0(flag_enable_flop_0[13]),
        .I1(flag_enable_flop_0[14]),
        .I2(flag_enable_flop_0[17]),
        .I3(strobe_type),
        .I4(t_state[1]),
        .I5(1'b1),
        .O5(const_strobe_value),
        .O6(spm_enable_value));
  LUT4 #(
    .INIT(16'h8BB8)) 
    \sta_ptr[0]_i_1 
       (.I0(out_port_reg[0]),
        .I1(sta_ptr12_out),
        .I2(Q[0]),
        .I3(inc1__5),
        .O(D[0]));
  LUT4 #(
    .INIT(16'h8BB8)) 
    \sta_ptr[10]_i_1 
       (.I0(out_port_reg[2]),
        .I1(sta_ptr1__0),
        .I2(\sta_ptr_reg[10] ),
        .I3(Q[10]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'hAAAAB2AAAAAAAAAA)) 
    \sta_ptr[11]_i_1 
       (.I0(\sta_ptr_reg[10]_0 ),
        .I1(port_id_reg[0]),
        .I2(port_id_reg[1]),
        .I3(port_id_reg[3]),
        .I4(port_id_reg[2]),
        .I5(status_reg1__0),
        .O(E[1]));
  LUT2 #(
    .INIT(4'hE)) 
    \sta_ptr[11]_i_4 
       (.I0(ws),
        .I1(cs),
        .O(status_reg1__0));
  LUT6 #(
    .INIT(64'h00000E0000000000)) 
    \sta_ptr[11]_i_5 
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[0]),
        .I3(port_id_reg[1]),
        .I4(port_id_reg[2]),
        .I5(port_id_reg[3]),
        .O(sta_ptr1__0));
  LUT5 #(
    .INIT(32'h8BBBB888)) 
    \sta_ptr[1]_i_1 
       (.I0(out_port_reg[1]),
        .I1(sta_ptr12_out),
        .I2(Q[0]),
        .I3(inc1__5),
        .I4(Q[1]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h8BBB8888B888BBBB)) 
    \sta_ptr[2]_i_1 
       (.I0(out_port_reg[2]),
        .I1(sta_ptr12_out),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(inc1__5),
        .I5(Q[2]),
        .O(D[2]));
  LUT6 #(
    .INIT(64'hFFFFFFFF00040000)) 
    \sta_ptr[2]_i_2 
       (.I0(port_id_reg[1]),
        .I1(port_id_reg[3]),
        .I2(port_id_reg[2]),
        .I3(port_id_reg[0]),
        .I4(status_reg1__0),
        .I5(rd_b_dat),
        .O(inc1__5));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \sta_ptr[2]_i_3 
       (.I0(rs),
        .I1(port_id[4]),
        .I2(\OUTRegistered.instruction_reg[2] [0]),
        .I3(\OUTRegistered.instruction_reg[2] [1]),
        .I4(\OUTRegistered.instruction_reg[2] [2]),
        .I5(port_id[3]),
        .O(rd_b_dat));
  LUT4 #(
    .INIT(16'h8BB8)) 
    \sta_ptr[3]_i_1 
       (.I0(out_port_reg[3]),
        .I1(sta_ptr12_out),
        .I2(\sta_ptr_reg[3]_0 ),
        .I3(Q[3]),
        .O(D[3]));
  LUT4 #(
    .INIT(16'h8BB8)) 
    \sta_ptr[4]_i_1 
       (.I0(out_port_reg[4]),
        .I1(sta_ptr12_out),
        .I2(\sta_ptr_reg[4] ),
        .I3(Q[4]),
        .O(D[4]));
  LUT4 #(
    .INIT(16'h8BB8)) 
    \sta_ptr[5]_i_1 
       (.I0(out_port_reg[5]),
        .I1(sta_ptr12_out),
        .I2(\sta_ptr_reg[5] ),
        .I3(Q[5]),
        .O(D[5]));
  LUT6 #(
    .INIT(64'hFFDFFFFF00080000)) 
    \sta_ptr[7]_i_1 
       (.I0(status_reg1__0),
        .I1(port_id_reg[0]),
        .I2(port_id_reg[1]),
        .I3(port_id_reg[2]),
        .I4(port_id_reg[3]),
        .I5(\sta_ptr_reg[10]_0 ),
        .O(E[0]));
  LUT6 #(
    .INIT(64'h00000E0000000000)) 
    \sta_ptr[7]_i_3 
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[2]),
        .I3(port_id_reg[3]),
        .I4(port_id_reg[1]),
        .I5(port_id_reg[0]),
        .O(sta_ptr12_out));
  LUT4 #(
    .INIT(16'h8BB8)) 
    \sta_ptr[8]_i_1 
       (.I0(out_port_reg[0]),
        .I1(sta_ptr1__0),
        .I2(\sta_ptr_reg[8] ),
        .I3(Q[8]),
        .O(D[6]));
  LUT4 #(
    .INIT(16'h8BB8)) 
    \sta_ptr[9]_i_1 
       (.I0(out_port_reg[1]),
        .I1(sta_ptr1__0),
        .I2(\sta_ptr_reg[9] ),
        .I3(Q[9]),
        .O(D[7]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    stack_bit_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_bit),
        .Q(special_bit),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \stack_loop[0].lsb_stack.pointer_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_pointer_value[0]),
        .Q(stack_pointer[0]),
        .R(internal_reset));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \stack_loop[0].lsb_stack.stack_muxcy_CARRY4_CARRY8 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\NLW_stack_loop[0].lsb_stack.stack_muxcy_CARRY4_CARRY8_CO_UNCONNECTED [7:4],stack_pointer_carry}),
        .DI({\NLW_stack_loop[0].lsb_stack.stack_muxcy_CARRY4_CARRY8_DI_UNCONNECTED [7:4],feed_pointer_value[3:0]}),
        .O({\NLW_stack_loop[0].lsb_stack.stack_muxcy_CARRY4_CARRY8_O_UNCONNECTED [7:5],stack_pointer_value}),
        .S({\NLW_stack_loop[0].lsb_stack.stack_muxcy_CARRY4_CARRY8_S_UNCONNECTED [7:5],half_pointer_value}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h001529AAAAAAAAAA)) 
    \stack_loop[0].lsb_stack.stack_pointer_lut 
       (.I0(stack_pointer[0]),
        .I1(pop_stack),
        .I2(push_stack),
        .I3(t_state[1]),
        .I4(t_state[2]),
        .I5(1'b1),
        .O5(feed_pointer_value[0]),
        .O6(half_pointer_value[0]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \stack_loop[1].upper_stack.pointer_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_pointer_value[1]),
        .Q(stack_pointer[1]),
        .R(internal_reset));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h002A252AAAAAAAAA)) 
    \stack_loop[1].upper_stack.stack_pointer_lut 
       (.I0(stack_pointer[1]),
        .I1(pop_stack),
        .I2(push_stack),
        .I3(t_state[1]),
        .I4(t_state[2]),
        .I5(1'b1),
        .O5(feed_pointer_value[1]),
        .O6(half_pointer_value[1]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \stack_loop[2].upper_stack.pointer_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_pointer_value[2]),
        .Q(stack_pointer[2]),
        .R(internal_reset));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h002A252AAAAAAAAA)) 
    \stack_loop[2].upper_stack.stack_pointer_lut 
       (.I0(stack_pointer[2]),
        .I1(pop_stack),
        .I2(push_stack),
        .I3(t_state[1]),
        .I4(t_state[2]),
        .I5(1'b1),
        .O5(feed_pointer_value[2]),
        .O6(half_pointer_value[2]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \stack_loop[3].upper_stack.pointer_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_pointer_value[3]),
        .Q(stack_pointer[3]),
        .R(internal_reset));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h002A252AAAAAAAAA)) 
    \stack_loop[3].upper_stack.stack_pointer_lut 
       (.I0(stack_pointer[3]),
        .I1(pop_stack),
        .I2(push_stack),
        .I3(t_state[1]),
        .I4(t_state[2]),
        .I5(1'b1),
        .O5(feed_pointer_value[3]),
        .O6(half_pointer_value[3]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \stack_loop[4].upper_stack.pointer_flop 
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_pointer_value[4]),
        .Q(stack_pointer[4]),
        .R(internal_reset));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h002A252AAAAAAAAA)) 
    \stack_loop[4].upper_stack.stack_pointer_lut 
       (.I0(stack_pointer[4]),
        .I1(pop_stack),
        .I2(push_stack),
        .I3(t_state[1]),
        .I4(t_state[2]),
        .I5(1'b1),
        .O5(feed_pointer_value[4]),
        .O6(half_pointer_value[4]));
  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    stack_ram_high
       (.ADDRA(stack_pointer),
        .ADDRB(stack_pointer),
        .ADDRC(stack_pointer),
        .ADDRD(stack_pointer),
        .DIA(address[5:4]),
        .DIB(address[7:6]),
        .DIC(address[9:8]),
        .DID(address[11:10]),
        .DOA(stack_memory[5:4]),
        .DOB(stack_memory[7:6]),
        .DOC(stack_memory[9:8]),
        .DOD(stack_memory[11:10]),
        .WCLK(icap_clk),
        .WE(t_state[1]));
  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    stack_ram_low
       (.ADDRA(stack_pointer),
        .ADDRB(stack_pointer),
        .ADDRC(stack_pointer),
        .ADDRD(stack_pointer),
        .DIA({zero_flag,carry_flag}),
        .DIB({run,bank}),
        .DIC(address[1:0]),
        .DID(address[3:2]),
        .DOA({stack_zero_flag,stack_carry_flag}),
        .DOB({stack_bit,stack_bank}),
        .DOC(stack_memory[1:0]),
        .DOD(stack_memory[3:2]),
        .WCLK(icap_clk),
        .WE(t_state[1]));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    stack_zero_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(stack_zero_flag),
        .Q(shadow_zero_value),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000E00000)) 
    \status_reg2[1]_i_1 
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[0]),
        .I3(port_id_reg[3]),
        .I4(port_id_reg[1]),
        .I5(port_id_reg[2]),
        .O(const_strobe_flop_1));
  LUT6 #(
    .INIT(64'h000000000000000E)) 
    \status_reg[0]_i_1 
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[0]),
        .I3(port_id_reg[1]),
        .I4(port_id_reg[2]),
        .I5(port_id_reg[3]),
        .O(const_strobe_flop_2));
  LUT6 #(
    .INIT(64'h00000000000E0000)) 
    storage_i_47
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[0]),
        .I3(port_id_reg[2]),
        .I4(port_id_reg[3]),
        .I5(port_id_reg[1]),
        .O(wr_b_dat__0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sx_addr4_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(sx_addr4_value),
        .Q(sx_addr),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hCC33FF0080808080)) 
    sx_addr4_value_lut
       (.I0(1'b0),
        .I1(t_state[2]),
        .I2(1'b0),
        .I3(bank),
        .I4(loadstar_type),
        .I5(1'b1),
        .O5(NLW_sx_addr4_value_lut_O5_UNCONNECTED),
        .O6(sx_addr4_value));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_sleep_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(sleep),
        .Q(sync_sleep),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    t_state1_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(t_state_value[1]),
        .Q(t_state[1]),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    t_state2_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(t_state_value[2]),
        .Q(t_state[2]),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0083000B00C4004C)) 
    t_state_lut
       (.I0(t_state[1]),
        .I1(t_state[2]),
        .I2(sync_sleep),
        .I3(internal_reset),
        .I4(special_bit),
        .I5(1'b1),
        .O5(t_state_value[1]),
        .O6(t_state_value[2]));
  LUT6 #(
    .INIT(64'h000E000000000000)) 
    \timer_rdsel[1]_i_1 
       (.I0(cs),
        .I1(ws),
        .I2(port_id_reg[1]),
        .I3(port_id_reg[0]),
        .I4(port_id_reg[3]),
        .I5(port_id_reg[2]),
        .O(const_strobe_flop_0));
  LUT6 #(
    .INIT(64'h0008000000000000)) 
    timer_snap_i_1
       (.I0(port_id_reg[2]),
        .I1(port_id_reg[3]),
        .I2(port_id_reg[0]),
        .I3(port_id_reg[1]),
        .I4(status_reg1__0),
        .I5(out_port_reg[7]),
        .O(timer_snap0));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    upper_parity_lut
       (.I0(arith_logical_result[2]),
        .I1(arith_logical_result[3]),
        .I2(arith_logical_result[4]),
        .I3(arith_logical_result[5]),
        .I4(arith_logical_result[6]),
        .I5(arith_logical_result[7]),
        .O(upper_parity));
  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    upper_reg_banks
       (.ADDRA({bank,flag_enable_flop_0[7:4]}),
        .ADDRB({sx_addr,flag_enable_flop_0[11:8]}),
        .ADDRC({bank,flag_enable_flop_0[7:4]}),
        .ADDRD({sx_addr,flag_enable_flop_0[11:8]}),
        .DIA(alu_result[5:4]),
        .DIB(alu_result[5:4]),
        .DIC(alu_result[7:6]),
        .DID(alu_result[7:6]),
        .DOA(register_vector[5:4]),
        .DOB({upper_reg_banks_n_2,upper_reg_banks_n_3}),
        .DOC(register_vector[7:6]),
        .DOD({upper_reg_banks_n_6,upper_reg_banks_n_7}),
        .WCLK(icap_clk),
        .WE(register_enable));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFBFF000000000000)) 
    upper_zero_lut
       (.I0(flag_enable_flop_0[14]),
        .I1(flag_enable_flop_0[15]),
        .I2(flag_enable_flop_0[16]),
        .I3(1'b1),
        .I4(1'b1),
        .I5(1'b1),
        .O(upper_zero_sel));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    use_zero_flag_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(use_zero_flag_value),
        .Q(use_zero_flag),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hA280000000F000F0)) 
    use_zero_flag_lut
       (.I0(flag_enable_flop_0[13]),
        .I1(flag_enable_flop_0[14]),
        .I2(flag_enable_flop_0[15]),
        .I3(flag_enable_flop_0[16]),
        .I4(1'b1),
        .I5(1'b1),
        .O5(strobe_type),
        .O6(use_zero_flag_value));
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    write_strobe_flop
       (.C(icap_clk),
        .CE(1'b1),
        .D(write_strobe_value),
        .Q(ws),
        .R(1'b0));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    zero_flag_flop
       (.C(icap_clk),
        .CE(flag_enable),
        .D(zero_flag_value),
        .Q(zero_flag),
        .R(internal_reset));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_synchro" *) 
module semicap_sem_ultra_v3_1_11_synchro
   (sync_out,
    aux_error_cr_es,
    icap_clk);
  output sync_out;
  input aux_error_cr_es;
  input icap_clk;

  wire aux_error_cr_es;
  wire icap_clk;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire sync_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(aux_error_cr_es),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(sync_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_synchro" *) 
module semicap_sem_ultra_v3_1_11_synchro_10
   (sync_g_0,
    \ports_loop[2].in_port_flop_i_6 ,
    Q,
    icap_prdone,
    icap_clk);
  output sync_g_0;
  input [0:0]\ports_loop[2].in_port_flop_i_6 ;
  input [0:0]Q;
  input icap_prdone;
  input icap_clk;

  wire [0:0]Q;
  wire icap_clk;
  wire icap_prdone;
  wire [2:2]p_9_in;
  wire [0:0]\ports_loop[2].in_port_flop_i_6 ;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire sync_g_0;

  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[2].in_port_flop_i_10 
       (.I0(p_9_in),
        .I1(\ports_loop[2].in_port_flop_i_6 ),
        .I2(Q),
        .O(sync_g_0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_prdone),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(p_9_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_synchro" *) 
module semicap_sem_ultra_v3_1_11_synchro_11
   (sync_g_0,
    \ports_loop[1].in_port_flop_i_6 ,
    Q,
    icap_prerror,
    icap_clk);
  output sync_g_0;
  input [0:0]\ports_loop[1].in_port_flop_i_6 ;
  input [0:0]Q;
  input icap_prerror;
  input icap_clk;

  wire [0:0]Q;
  wire icap_clk;
  wire icap_prerror;
  wire [1:1]p_9_in;
  wire [0:0]\ports_loop[1].in_port_flop_i_6 ;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire sync_g_0;

  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[1].in_port_flop_i_10 
       (.I0(p_9_in),
        .I1(\ports_loop[1].in_port_flop_i_6 ),
        .I2(Q),
        .O(sync_g_0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_prerror),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(p_9_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_synchro" *) 
module semicap_sem_ultra_v3_1_11_synchro_12
   (next_request0,
    sync_out,
    next_request_reg,
    cap_rel,
    icap_clk);
  output next_request0;
  output sync_out;
  input next_request_reg;
  input cap_rel;
  input icap_clk;

  wire cap_rel;
  wire icap_clk;
  wire next_request0;
  wire next_request_reg;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire sync_out;

  LUT2 #(
    .INIT(4'h1)) 
    next_request_i_1
       (.I0(sync_out),
        .I1(next_request_reg),
        .O(next_request0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(cap_rel),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(sync_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_synchro" *) 
module semicap_sem_ultra_v3_1_11_synchro_6
   (sync_out,
    aux_error_cr_ne,
    icap_clk);
  output sync_out;
  input aux_error_cr_ne;
  input icap_clk;

  wire aux_error_cr_ne;
  wire icap_clk;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire sync_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(aux_error_cr_ne),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(sync_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_synchro" *) 
module semicap_sem_ultra_v3_1_11_synchro_7
   (sync_out,
    aux_error_uc,
    icap_clk);
  output sync_out;
  input aux_error_uc;
  input icap_clk;

  wire aux_error_uc;
  wire icap_clk;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire sync_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(aux_error_uc),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(sync_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_synchro" *) 
module semicap_sem_ultra_v3_1_11_synchro_8
   (sync_g_0,
    \ports_loop[0].in_port_flop_i_6 ,
    Q,
    icap_avail,
    icap_clk);
  output sync_g_0;
  input [0:0]\ports_loop[0].in_port_flop_i_6 ;
  input [0:0]Q;
  input icap_avail;
  input icap_clk;

  wire [0:0]Q;
  wire icap_avail;
  wire icap_clk;
  wire [0:0]p_9_in;
  wire [0:0]\ports_loop[0].in_port_flop_i_6 ;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire sync_g_0;

  LUT3 #(
    .INIT(8'hB8)) 
    \ports_loop[0].in_port_flop_i_10 
       (.I0(p_9_in),
        .I1(\ports_loop[0].in_port_flop_i_6 ),
        .I2(Q),
        .O(sync_g_0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(icap_avail),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(p_9_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_synchro" *) 
module semicap_sem_ultra_v3_1_11_synchro_9
   (sync_out,
    cap_gnt,
    icap_clk);
  output sync_out;
  input cap_gnt;
  input icap_clk;

  wire cap_gnt;
  wire icap_clk;
  wire q_sync_a;
  wire q_sync_b;
  wire q_sync_c;
  wire q_sync_d;
  wire q_sync_e;
  wire q_sync_f;
  wire sync_out;

  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_a
       (.C(icap_clk),
        .CE(1'b1),
        .D(cap_gnt),
        .Q(q_sync_a),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_b
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_a),
        .Q(q_sync_b),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_c
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_b),
        .Q(q_sync_c),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_d
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_c),
        .Q(q_sync_d),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_e
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_d),
        .Q(q_sync_e),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_f
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_e),
        .Q(q_sync_f),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    sync_g
       (.C(icap_clk),
        .CE(1'b1),
        .D(q_sync_f),
        .Q(sync_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_timer" *) 
module semicap_sem_ultra_v3_1_11_timer
   (\timer_byte_reg[3]_0 ,
    Q,
    icap_clk,
    SR,
    timer_snap0,
    \ports_loop[3].in_port_flop_i_6 ,
    E,
    D);
  output \timer_byte_reg[3]_0 ;
  output [6:0]Q;
  input icap_clk;
  input [0:0]SR;
  input timer_snap0;
  input [0:0]\ports_loop[3].in_port_flop_i_6 ;
  input [0:0]E;
  input [1:0]D;

  wire [1:0]D;
  wire [0:0]E;
  wire [6:0]Q;
  wire [0:0]SR;
  wire icap_clk;
  wire [0:0]\ports_loop[3].in_port_flop_i_6 ;
  wire [5:0]prescaler_current;
  wire [6:0]prescaler_next;
  wire [3:3]timer_byte;
  wire \timer_byte[0]_i_1_n_0 ;
  wire \timer_byte[1]_i_1_n_0 ;
  wire \timer_byte[2]_i_1_n_0 ;
  wire \timer_byte[3]_i_1_n_0 ;
  wire \timer_byte[4]_i_1_n_0 ;
  wire \timer_byte[5]_i_1_n_0 ;
  wire \timer_byte[6]_i_1_n_0 ;
  wire \timer_byte[7]_i_1_n_0 ;
  wire \timer_byte_reg[3]_0 ;
  wire timer_ena;
  wire [1:0]timer_rdsel;
  wire timer_snap;
  wire timer_snap0;
  wire \timer_snapshot_reg_n_0_[16] ;
  wire \timer_snapshot_reg_n_0_[17] ;
  wire \timer_snapshot_reg_n_0_[18] ;
  wire \timer_snapshot_reg_n_0_[19] ;
  wire \timer_snapshot_reg_n_0_[20] ;
  wire \timer_snapshot_reg_n_0_[21] ;
  wire \timer_snapshot_reg_n_0_[22] ;
  wire \timer_snapshot_reg_n_0_[23] ;
  wire \timer_snapshot_reg_n_0_[24] ;
  wire \timer_snapshot_reg_n_0_[25] ;
  wire \timer_snapshot_reg_n_0_[26] ;
  wire \timer_snapshot_reg_n_0_[27] ;
  wire \timer_snapshot_reg_n_0_[28] ;
  wire \timer_snapshot_reg_n_0_[29] ;
  wire \timer_snapshot_reg_n_0_[30] ;
  wire \timer_snapshot_reg_n_0_[31] ;
  wire \timer_snapshot_reg_n_0_[32] ;
  wire \timer_snapshot_reg_n_0_[33] ;
  wire \timer_snapshot_reg_n_0_[34] ;
  wire \timer_snapshot_reg_n_0_[35] ;
  wire \timer_snapshot_reg_n_0_[36] ;
  wire \timer_snapshot_reg_n_0_[37] ;
  wire \timer_snapshot_reg_n_0_[38] ;
  wire \timer_snapshot_reg_n_0_[39] ;
  wire \timer_snapshot_reg_n_0_[40] ;
  wire \timer_snapshot_reg_n_0_[41] ;
  wire \timer_snapshot_reg_n_0_[42] ;
  wire \timer_snapshot_reg_n_0_[43] ;
  wire \timer_snapshot_reg_n_0_[44] ;
  wire \timer_snapshot_reg_n_0_[45] ;
  wire \timer_snapshot_reg_n_0_[46] ;
  wire \timer_snapshot_reg_n_0_[47] ;
  wire [47:16]timer_val;

  LUT2 #(
    .INIT(4'h2)) 
    \ports_loop[3].in_port_flop_i_10 
       (.I0(timer_byte),
        .I1(\ports_loop[3].in_port_flop_i_6 ),
        .O(\timer_byte_reg[3]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \prescaler_current[0]_i_1 
       (.I0(prescaler_current[0]),
        .O(prescaler_next[0]));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prescaler_current[1]_i_1 
       (.I0(prescaler_current[0]),
        .I1(prescaler_current[1]),
        .O(prescaler_next[1]));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \prescaler_current[2]_i_1 
       (.I0(prescaler_current[0]),
        .I1(prescaler_current[1]),
        .I2(prescaler_current[2]),
        .O(prescaler_next[2]));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \prescaler_current[3]_i_1 
       (.I0(prescaler_current[1]),
        .I1(prescaler_current[0]),
        .I2(prescaler_current[2]),
        .I3(prescaler_current[3]),
        .O(prescaler_next[3]));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \prescaler_current[4]_i_1 
       (.I0(prescaler_current[2]),
        .I1(prescaler_current[0]),
        .I2(prescaler_current[1]),
        .I3(prescaler_current[3]),
        .I4(prescaler_current[4]),
        .O(prescaler_next[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \prescaler_current[5]_i_1 
       (.I0(prescaler_current[3]),
        .I1(prescaler_current[1]),
        .I2(prescaler_current[0]),
        .I3(prescaler_current[2]),
        .I4(prescaler_current[4]),
        .I5(prescaler_current[5]),
        .O(prescaler_next[5]));
  FDRE #(
    .INIT(1'b0)) 
    \prescaler_current_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(prescaler_next[0]),
        .Q(prescaler_current[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \prescaler_current_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(prescaler_next[1]),
        .Q(prescaler_current[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \prescaler_current_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(prescaler_next[2]),
        .Q(prescaler_current[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \prescaler_current_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(prescaler_next[3]),
        .Q(prescaler_current[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \prescaler_current_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(prescaler_next[4]),
        .Q(prescaler_current[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \prescaler_current_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(prescaler_next[5]),
        .Q(prescaler_current[5]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \timer_byte[0]_i_1 
       (.I0(\timer_snapshot_reg_n_0_[24] ),
        .I1(\timer_snapshot_reg_n_0_[16] ),
        .I2(\timer_snapshot_reg_n_0_[40] ),
        .I3(timer_rdsel[1]),
        .I4(timer_rdsel[0]),
        .I5(\timer_snapshot_reg_n_0_[32] ),
        .O(\timer_byte[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \timer_byte[1]_i_1 
       (.I0(\timer_snapshot_reg_n_0_[25] ),
        .I1(\timer_snapshot_reg_n_0_[17] ),
        .I2(\timer_snapshot_reg_n_0_[41] ),
        .I3(timer_rdsel[1]),
        .I4(timer_rdsel[0]),
        .I5(\timer_snapshot_reg_n_0_[33] ),
        .O(\timer_byte[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \timer_byte[2]_i_1 
       (.I0(\timer_snapshot_reg_n_0_[26] ),
        .I1(\timer_snapshot_reg_n_0_[18] ),
        .I2(\timer_snapshot_reg_n_0_[42] ),
        .I3(timer_rdsel[1]),
        .I4(timer_rdsel[0]),
        .I5(\timer_snapshot_reg_n_0_[34] ),
        .O(\timer_byte[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \timer_byte[3]_i_1 
       (.I0(\timer_snapshot_reg_n_0_[27] ),
        .I1(\timer_snapshot_reg_n_0_[19] ),
        .I2(\timer_snapshot_reg_n_0_[43] ),
        .I3(timer_rdsel[1]),
        .I4(timer_rdsel[0]),
        .I5(\timer_snapshot_reg_n_0_[35] ),
        .O(\timer_byte[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \timer_byte[4]_i_1 
       (.I0(\timer_snapshot_reg_n_0_[28] ),
        .I1(\timer_snapshot_reg_n_0_[20] ),
        .I2(\timer_snapshot_reg_n_0_[44] ),
        .I3(timer_rdsel[1]),
        .I4(timer_rdsel[0]),
        .I5(\timer_snapshot_reg_n_0_[36] ),
        .O(\timer_byte[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \timer_byte[5]_i_1 
       (.I0(\timer_snapshot_reg_n_0_[29] ),
        .I1(\timer_snapshot_reg_n_0_[21] ),
        .I2(\timer_snapshot_reg_n_0_[45] ),
        .I3(timer_rdsel[1]),
        .I4(timer_rdsel[0]),
        .I5(\timer_snapshot_reg_n_0_[37] ),
        .O(\timer_byte[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \timer_byte[6]_i_1 
       (.I0(\timer_snapshot_reg_n_0_[30] ),
        .I1(\timer_snapshot_reg_n_0_[22] ),
        .I2(\timer_snapshot_reg_n_0_[46] ),
        .I3(timer_rdsel[1]),
        .I4(timer_rdsel[0]),
        .I5(\timer_snapshot_reg_n_0_[38] ),
        .O(\timer_byte[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \timer_byte[7]_i_1 
       (.I0(\timer_snapshot_reg_n_0_[31] ),
        .I1(\timer_snapshot_reg_n_0_[23] ),
        .I2(\timer_snapshot_reg_n_0_[47] ),
        .I3(timer_rdsel[1]),
        .I4(timer_rdsel[0]),
        .I5(\timer_snapshot_reg_n_0_[39] ),
        .O(\timer_byte[7]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \timer_byte_reg[0] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\timer_byte[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_byte_reg[1] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\timer_byte[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_byte_reg[2] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\timer_byte[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_byte_reg[3] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\timer_byte[3]_i_1_n_0 ),
        .Q(timer_byte),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_byte_reg[4] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\timer_byte[4]_i_1_n_0 ),
        .Q(Q[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_byte_reg[5] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\timer_byte[5]_i_1_n_0 ),
        .Q(Q[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_byte_reg[6] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\timer_byte[6]_i_1_n_0 ),
        .Q(Q[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_byte_reg[7] 
       (.C(icap_clk),
        .CE(1'b1),
        .D(\timer_byte[7]_i_1_n_0 ),
        .Q(Q[6]),
        .R(SR));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    timer_ena_i_1
       (.I0(prescaler_current[5]),
        .I1(prescaler_current[3]),
        .I2(prescaler_current[1]),
        .I3(prescaler_current[0]),
        .I4(prescaler_current[2]),
        .I5(prescaler_current[4]),
        .O(prescaler_next[6]));
  FDRE #(
    .INIT(1'b0)) 
    timer_ena_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(prescaler_next[6]),
        .Q(timer_ena),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \timer_rdsel_reg[0] 
       (.C(icap_clk),
        .CE(E),
        .D(D[0]),
        .Q(timer_rdsel[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_rdsel_reg[1] 
       (.C(icap_clk),
        .CE(E),
        .D(D[1]),
        .Q(timer_rdsel[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    timer_snap_reg
       (.C(icap_clk),
        .CE(1'b1),
        .D(timer_snap0),
        .Q(timer_snap),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[16] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[16]),
        .Q(\timer_snapshot_reg_n_0_[16] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[17] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[17]),
        .Q(\timer_snapshot_reg_n_0_[17] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[18] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[18]),
        .Q(\timer_snapshot_reg_n_0_[18] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[19] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[19]),
        .Q(\timer_snapshot_reg_n_0_[19] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[20] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[20]),
        .Q(\timer_snapshot_reg_n_0_[20] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[21] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[21]),
        .Q(\timer_snapshot_reg_n_0_[21] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[22] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[22]),
        .Q(\timer_snapshot_reg_n_0_[22] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[23] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[23]),
        .Q(\timer_snapshot_reg_n_0_[23] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[24] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[24]),
        .Q(\timer_snapshot_reg_n_0_[24] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[25] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[25]),
        .Q(\timer_snapshot_reg_n_0_[25] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[26] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[26]),
        .Q(\timer_snapshot_reg_n_0_[26] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[27] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[27]),
        .Q(\timer_snapshot_reg_n_0_[27] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[28] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[28]),
        .Q(\timer_snapshot_reg_n_0_[28] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[29] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[29]),
        .Q(\timer_snapshot_reg_n_0_[29] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[30] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[30]),
        .Q(\timer_snapshot_reg_n_0_[30] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[31] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[31]),
        .Q(\timer_snapshot_reg_n_0_[31] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[32] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[32]),
        .Q(\timer_snapshot_reg_n_0_[32] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[33] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[33]),
        .Q(\timer_snapshot_reg_n_0_[33] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[34] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[34]),
        .Q(\timer_snapshot_reg_n_0_[34] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[35] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[35]),
        .Q(\timer_snapshot_reg_n_0_[35] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[36] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[36]),
        .Q(\timer_snapshot_reg_n_0_[36] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[37] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[37]),
        .Q(\timer_snapshot_reg_n_0_[37] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[38] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[38]),
        .Q(\timer_snapshot_reg_n_0_[38] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[39] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[39]),
        .Q(\timer_snapshot_reg_n_0_[39] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[40] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[40]),
        .Q(\timer_snapshot_reg_n_0_[40] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[41] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[41]),
        .Q(\timer_snapshot_reg_n_0_[41] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[42] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[42]),
        .Q(\timer_snapshot_reg_n_0_[42] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[43] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[43]),
        .Q(\timer_snapshot_reg_n_0_[43] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[44] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[44]),
        .Q(\timer_snapshot_reg_n_0_[44] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[45] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[45]),
        .Q(\timer_snapshot_reg_n_0_[45] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[46] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[46]),
        .Q(\timer_snapshot_reg_n_0_[46] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \timer_snapshot_reg[47] 
       (.C(icap_clk),
        .CE(timer_snap),
        .D(timer_val[47]),
        .Q(\timer_snapshot_reg_n_0_[47] ),
        .R(SR));
  semicap_sem_ultra_v3_1_11_timer_ctr timer_timer_ctr
       (.CEP(timer_ena),
        .D(timer_val),
        .icap_clk(icap_clk));
endmodule

(* ORIG_REF_NAME = "sem_ultra_v3_1_11_timer_ctr" *) 
module semicap_sem_ultra_v3_1_11_timer_ctr
   (D,
    CEP,
    icap_clk);
  output [31:0]D;
  input CEP;
  input icap_clk;

  wire CEP;
  wire [31:0]D;
  wire icap_clk;
  wire [15:0]timer_val;
  wire NLW_DSP48E2_inst_CARRYCASCOUT_UNCONNECTED;
  wire NLW_DSP48E2_inst_MULTSIGNOUT_UNCONNECTED;
  wire NLW_DSP48E2_inst_OVERFLOW_UNCONNECTED;
  wire NLW_DSP48E2_inst_PATTERNBDETECT_UNCONNECTED;
  wire NLW_DSP48E2_inst_PATTERNDETECT_UNCONNECTED;
  wire NLW_DSP48E2_inst_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_DSP48E2_inst_ACOUT_UNCONNECTED;
  wire [17:0]NLW_DSP48E2_inst_BCOUT_UNCONNECTED;
  wire [3:0]NLW_DSP48E2_inst_CARRYOUT_UNCONNECTED;
  wire [47:0]NLW_DSP48E2_inst_PCOUT_UNCONNECTED;
  wire [7:0]NLW_DSP48E2_inst_XOROUT_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-12 {cell *THIS*}}" *) 
  (* box_type = "PRIMITIVE" *) 
  DSP48E2 #(
    .ACASCREG(1),
    .ADREG(0),
    .ALUMODEREG(0),
    .AMULTSEL("A"),
    .AREG(1),
    .AUTORESET_PATDET("NO_RESET"),
    .AUTORESET_PRIORITY("RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(1),
    .BMULTSEL("B"),
    .BREG(1),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(0),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(9'b000000000),
    .IS_RSTALLCARRYIN_INVERTED(1'b0),
    .IS_RSTALUMODE_INVERTED(1'b0),
    .IS_RSTA_INVERTED(1'b0),
    .IS_RSTB_INVERTED(1'b0),
    .IS_RSTCTRL_INVERTED(1'b0),
    .IS_RSTC_INVERTED(1'b0),
    .IS_RSTD_INVERTED(1'b0),
    .IS_RSTINMODE_INVERTED(1'b0),
    .IS_RSTM_INVERTED(1'b0),
    .IS_RSTP_INVERTED(1'b0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREADDINSEL("A"),
    .PREG(1),
    .RND(48'h000000000000),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48"),
    .USE_WIDEXOR("FALSE"),
    .XORSIMD("XOR24_48_96")) 
    DSP48E2_inst
       (.A({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_DSP48E2_inst_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_DSP48E2_inst_BCOUT_UNCONNECTED[17:0]),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_DSP48E2_inst_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b1),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_DSP48E2_inst_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(CEP),
        .CLK(icap_clk),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_DSP48E2_inst_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .OVERFLOW(NLW_DSP48E2_inst_OVERFLOW_UNCONNECTED),
        .P({D,timer_val}),
        .PATTERNBDETECT(NLW_DSP48E2_inst_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_DSP48E2_inst_PATTERNDETECT_UNCONNECTED),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT(NLW_DSP48E2_inst_PCOUT_UNCONNECTED[47:0]),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_DSP48E2_inst_UNDERFLOW_UNCONNECTED),
        .XOROUT(NLW_DSP48E2_inst_XOROUT_UNCONNECTED[7:0]));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
